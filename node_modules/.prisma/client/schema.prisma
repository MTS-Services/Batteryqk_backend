generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------------------
//  Enums
// --------------------------------------------------

enum NotificationType {
  BOOKING
  SYSTEM
  LOYALTY
  PROMOTION
  REMINDER
  CANCELLATION
  GENERAL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum AuditLogAction {
  USER_REGISTERED
  USER_LOGIN
  USER_PROFILE_UPDATED
  USER_PASSWORD_CHANGED
  USER_DELETED
  BOOKING_CREATED
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  BOOKING_COMPLETED
  BOOKING_UPDATED
  BOOKING_REMINDER_SENT
  LISTING_CREATED
  LISTING_UPDATED
  LISTING_DELETED
  CATEGORY_CREATED
  CATEGORY_UPDATED
  CATEGORY_DELETED
  COUPON_CREATED
  COUPON_UPDATED
  COUPON_DELETED
  COUPON_APPLIED
  REWARD_GRANTED
  REWARD_REDEEMED
  NOTIFICATION_SENT
  NOTIFICATIONS_MARKED_AS_READ
  ADMIN_ACTION
  SYSTEM_EVENT
  GENERAL_CREATE
  GENERAL_UPDATE
  GENERAL_DELETE
}

enum BookingPaymentMethod {
  PAID
  UNPAID
}

// --------------------------------------------------
//  Models
// --------------------------------------------------

model User {
  id            Int            @id @default(autoincrement())
  fname         String?
  lname         String?
  email         String         @unique
  uid           String         @unique @map("user_id") // Unique identifier for the user, can be used for external systems
  password      String? // Password is optional for users who can log in with social accounts
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  bookings      Booking[]      @relation("UserBookings")
  rewards       Reward[]
  notifications Notification[]
  auditLogs     AuditLog[]     @relation("UserAuditLogs")
  reviews       review[]       @relation("UserReviews")
}

model MainCategoryOption {
  id            Int                  @id @default(autoincrement())
  name          String               @unique // A main category name should be globally unique. This is correct.
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")
  subCategories SubCategoryOption[]  @relation("MainToSubCategoryOption")
  specificItems SpecificItemOption[] @relation("MainToSpecificItemOption")
  listings      Listing[]            @relation("ListingToMainCategoryOption")
}

model SubCategoryOption {
  id             Int                  @id @default(autoincrement())
  name           String // REMOVED @unique from here
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")
  listings       Listing[]            @relation("ListingToSubCategoryOption")
  mainCategoryId Int?                 @map("main_category_id")
  mainCategory   MainCategoryOption?  @relation("MainToSubCategoryOption", fields: [mainCategoryId], references: [id], onDelete: Cascade) // Changed to Cascade for easier deletion
  specificItems  SpecificItemOption[] @relation("SubToSpecificItemOption")

  @@unique([mainCategoryId, name]) // ADDED: Name is unique only within its main category.
}

model SpecificItemOption {
  id             Int                 @id @default(autoincrement())
  name           String // REMOVED @unique from here
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")
  listings       Listing[]           @relation("ListingToSpecificItemOption")
  subCategoryId  Int?                @map("sub_category_id")
  subCategory    SubCategoryOption?  @relation("SubToSpecificItemOption", fields: [subCategoryId], references: [id], onDelete: Cascade) // Changed to Cascade
  mainCategoryId Int?                @map("main_category_id")
  mainCategory   MainCategoryOption? @relation("MainToSpecificItemOption", fields: [mainCategoryId], references: [id], onDelete: Cascade) // Changed to Cascade

  @@unique([subCategoryId, name]) // ADDED: Name is unique only within its sub-category.
}

model Listing {
  id                     Int                  @id @default(autoincrement())
  name                   String?
  price                  Decimal?
  main_image             String?
  sub_images             String[]
  agegroup               String[]             @map("age_group") // e.g. ["0-2 year", "3-5 year", "6-10 year", "11-15 year", "25+ year"]
  location               String[]             @map("location") // e.g. ["City", "State", "Country"]
  facilities             String[]             @map("facilities") // e.g. ["WiFi", "Parking", "Pool"]
  operatingHours         String[]             @map("operating_hours") // e.g. ["Mon-Fri: 9am-5pm", "Sat-Sun: 10am-4pm"]
  isActive               Boolean              @default(true) @map("is_active") // Indicates if the listing is active
  gender                 String?
  discount               Decimal? // Discount percentage for the listing
  description            String?              @db.Text
  createdAt              DateTime             @default(now()) @map("created_at")
  updatedAt              DateTime             @updatedAt @map("updated_at")
  bookings               Booking[]            @relation("ListingBookings")
  reviews                review[]             @relation("ListingReviews")
  selectedMainCategories MainCategoryOption[] @relation("ListingToMainCategoryOption")
  selectedSubCategories  SubCategoryOption[]  @relation("ListingToSubCategoryOption")
  selectedSpecificItems  SpecificItemOption[] @relation("ListingToSpecificItemOption")

  @@index([name], name: "idx_listing_name")
  @@index([price], name: "idx_listing_price")
}

enum reviewStatus {
  ACCEPTED
  REJECTED
  PENDING
}

model review {
  id        Int           @id @default(autoincrement())
  userId    Int           @map("user_id")
  user      User          @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade) // Reviews are deleted if User is deleted
  listingId Int?          @map("listing_id") // Made nullable
  listing   Listing?      @relation("ListingReviews", fields: [listingId], references: [id], onDelete: SetNull) // If Listing is deleted, listingId in Review becomes NULL
  booking   Booking?      @relation("BookingReviews") // If Booking is deleted, bookingId in Review becomes NULL
  rating    Int // Rating value (e.g. 1-5 stars)
  status    reviewStatus? @default(PENDING) // Status of the review, e.g. "accepted", "pending", "rejected"
  comment   String?       @db.Text
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@index([userId])
  @@index([listingId])
}

//must need to different model for age group, i did not do it because of time shortage

model Booking {
  id              Int                   @id @default(autoincrement())
  userId          Int                   @map("user_id")
  user            User                  @relation("UserBookings", fields: [userId], references: [id], onDelete: Cascade) // Bookings are deleted if User is deleted
  listingId       Int?                  @map("listing_id") // Made nullable
  listing         Listing?              @relation("ListingBookings", fields: [listingId], references: [id], onDelete: SetNull) // If Listing is deleted, listingId in Booking becomes NULL
  bookingDate     DateTime?             @map("booking_date")
  booking_hours   String?               @map("booking_hours") // e.g. "9am-5pm"
  additionalNote  String?               @map("additional_note") @db.Text
  ageGroup        String?               @map("age_group") // e.g. "0-2 year", "3-5 year", "6-10 year", "11-15 year", "25+ year"
  numberOfPersons Int?                  @map("number_of_persons")
  paymentMethod   BookingPaymentMethod? @default(UNPAID) @map("payment_method") // e.g. "paid", "unpaid"
  status          BookingStatus?        @default(PENDING) @map("status")
  review_id       Int?                  @unique @map("review_id") // Made nullable
  review          review?               @relation("BookingReviews", fields: [review_id], references: [id], onDelete: SetNull) // If Review is deleted, review_id in Booking becomes NULL
  reward          Reward?               @relation("BookingRewards") // If Reward is deleted, reward_id in Booking becomes NULL
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")

  @@index([userId])
}

// model Coupon {
//   id         Int       @id @default(autoincrement())
//   couponCode String    @unique @map("coupon_code")
//   discount   Decimal?
//   isActive   Boolean   @default(true) @map("is_active")
//   validUntil DateTime? @map("valid_until")
//   createdAt  DateTime  @default(now()) @map("created_at")
//   updatedAt  DateTime  @updatedAt @map("updated_at")
//   bookings   Booking[] @relation("BookingToCoupon")

// }

enum reward_category {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

model Reward {
  id          Int              @id @default(autoincrement())
  userId      Int              @map("user_id")
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade) // Rewards are deleted if User is deleted
  points      Int?
  description String?
  category    reward_category? @default(BRONZE) // Category of the reward, e.g. "booking", "review", "referral", "loyalty"
  bookingId   Int?             @unique @map("booking_id") // Made nullable
  booking     Booking?         @relation("BookingRewards", fields: [bookingId], references: [id], onDelete: SetNull) // If Booking is deleted, bookingId in Reward becomes NULL
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
}

model Notification {
  id         Int              @id @default(autoincrement())
  userId     Int              @map("user_id")
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade) // Notifications are deleted if User is deleted
  title      String
  message    String           @db.Text
  type       NotificationType
  isRead     Boolean          @default(false) @map("is_read")
  link       String?
  entityId   String?          @map("entity_id")
  entityType String?          @map("entity_type")
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")

  @@index([userId, isRead])
  @@index([userId, type])
}

model AuditLog {
  id          Int            @id @default(autoincrement())
  timestamp   DateTime       @default(now())
  userId      Int?           @map("user_id")
  user        User?          @relation("UserAuditLogs", fields: [userId], references: [id], onDelete: SetNull) // userId is nulled if User is deleted, log entry remains
  action      AuditLogAction
  entityName  String?        @map("entity_name")
  entityId    String?        @map("entity_id")
  oldValues   Json?          @map("old_values") // Store state before change (for edits/deletes)
  newValues   Json?          @map("new_values") // Store state after change (for edits/creates)
  description String?        @db.Text
  ipAddress   String?        @map("ip_address")
  userAgent   String?        @map("user_agent")

  @@index([userId])
  @@index([entityName, entityId])
  @@index([action])
  @@index([timestamp])
}
