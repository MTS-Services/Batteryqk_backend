
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model MainCategoryOption
 * 
 */
export type MainCategoryOption = $Result.DefaultSelection<Prisma.$MainCategoryOptionPayload>
/**
 * Model SubCategoryOption
 * 
 */
export type SubCategoryOption = $Result.DefaultSelection<Prisma.$SubCategoryOptionPayload>
/**
 * Model SpecificItemOption
 * 
 */
export type SpecificItemOption = $Result.DefaultSelection<Prisma.$SpecificItemOptionPayload>
/**
 * Model Listing
 * 
 */
export type Listing = $Result.DefaultSelection<Prisma.$ListingPayload>
/**
 * Model review
 * 
 */
export type review = $Result.DefaultSelection<Prisma.$reviewPayload>
/**
 * Model Booking
 * 
 */
export type Booking = $Result.DefaultSelection<Prisma.$BookingPayload>
/**
 * Model Reward
 * 
 */
export type Reward = $Result.DefaultSelection<Prisma.$RewardPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const NotificationType: {
  BOOKING: 'BOOKING',
  SYSTEM: 'SYSTEM',
  LOYALTY: 'LOYALTY',
  PROMOTION: 'PROMOTION',
  REMINDER: 'REMINDER',
  CANCELLATION: 'CANCELLATION',
  GENERAL: 'GENERAL'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const BookingStatus: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

export type BookingStatus = (typeof BookingStatus)[keyof typeof BookingStatus]


export const AuditLogAction: {
  USER_REGISTERED: 'USER_REGISTERED',
  USER_LOGIN: 'USER_LOGIN',
  USER_PROFILE_UPDATED: 'USER_PROFILE_UPDATED',
  USER_PASSWORD_CHANGED: 'USER_PASSWORD_CHANGED',
  USER_DELETED: 'USER_DELETED',
  BOOKING_CREATED: 'BOOKING_CREATED',
  BOOKING_CONFIRMED: 'BOOKING_CONFIRMED',
  BOOKING_CANCELLED: 'BOOKING_CANCELLED',
  BOOKING_COMPLETED: 'BOOKING_COMPLETED',
  BOOKING_UPDATED: 'BOOKING_UPDATED',
  BOOKING_REMINDER_SENT: 'BOOKING_REMINDER_SENT',
  LISTING_CREATED: 'LISTING_CREATED',
  LISTING_UPDATED: 'LISTING_UPDATED',
  LISTING_DELETED: 'LISTING_DELETED',
  CATEGORY_CREATED: 'CATEGORY_CREATED',
  CATEGORY_UPDATED: 'CATEGORY_UPDATED',
  CATEGORY_DELETED: 'CATEGORY_DELETED',
  COUPON_CREATED: 'COUPON_CREATED',
  COUPON_UPDATED: 'COUPON_UPDATED',
  COUPON_DELETED: 'COUPON_DELETED',
  COUPON_APPLIED: 'COUPON_APPLIED',
  REWARD_GRANTED: 'REWARD_GRANTED',
  REWARD_REDEEMED: 'REWARD_REDEEMED',
  NOTIFICATION_SENT: 'NOTIFICATION_SENT',
  NOTIFICATIONS_MARKED_AS_READ: 'NOTIFICATIONS_MARKED_AS_READ',
  ADMIN_ACTION: 'ADMIN_ACTION',
  SYSTEM_EVENT: 'SYSTEM_EVENT',
  GENERAL_CREATE: 'GENERAL_CREATE',
  GENERAL_UPDATE: 'GENERAL_UPDATE',
  GENERAL_DELETE: 'GENERAL_DELETE'
};

export type AuditLogAction = (typeof AuditLogAction)[keyof typeof AuditLogAction]


export const BookingPaymentMethod: {
  PAID: 'PAID',
  UNPAID: 'UNPAID'
};

export type BookingPaymentMethod = (typeof BookingPaymentMethod)[keyof typeof BookingPaymentMethod]


export const reviewStatus: {
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

export type reviewStatus = (typeof reviewStatus)[keyof typeof reviewStatus]


export const reward_category: {
  BRONZE: 'BRONZE',
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  PLATINUM: 'PLATINUM'
};

export type reward_category = (typeof reward_category)[keyof typeof reward_category]

}

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type BookingStatus = $Enums.BookingStatus

export const BookingStatus: typeof $Enums.BookingStatus

export type AuditLogAction = $Enums.AuditLogAction

export const AuditLogAction: typeof $Enums.AuditLogAction

export type BookingPaymentMethod = $Enums.BookingPaymentMethod

export const BookingPaymentMethod: typeof $Enums.BookingPaymentMethod

export type reviewStatus = $Enums.reviewStatus

export const reviewStatus: typeof $Enums.reviewStatus

export type reward_category = $Enums.reward_category

export const reward_category: typeof $Enums.reward_category

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mainCategoryOption`: Exposes CRUD operations for the **MainCategoryOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MainCategoryOptions
    * const mainCategoryOptions = await prisma.mainCategoryOption.findMany()
    * ```
    */
  get mainCategoryOption(): Prisma.MainCategoryOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subCategoryOption`: Exposes CRUD operations for the **SubCategoryOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubCategoryOptions
    * const subCategoryOptions = await prisma.subCategoryOption.findMany()
    * ```
    */
  get subCategoryOption(): Prisma.SubCategoryOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.specificItemOption`: Exposes CRUD operations for the **SpecificItemOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SpecificItemOptions
    * const specificItemOptions = await prisma.specificItemOption.findMany()
    * ```
    */
  get specificItemOption(): Prisma.SpecificItemOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.listing`: Exposes CRUD operations for the **Listing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Listings
    * const listings = await prisma.listing.findMany()
    * ```
    */
  get listing(): Prisma.ListingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.reviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.booking`: Exposes CRUD operations for the **Booking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.booking.findMany()
    * ```
    */
  get booking(): Prisma.BookingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reward`: Exposes CRUD operations for the **Reward** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rewards
    * const rewards = await prisma.reward.findMany()
    * ```
    */
  get reward(): Prisma.RewardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    MainCategoryOption: 'MainCategoryOption',
    SubCategoryOption: 'SubCategoryOption',
    SpecificItemOption: 'SpecificItemOption',
    Listing: 'Listing',
    review: 'review',
    Booking: 'Booking',
    Reward: 'Reward',
    Notification: 'Notification',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "mainCategoryOption" | "subCategoryOption" | "specificItemOption" | "listing" | "review" | "booking" | "reward" | "notification" | "auditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      MainCategoryOption: {
        payload: Prisma.$MainCategoryOptionPayload<ExtArgs>
        fields: Prisma.MainCategoryOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MainCategoryOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainCategoryOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MainCategoryOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainCategoryOptionPayload>
          }
          findFirst: {
            args: Prisma.MainCategoryOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainCategoryOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MainCategoryOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainCategoryOptionPayload>
          }
          findMany: {
            args: Prisma.MainCategoryOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainCategoryOptionPayload>[]
          }
          create: {
            args: Prisma.MainCategoryOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainCategoryOptionPayload>
          }
          createMany: {
            args: Prisma.MainCategoryOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MainCategoryOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainCategoryOptionPayload>[]
          }
          delete: {
            args: Prisma.MainCategoryOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainCategoryOptionPayload>
          }
          update: {
            args: Prisma.MainCategoryOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainCategoryOptionPayload>
          }
          deleteMany: {
            args: Prisma.MainCategoryOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MainCategoryOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MainCategoryOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainCategoryOptionPayload>[]
          }
          upsert: {
            args: Prisma.MainCategoryOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainCategoryOptionPayload>
          }
          aggregate: {
            args: Prisma.MainCategoryOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMainCategoryOption>
          }
          groupBy: {
            args: Prisma.MainCategoryOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MainCategoryOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MainCategoryOptionCountArgs<ExtArgs>
            result: $Utils.Optional<MainCategoryOptionCountAggregateOutputType> | number
          }
        }
      }
      SubCategoryOption: {
        payload: Prisma.$SubCategoryOptionPayload<ExtArgs>
        fields: Prisma.SubCategoryOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubCategoryOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubCategoryOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubCategoryOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubCategoryOptionPayload>
          }
          findFirst: {
            args: Prisma.SubCategoryOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubCategoryOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubCategoryOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubCategoryOptionPayload>
          }
          findMany: {
            args: Prisma.SubCategoryOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubCategoryOptionPayload>[]
          }
          create: {
            args: Prisma.SubCategoryOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubCategoryOptionPayload>
          }
          createMany: {
            args: Prisma.SubCategoryOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubCategoryOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubCategoryOptionPayload>[]
          }
          delete: {
            args: Prisma.SubCategoryOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubCategoryOptionPayload>
          }
          update: {
            args: Prisma.SubCategoryOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubCategoryOptionPayload>
          }
          deleteMany: {
            args: Prisma.SubCategoryOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubCategoryOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubCategoryOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubCategoryOptionPayload>[]
          }
          upsert: {
            args: Prisma.SubCategoryOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubCategoryOptionPayload>
          }
          aggregate: {
            args: Prisma.SubCategoryOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubCategoryOption>
          }
          groupBy: {
            args: Prisma.SubCategoryOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubCategoryOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubCategoryOptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubCategoryOptionCountAggregateOutputType> | number
          }
        }
      }
      SpecificItemOption: {
        payload: Prisma.$SpecificItemOptionPayload<ExtArgs>
        fields: Prisma.SpecificItemOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpecificItemOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecificItemOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpecificItemOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecificItemOptionPayload>
          }
          findFirst: {
            args: Prisma.SpecificItemOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecificItemOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpecificItemOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecificItemOptionPayload>
          }
          findMany: {
            args: Prisma.SpecificItemOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecificItemOptionPayload>[]
          }
          create: {
            args: Prisma.SpecificItemOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecificItemOptionPayload>
          }
          createMany: {
            args: Prisma.SpecificItemOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpecificItemOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecificItemOptionPayload>[]
          }
          delete: {
            args: Prisma.SpecificItemOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecificItemOptionPayload>
          }
          update: {
            args: Prisma.SpecificItemOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecificItemOptionPayload>
          }
          deleteMany: {
            args: Prisma.SpecificItemOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpecificItemOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SpecificItemOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecificItemOptionPayload>[]
          }
          upsert: {
            args: Prisma.SpecificItemOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecificItemOptionPayload>
          }
          aggregate: {
            args: Prisma.SpecificItemOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpecificItemOption>
          }
          groupBy: {
            args: Prisma.SpecificItemOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpecificItemOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpecificItemOptionCountArgs<ExtArgs>
            result: $Utils.Optional<SpecificItemOptionCountAggregateOutputType> | number
          }
        }
      }
      Listing: {
        payload: Prisma.$ListingPayload<ExtArgs>
        fields: Prisma.ListingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ListingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ListingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListingPayload>
          }
          findFirst: {
            args: Prisma.ListingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ListingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListingPayload>
          }
          findMany: {
            args: Prisma.ListingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListingPayload>[]
          }
          create: {
            args: Prisma.ListingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListingPayload>
          }
          createMany: {
            args: Prisma.ListingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ListingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListingPayload>[]
          }
          delete: {
            args: Prisma.ListingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListingPayload>
          }
          update: {
            args: Prisma.ListingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListingPayload>
          }
          deleteMany: {
            args: Prisma.ListingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ListingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ListingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListingPayload>[]
          }
          upsert: {
            args: Prisma.ListingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListingPayload>
          }
          aggregate: {
            args: Prisma.ListingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateListing>
          }
          groupBy: {
            args: Prisma.ListingGroupByArgs<ExtArgs>
            result: $Utils.Optional<ListingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ListingCountArgs<ExtArgs>
            result: $Utils.Optional<ListingCountAggregateOutputType> | number
          }
        }
      }
      review: {
        payload: Prisma.$reviewPayload<ExtArgs>
        fields: Prisma.reviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          findFirst: {
            args: Prisma.reviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          findMany: {
            args: Prisma.reviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>[]
          }
          create: {
            args: Prisma.reviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          createMany: {
            args: Prisma.reviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.reviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>[]
          }
          delete: {
            args: Prisma.reviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          update: {
            args: Prisma.reviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          deleteMany: {
            args: Prisma.reviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.reviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.reviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>[]
          }
          upsert: {
            args: Prisma.reviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.reviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.reviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      Booking: {
        payload: Prisma.$BookingPayload<ExtArgs>
        fields: Prisma.BookingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          findFirst: {
            args: Prisma.BookingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          findMany: {
            args: Prisma.BookingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          create: {
            args: Prisma.BookingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          createMany: {
            args: Prisma.BookingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          delete: {
            args: Prisma.BookingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          update: {
            args: Prisma.BookingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          deleteMany: {
            args: Prisma.BookingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          upsert: {
            args: Prisma.BookingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          aggregate: {
            args: Prisma.BookingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBooking>
          }
          groupBy: {
            args: Prisma.BookingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookingGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookingCountArgs<ExtArgs>
            result: $Utils.Optional<BookingCountAggregateOutputType> | number
          }
        }
      }
      Reward: {
        payload: Prisma.$RewardPayload<ExtArgs>
        fields: Prisma.RewardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RewardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RewardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          findFirst: {
            args: Prisma.RewardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RewardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          findMany: {
            args: Prisma.RewardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>[]
          }
          create: {
            args: Prisma.RewardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          createMany: {
            args: Prisma.RewardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RewardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>[]
          }
          delete: {
            args: Prisma.RewardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          update: {
            args: Prisma.RewardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          deleteMany: {
            args: Prisma.RewardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RewardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RewardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>[]
          }
          upsert: {
            args: Prisma.RewardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardPayload>
          }
          aggregate: {
            args: Prisma.RewardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReward>
          }
          groupBy: {
            args: Prisma.RewardGroupByArgs<ExtArgs>
            result: $Utils.Optional<RewardGroupByOutputType>[]
          }
          count: {
            args: Prisma.RewardCountArgs<ExtArgs>
            result: $Utils.Optional<RewardCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    mainCategoryOption?: MainCategoryOptionOmit
    subCategoryOption?: SubCategoryOptionOmit
    specificItemOption?: SpecificItemOptionOmit
    listing?: ListingOmit
    review?: reviewOmit
    booking?: BookingOmit
    reward?: RewardOmit
    notification?: NotificationOmit
    auditLog?: AuditLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    bookings: number
    rewards: number
    notifications: number
    auditLogs: number
    reviews: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookings?: boolean | UserCountOutputTypeCountBookingsArgs
    rewards?: boolean | UserCountOutputTypeCountRewardsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    reviews?: boolean | UserCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RewardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewWhereInput
  }


  /**
   * Count Type MainCategoryOptionCountOutputType
   */

  export type MainCategoryOptionCountOutputType = {
    subCategories: number
    specificItems: number
    listings: number
  }

  export type MainCategoryOptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subCategories?: boolean | MainCategoryOptionCountOutputTypeCountSubCategoriesArgs
    specificItems?: boolean | MainCategoryOptionCountOutputTypeCountSpecificItemsArgs
    listings?: boolean | MainCategoryOptionCountOutputTypeCountListingsArgs
  }

  // Custom InputTypes
  /**
   * MainCategoryOptionCountOutputType without action
   */
  export type MainCategoryOptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOptionCountOutputType
     */
    select?: MainCategoryOptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MainCategoryOptionCountOutputType without action
   */
  export type MainCategoryOptionCountOutputTypeCountSubCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubCategoryOptionWhereInput
  }

  /**
   * MainCategoryOptionCountOutputType without action
   */
  export type MainCategoryOptionCountOutputTypeCountSpecificItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpecificItemOptionWhereInput
  }

  /**
   * MainCategoryOptionCountOutputType without action
   */
  export type MainCategoryOptionCountOutputTypeCountListingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListingWhereInput
  }


  /**
   * Count Type SubCategoryOptionCountOutputType
   */

  export type SubCategoryOptionCountOutputType = {
    listings: number
    specificItems: number
  }

  export type SubCategoryOptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    listings?: boolean | SubCategoryOptionCountOutputTypeCountListingsArgs
    specificItems?: boolean | SubCategoryOptionCountOutputTypeCountSpecificItemsArgs
  }

  // Custom InputTypes
  /**
   * SubCategoryOptionCountOutputType without action
   */
  export type SubCategoryOptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOptionCountOutputType
     */
    select?: SubCategoryOptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubCategoryOptionCountOutputType without action
   */
  export type SubCategoryOptionCountOutputTypeCountListingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListingWhereInput
  }

  /**
   * SubCategoryOptionCountOutputType without action
   */
  export type SubCategoryOptionCountOutputTypeCountSpecificItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpecificItemOptionWhereInput
  }


  /**
   * Count Type SpecificItemOptionCountOutputType
   */

  export type SpecificItemOptionCountOutputType = {
    listings: number
  }

  export type SpecificItemOptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    listings?: boolean | SpecificItemOptionCountOutputTypeCountListingsArgs
  }

  // Custom InputTypes
  /**
   * SpecificItemOptionCountOutputType without action
   */
  export type SpecificItemOptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOptionCountOutputType
     */
    select?: SpecificItemOptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SpecificItemOptionCountOutputType without action
   */
  export type SpecificItemOptionCountOutputTypeCountListingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListingWhereInput
  }


  /**
   * Count Type ListingCountOutputType
   */

  export type ListingCountOutputType = {
    bookings: number
    reviews: number
    selectedMainCategories: number
    selectedSubCategories: number
    selectedSpecificItems: number
  }

  export type ListingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookings?: boolean | ListingCountOutputTypeCountBookingsArgs
    reviews?: boolean | ListingCountOutputTypeCountReviewsArgs
    selectedMainCategories?: boolean | ListingCountOutputTypeCountSelectedMainCategoriesArgs
    selectedSubCategories?: boolean | ListingCountOutputTypeCountSelectedSubCategoriesArgs
    selectedSpecificItems?: boolean | ListingCountOutputTypeCountSelectedSpecificItemsArgs
  }

  // Custom InputTypes
  /**
   * ListingCountOutputType without action
   */
  export type ListingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListingCountOutputType
     */
    select?: ListingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ListingCountOutputType without action
   */
  export type ListingCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
  }

  /**
   * ListingCountOutputType without action
   */
  export type ListingCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewWhereInput
  }

  /**
   * ListingCountOutputType without action
   */
  export type ListingCountOutputTypeCountSelectedMainCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MainCategoryOptionWhereInput
  }

  /**
   * ListingCountOutputType without action
   */
  export type ListingCountOutputTypeCountSelectedSubCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubCategoryOptionWhereInput
  }

  /**
   * ListingCountOutputType without action
   */
  export type ListingCountOutputTypeCountSelectedSpecificItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpecificItemOptionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    fname: string | null
    lname: string | null
    email: string | null
    uid: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    fname: string | null
    lname: string | null
    email: string | null
    uid: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    fname: number
    lname: number
    email: number
    uid: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    fname?: true
    lname?: true
    email?: true
    uid?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    fname?: true
    lname?: true
    email?: true
    uid?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    fname?: true
    lname?: true
    email?: true
    uid?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    fname: string | null
    lname: string | null
    email: string
    uid: string
    password: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fname?: boolean
    lname?: boolean
    email?: boolean
    uid?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookings?: boolean | User$bookingsArgs<ExtArgs>
    rewards?: boolean | User$rewardsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fname?: boolean
    lname?: boolean
    email?: boolean
    uid?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fname?: boolean
    lname?: boolean
    email?: boolean
    uid?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    fname?: boolean
    lname?: boolean
    email?: boolean
    uid?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fname" | "lname" | "email" | "uid" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookings?: boolean | User$bookingsArgs<ExtArgs>
    rewards?: boolean | User$rewardsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      bookings: Prisma.$BookingPayload<ExtArgs>[]
      rewards: Prisma.$RewardPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      reviews: Prisma.$reviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fname: string | null
      lname: string | null
      email: string
      uid: string
      password: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bookings<T extends User$bookingsArgs<ExtArgs> = {}>(args?: Subset<T, User$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rewards<T extends User$rewardsArgs<ExtArgs> = {}>(args?: Subset<T, User$rewardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends User$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly fname: FieldRef<"User", 'String'>
    readonly lname: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly uid: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.bookings
   */
  export type User$bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * User.rewards
   */
  export type User$rewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reward
     */
    omit?: RewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    where?: RewardWhereInput
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    cursor?: RewardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.reviews
   */
  export type User$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    where?: reviewWhereInput
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    cursor?: reviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model MainCategoryOption
   */

  export type AggregateMainCategoryOption = {
    _count: MainCategoryOptionCountAggregateOutputType | null
    _avg: MainCategoryOptionAvgAggregateOutputType | null
    _sum: MainCategoryOptionSumAggregateOutputType | null
    _min: MainCategoryOptionMinAggregateOutputType | null
    _max: MainCategoryOptionMaxAggregateOutputType | null
  }

  export type MainCategoryOptionAvgAggregateOutputType = {
    id: number | null
  }

  export type MainCategoryOptionSumAggregateOutputType = {
    id: number | null
  }

  export type MainCategoryOptionMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MainCategoryOptionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MainCategoryOptionCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MainCategoryOptionAvgAggregateInputType = {
    id?: true
  }

  export type MainCategoryOptionSumAggregateInputType = {
    id?: true
  }

  export type MainCategoryOptionMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MainCategoryOptionMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MainCategoryOptionCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MainCategoryOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MainCategoryOption to aggregate.
     */
    where?: MainCategoryOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MainCategoryOptions to fetch.
     */
    orderBy?: MainCategoryOptionOrderByWithRelationInput | MainCategoryOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MainCategoryOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MainCategoryOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MainCategoryOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MainCategoryOptions
    **/
    _count?: true | MainCategoryOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MainCategoryOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MainCategoryOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MainCategoryOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MainCategoryOptionMaxAggregateInputType
  }

  export type GetMainCategoryOptionAggregateType<T extends MainCategoryOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateMainCategoryOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMainCategoryOption[P]>
      : GetScalarType<T[P], AggregateMainCategoryOption[P]>
  }




  export type MainCategoryOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MainCategoryOptionWhereInput
    orderBy?: MainCategoryOptionOrderByWithAggregationInput | MainCategoryOptionOrderByWithAggregationInput[]
    by: MainCategoryOptionScalarFieldEnum[] | MainCategoryOptionScalarFieldEnum
    having?: MainCategoryOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MainCategoryOptionCountAggregateInputType | true
    _avg?: MainCategoryOptionAvgAggregateInputType
    _sum?: MainCategoryOptionSumAggregateInputType
    _min?: MainCategoryOptionMinAggregateInputType
    _max?: MainCategoryOptionMaxAggregateInputType
  }

  export type MainCategoryOptionGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: MainCategoryOptionCountAggregateOutputType | null
    _avg: MainCategoryOptionAvgAggregateOutputType | null
    _sum: MainCategoryOptionSumAggregateOutputType | null
    _min: MainCategoryOptionMinAggregateOutputType | null
    _max: MainCategoryOptionMaxAggregateOutputType | null
  }

  type GetMainCategoryOptionGroupByPayload<T extends MainCategoryOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MainCategoryOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MainCategoryOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MainCategoryOptionGroupByOutputType[P]>
            : GetScalarType<T[P], MainCategoryOptionGroupByOutputType[P]>
        }
      >
    >


  export type MainCategoryOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subCategories?: boolean | MainCategoryOption$subCategoriesArgs<ExtArgs>
    specificItems?: boolean | MainCategoryOption$specificItemsArgs<ExtArgs>
    listings?: boolean | MainCategoryOption$listingsArgs<ExtArgs>
    _count?: boolean | MainCategoryOptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mainCategoryOption"]>

  export type MainCategoryOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["mainCategoryOption"]>

  export type MainCategoryOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["mainCategoryOption"]>

  export type MainCategoryOptionSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MainCategoryOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["mainCategoryOption"]>
  export type MainCategoryOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subCategories?: boolean | MainCategoryOption$subCategoriesArgs<ExtArgs>
    specificItems?: boolean | MainCategoryOption$specificItemsArgs<ExtArgs>
    listings?: boolean | MainCategoryOption$listingsArgs<ExtArgs>
    _count?: boolean | MainCategoryOptionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MainCategoryOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MainCategoryOptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MainCategoryOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MainCategoryOption"
    objects: {
      subCategories: Prisma.$SubCategoryOptionPayload<ExtArgs>[]
      specificItems: Prisma.$SpecificItemOptionPayload<ExtArgs>[]
      listings: Prisma.$ListingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mainCategoryOption"]>
    composites: {}
  }

  type MainCategoryOptionGetPayload<S extends boolean | null | undefined | MainCategoryOptionDefaultArgs> = $Result.GetResult<Prisma.$MainCategoryOptionPayload, S>

  type MainCategoryOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MainCategoryOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MainCategoryOptionCountAggregateInputType | true
    }

  export interface MainCategoryOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MainCategoryOption'], meta: { name: 'MainCategoryOption' } }
    /**
     * Find zero or one MainCategoryOption that matches the filter.
     * @param {MainCategoryOptionFindUniqueArgs} args - Arguments to find a MainCategoryOption
     * @example
     * // Get one MainCategoryOption
     * const mainCategoryOption = await prisma.mainCategoryOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MainCategoryOptionFindUniqueArgs>(args: SelectSubset<T, MainCategoryOptionFindUniqueArgs<ExtArgs>>): Prisma__MainCategoryOptionClient<$Result.GetResult<Prisma.$MainCategoryOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MainCategoryOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MainCategoryOptionFindUniqueOrThrowArgs} args - Arguments to find a MainCategoryOption
     * @example
     * // Get one MainCategoryOption
     * const mainCategoryOption = await prisma.mainCategoryOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MainCategoryOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, MainCategoryOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MainCategoryOptionClient<$Result.GetResult<Prisma.$MainCategoryOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MainCategoryOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MainCategoryOptionFindFirstArgs} args - Arguments to find a MainCategoryOption
     * @example
     * // Get one MainCategoryOption
     * const mainCategoryOption = await prisma.mainCategoryOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MainCategoryOptionFindFirstArgs>(args?: SelectSubset<T, MainCategoryOptionFindFirstArgs<ExtArgs>>): Prisma__MainCategoryOptionClient<$Result.GetResult<Prisma.$MainCategoryOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MainCategoryOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MainCategoryOptionFindFirstOrThrowArgs} args - Arguments to find a MainCategoryOption
     * @example
     * // Get one MainCategoryOption
     * const mainCategoryOption = await prisma.mainCategoryOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MainCategoryOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, MainCategoryOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MainCategoryOptionClient<$Result.GetResult<Prisma.$MainCategoryOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MainCategoryOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MainCategoryOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MainCategoryOptions
     * const mainCategoryOptions = await prisma.mainCategoryOption.findMany()
     * 
     * // Get first 10 MainCategoryOptions
     * const mainCategoryOptions = await prisma.mainCategoryOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mainCategoryOptionWithIdOnly = await prisma.mainCategoryOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MainCategoryOptionFindManyArgs>(args?: SelectSubset<T, MainCategoryOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MainCategoryOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MainCategoryOption.
     * @param {MainCategoryOptionCreateArgs} args - Arguments to create a MainCategoryOption.
     * @example
     * // Create one MainCategoryOption
     * const MainCategoryOption = await prisma.mainCategoryOption.create({
     *   data: {
     *     // ... data to create a MainCategoryOption
     *   }
     * })
     * 
     */
    create<T extends MainCategoryOptionCreateArgs>(args: SelectSubset<T, MainCategoryOptionCreateArgs<ExtArgs>>): Prisma__MainCategoryOptionClient<$Result.GetResult<Prisma.$MainCategoryOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MainCategoryOptions.
     * @param {MainCategoryOptionCreateManyArgs} args - Arguments to create many MainCategoryOptions.
     * @example
     * // Create many MainCategoryOptions
     * const mainCategoryOption = await prisma.mainCategoryOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MainCategoryOptionCreateManyArgs>(args?: SelectSubset<T, MainCategoryOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MainCategoryOptions and returns the data saved in the database.
     * @param {MainCategoryOptionCreateManyAndReturnArgs} args - Arguments to create many MainCategoryOptions.
     * @example
     * // Create many MainCategoryOptions
     * const mainCategoryOption = await prisma.mainCategoryOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MainCategoryOptions and only return the `id`
     * const mainCategoryOptionWithIdOnly = await prisma.mainCategoryOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MainCategoryOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, MainCategoryOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MainCategoryOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MainCategoryOption.
     * @param {MainCategoryOptionDeleteArgs} args - Arguments to delete one MainCategoryOption.
     * @example
     * // Delete one MainCategoryOption
     * const MainCategoryOption = await prisma.mainCategoryOption.delete({
     *   where: {
     *     // ... filter to delete one MainCategoryOption
     *   }
     * })
     * 
     */
    delete<T extends MainCategoryOptionDeleteArgs>(args: SelectSubset<T, MainCategoryOptionDeleteArgs<ExtArgs>>): Prisma__MainCategoryOptionClient<$Result.GetResult<Prisma.$MainCategoryOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MainCategoryOption.
     * @param {MainCategoryOptionUpdateArgs} args - Arguments to update one MainCategoryOption.
     * @example
     * // Update one MainCategoryOption
     * const mainCategoryOption = await prisma.mainCategoryOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MainCategoryOptionUpdateArgs>(args: SelectSubset<T, MainCategoryOptionUpdateArgs<ExtArgs>>): Prisma__MainCategoryOptionClient<$Result.GetResult<Prisma.$MainCategoryOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MainCategoryOptions.
     * @param {MainCategoryOptionDeleteManyArgs} args - Arguments to filter MainCategoryOptions to delete.
     * @example
     * // Delete a few MainCategoryOptions
     * const { count } = await prisma.mainCategoryOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MainCategoryOptionDeleteManyArgs>(args?: SelectSubset<T, MainCategoryOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MainCategoryOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MainCategoryOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MainCategoryOptions
     * const mainCategoryOption = await prisma.mainCategoryOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MainCategoryOptionUpdateManyArgs>(args: SelectSubset<T, MainCategoryOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MainCategoryOptions and returns the data updated in the database.
     * @param {MainCategoryOptionUpdateManyAndReturnArgs} args - Arguments to update many MainCategoryOptions.
     * @example
     * // Update many MainCategoryOptions
     * const mainCategoryOption = await prisma.mainCategoryOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MainCategoryOptions and only return the `id`
     * const mainCategoryOptionWithIdOnly = await prisma.mainCategoryOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MainCategoryOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, MainCategoryOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MainCategoryOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MainCategoryOption.
     * @param {MainCategoryOptionUpsertArgs} args - Arguments to update or create a MainCategoryOption.
     * @example
     * // Update or create a MainCategoryOption
     * const mainCategoryOption = await prisma.mainCategoryOption.upsert({
     *   create: {
     *     // ... data to create a MainCategoryOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MainCategoryOption we want to update
     *   }
     * })
     */
    upsert<T extends MainCategoryOptionUpsertArgs>(args: SelectSubset<T, MainCategoryOptionUpsertArgs<ExtArgs>>): Prisma__MainCategoryOptionClient<$Result.GetResult<Prisma.$MainCategoryOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MainCategoryOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MainCategoryOptionCountArgs} args - Arguments to filter MainCategoryOptions to count.
     * @example
     * // Count the number of MainCategoryOptions
     * const count = await prisma.mainCategoryOption.count({
     *   where: {
     *     // ... the filter for the MainCategoryOptions we want to count
     *   }
     * })
    **/
    count<T extends MainCategoryOptionCountArgs>(
      args?: Subset<T, MainCategoryOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MainCategoryOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MainCategoryOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MainCategoryOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MainCategoryOptionAggregateArgs>(args: Subset<T, MainCategoryOptionAggregateArgs>): Prisma.PrismaPromise<GetMainCategoryOptionAggregateType<T>>

    /**
     * Group by MainCategoryOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MainCategoryOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MainCategoryOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MainCategoryOptionGroupByArgs['orderBy'] }
        : { orderBy?: MainCategoryOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MainCategoryOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMainCategoryOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MainCategoryOption model
   */
  readonly fields: MainCategoryOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MainCategoryOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MainCategoryOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subCategories<T extends MainCategoryOption$subCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, MainCategoryOption$subCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubCategoryOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    specificItems<T extends MainCategoryOption$specificItemsArgs<ExtArgs> = {}>(args?: Subset<T, MainCategoryOption$specificItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecificItemOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    listings<T extends MainCategoryOption$listingsArgs<ExtArgs> = {}>(args?: Subset<T, MainCategoryOption$listingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MainCategoryOption model
   */
  interface MainCategoryOptionFieldRefs {
    readonly id: FieldRef<"MainCategoryOption", 'Int'>
    readonly name: FieldRef<"MainCategoryOption", 'String'>
    readonly createdAt: FieldRef<"MainCategoryOption", 'DateTime'>
    readonly updatedAt: FieldRef<"MainCategoryOption", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MainCategoryOption findUnique
   */
  export type MainCategoryOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainCategoryOptionInclude<ExtArgs> | null
    /**
     * Filter, which MainCategoryOption to fetch.
     */
    where: MainCategoryOptionWhereUniqueInput
  }

  /**
   * MainCategoryOption findUniqueOrThrow
   */
  export type MainCategoryOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainCategoryOptionInclude<ExtArgs> | null
    /**
     * Filter, which MainCategoryOption to fetch.
     */
    where: MainCategoryOptionWhereUniqueInput
  }

  /**
   * MainCategoryOption findFirst
   */
  export type MainCategoryOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainCategoryOptionInclude<ExtArgs> | null
    /**
     * Filter, which MainCategoryOption to fetch.
     */
    where?: MainCategoryOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MainCategoryOptions to fetch.
     */
    orderBy?: MainCategoryOptionOrderByWithRelationInput | MainCategoryOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MainCategoryOptions.
     */
    cursor?: MainCategoryOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MainCategoryOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MainCategoryOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MainCategoryOptions.
     */
    distinct?: MainCategoryOptionScalarFieldEnum | MainCategoryOptionScalarFieldEnum[]
  }

  /**
   * MainCategoryOption findFirstOrThrow
   */
  export type MainCategoryOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainCategoryOptionInclude<ExtArgs> | null
    /**
     * Filter, which MainCategoryOption to fetch.
     */
    where?: MainCategoryOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MainCategoryOptions to fetch.
     */
    orderBy?: MainCategoryOptionOrderByWithRelationInput | MainCategoryOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MainCategoryOptions.
     */
    cursor?: MainCategoryOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MainCategoryOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MainCategoryOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MainCategoryOptions.
     */
    distinct?: MainCategoryOptionScalarFieldEnum | MainCategoryOptionScalarFieldEnum[]
  }

  /**
   * MainCategoryOption findMany
   */
  export type MainCategoryOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainCategoryOptionInclude<ExtArgs> | null
    /**
     * Filter, which MainCategoryOptions to fetch.
     */
    where?: MainCategoryOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MainCategoryOptions to fetch.
     */
    orderBy?: MainCategoryOptionOrderByWithRelationInput | MainCategoryOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MainCategoryOptions.
     */
    cursor?: MainCategoryOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MainCategoryOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MainCategoryOptions.
     */
    skip?: number
    distinct?: MainCategoryOptionScalarFieldEnum | MainCategoryOptionScalarFieldEnum[]
  }

  /**
   * MainCategoryOption create
   */
  export type MainCategoryOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainCategoryOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a MainCategoryOption.
     */
    data: XOR<MainCategoryOptionCreateInput, MainCategoryOptionUncheckedCreateInput>
  }

  /**
   * MainCategoryOption createMany
   */
  export type MainCategoryOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MainCategoryOptions.
     */
    data: MainCategoryOptionCreateManyInput | MainCategoryOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MainCategoryOption createManyAndReturn
   */
  export type MainCategoryOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * The data used to create many MainCategoryOptions.
     */
    data: MainCategoryOptionCreateManyInput | MainCategoryOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MainCategoryOption update
   */
  export type MainCategoryOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainCategoryOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a MainCategoryOption.
     */
    data: XOR<MainCategoryOptionUpdateInput, MainCategoryOptionUncheckedUpdateInput>
    /**
     * Choose, which MainCategoryOption to update.
     */
    where: MainCategoryOptionWhereUniqueInput
  }

  /**
   * MainCategoryOption updateMany
   */
  export type MainCategoryOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MainCategoryOptions.
     */
    data: XOR<MainCategoryOptionUpdateManyMutationInput, MainCategoryOptionUncheckedUpdateManyInput>
    /**
     * Filter which MainCategoryOptions to update
     */
    where?: MainCategoryOptionWhereInput
    /**
     * Limit how many MainCategoryOptions to update.
     */
    limit?: number
  }

  /**
   * MainCategoryOption updateManyAndReturn
   */
  export type MainCategoryOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * The data used to update MainCategoryOptions.
     */
    data: XOR<MainCategoryOptionUpdateManyMutationInput, MainCategoryOptionUncheckedUpdateManyInput>
    /**
     * Filter which MainCategoryOptions to update
     */
    where?: MainCategoryOptionWhereInput
    /**
     * Limit how many MainCategoryOptions to update.
     */
    limit?: number
  }

  /**
   * MainCategoryOption upsert
   */
  export type MainCategoryOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainCategoryOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the MainCategoryOption to update in case it exists.
     */
    where: MainCategoryOptionWhereUniqueInput
    /**
     * In case the MainCategoryOption found by the `where` argument doesn't exist, create a new MainCategoryOption with this data.
     */
    create: XOR<MainCategoryOptionCreateInput, MainCategoryOptionUncheckedCreateInput>
    /**
     * In case the MainCategoryOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MainCategoryOptionUpdateInput, MainCategoryOptionUncheckedUpdateInput>
  }

  /**
   * MainCategoryOption delete
   */
  export type MainCategoryOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainCategoryOptionInclude<ExtArgs> | null
    /**
     * Filter which MainCategoryOption to delete.
     */
    where: MainCategoryOptionWhereUniqueInput
  }

  /**
   * MainCategoryOption deleteMany
   */
  export type MainCategoryOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MainCategoryOptions to delete
     */
    where?: MainCategoryOptionWhereInput
    /**
     * Limit how many MainCategoryOptions to delete.
     */
    limit?: number
  }

  /**
   * MainCategoryOption.subCategories
   */
  export type MainCategoryOption$subCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionInclude<ExtArgs> | null
    where?: SubCategoryOptionWhereInput
    orderBy?: SubCategoryOptionOrderByWithRelationInput | SubCategoryOptionOrderByWithRelationInput[]
    cursor?: SubCategoryOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubCategoryOptionScalarFieldEnum | SubCategoryOptionScalarFieldEnum[]
  }

  /**
   * MainCategoryOption.specificItems
   */
  export type MainCategoryOption$specificItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionInclude<ExtArgs> | null
    where?: SpecificItemOptionWhereInput
    orderBy?: SpecificItemOptionOrderByWithRelationInput | SpecificItemOptionOrderByWithRelationInput[]
    cursor?: SpecificItemOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpecificItemOptionScalarFieldEnum | SpecificItemOptionScalarFieldEnum[]
  }

  /**
   * MainCategoryOption.listings
   */
  export type MainCategoryOption$listingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
    where?: ListingWhereInput
    orderBy?: ListingOrderByWithRelationInput | ListingOrderByWithRelationInput[]
    cursor?: ListingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListingScalarFieldEnum | ListingScalarFieldEnum[]
  }

  /**
   * MainCategoryOption without action
   */
  export type MainCategoryOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainCategoryOptionInclude<ExtArgs> | null
  }


  /**
   * Model SubCategoryOption
   */

  export type AggregateSubCategoryOption = {
    _count: SubCategoryOptionCountAggregateOutputType | null
    _avg: SubCategoryOptionAvgAggregateOutputType | null
    _sum: SubCategoryOptionSumAggregateOutputType | null
    _min: SubCategoryOptionMinAggregateOutputType | null
    _max: SubCategoryOptionMaxAggregateOutputType | null
  }

  export type SubCategoryOptionAvgAggregateOutputType = {
    id: number | null
    mainCategoryId: number | null
  }

  export type SubCategoryOptionSumAggregateOutputType = {
    id: number | null
    mainCategoryId: number | null
  }

  export type SubCategoryOptionMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    mainCategoryId: number | null
  }

  export type SubCategoryOptionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    mainCategoryId: number | null
  }

  export type SubCategoryOptionCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    mainCategoryId: number
    _all: number
  }


  export type SubCategoryOptionAvgAggregateInputType = {
    id?: true
    mainCategoryId?: true
  }

  export type SubCategoryOptionSumAggregateInputType = {
    id?: true
    mainCategoryId?: true
  }

  export type SubCategoryOptionMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    mainCategoryId?: true
  }

  export type SubCategoryOptionMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    mainCategoryId?: true
  }

  export type SubCategoryOptionCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    mainCategoryId?: true
    _all?: true
  }

  export type SubCategoryOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubCategoryOption to aggregate.
     */
    where?: SubCategoryOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategoryOptions to fetch.
     */
    orderBy?: SubCategoryOptionOrderByWithRelationInput | SubCategoryOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubCategoryOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategoryOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategoryOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubCategoryOptions
    **/
    _count?: true | SubCategoryOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubCategoryOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubCategoryOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubCategoryOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubCategoryOptionMaxAggregateInputType
  }

  export type GetSubCategoryOptionAggregateType<T extends SubCategoryOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubCategoryOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubCategoryOption[P]>
      : GetScalarType<T[P], AggregateSubCategoryOption[P]>
  }




  export type SubCategoryOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubCategoryOptionWhereInput
    orderBy?: SubCategoryOptionOrderByWithAggregationInput | SubCategoryOptionOrderByWithAggregationInput[]
    by: SubCategoryOptionScalarFieldEnum[] | SubCategoryOptionScalarFieldEnum
    having?: SubCategoryOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubCategoryOptionCountAggregateInputType | true
    _avg?: SubCategoryOptionAvgAggregateInputType
    _sum?: SubCategoryOptionSumAggregateInputType
    _min?: SubCategoryOptionMinAggregateInputType
    _max?: SubCategoryOptionMaxAggregateInputType
  }

  export type SubCategoryOptionGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    mainCategoryId: number | null
    _count: SubCategoryOptionCountAggregateOutputType | null
    _avg: SubCategoryOptionAvgAggregateOutputType | null
    _sum: SubCategoryOptionSumAggregateOutputType | null
    _min: SubCategoryOptionMinAggregateOutputType | null
    _max: SubCategoryOptionMaxAggregateOutputType | null
  }

  type GetSubCategoryOptionGroupByPayload<T extends SubCategoryOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubCategoryOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubCategoryOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubCategoryOptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubCategoryOptionGroupByOutputType[P]>
        }
      >
    >


  export type SubCategoryOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mainCategoryId?: boolean
    listings?: boolean | SubCategoryOption$listingsArgs<ExtArgs>
    mainCategory?: boolean | SubCategoryOption$mainCategoryArgs<ExtArgs>
    specificItems?: boolean | SubCategoryOption$specificItemsArgs<ExtArgs>
    _count?: boolean | SubCategoryOptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subCategoryOption"]>

  export type SubCategoryOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mainCategoryId?: boolean
    mainCategory?: boolean | SubCategoryOption$mainCategoryArgs<ExtArgs>
  }, ExtArgs["result"]["subCategoryOption"]>

  export type SubCategoryOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mainCategoryId?: boolean
    mainCategory?: boolean | SubCategoryOption$mainCategoryArgs<ExtArgs>
  }, ExtArgs["result"]["subCategoryOption"]>

  export type SubCategoryOptionSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mainCategoryId?: boolean
  }

  export type SubCategoryOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt" | "mainCategoryId", ExtArgs["result"]["subCategoryOption"]>
  export type SubCategoryOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    listings?: boolean | SubCategoryOption$listingsArgs<ExtArgs>
    mainCategory?: boolean | SubCategoryOption$mainCategoryArgs<ExtArgs>
    specificItems?: boolean | SubCategoryOption$specificItemsArgs<ExtArgs>
    _count?: boolean | SubCategoryOptionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubCategoryOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mainCategory?: boolean | SubCategoryOption$mainCategoryArgs<ExtArgs>
  }
  export type SubCategoryOptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mainCategory?: boolean | SubCategoryOption$mainCategoryArgs<ExtArgs>
  }

  export type $SubCategoryOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubCategoryOption"
    objects: {
      listings: Prisma.$ListingPayload<ExtArgs>[]
      mainCategory: Prisma.$MainCategoryOptionPayload<ExtArgs> | null
      specificItems: Prisma.$SpecificItemOptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
      mainCategoryId: number | null
    }, ExtArgs["result"]["subCategoryOption"]>
    composites: {}
  }

  type SubCategoryOptionGetPayload<S extends boolean | null | undefined | SubCategoryOptionDefaultArgs> = $Result.GetResult<Prisma.$SubCategoryOptionPayload, S>

  type SubCategoryOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubCategoryOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubCategoryOptionCountAggregateInputType | true
    }

  export interface SubCategoryOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubCategoryOption'], meta: { name: 'SubCategoryOption' } }
    /**
     * Find zero or one SubCategoryOption that matches the filter.
     * @param {SubCategoryOptionFindUniqueArgs} args - Arguments to find a SubCategoryOption
     * @example
     * // Get one SubCategoryOption
     * const subCategoryOption = await prisma.subCategoryOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubCategoryOptionFindUniqueArgs>(args: SelectSubset<T, SubCategoryOptionFindUniqueArgs<ExtArgs>>): Prisma__SubCategoryOptionClient<$Result.GetResult<Prisma.$SubCategoryOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SubCategoryOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubCategoryOptionFindUniqueOrThrowArgs} args - Arguments to find a SubCategoryOption
     * @example
     * // Get one SubCategoryOption
     * const subCategoryOption = await prisma.subCategoryOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubCategoryOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubCategoryOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubCategoryOptionClient<$Result.GetResult<Prisma.$SubCategoryOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubCategoryOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoryOptionFindFirstArgs} args - Arguments to find a SubCategoryOption
     * @example
     * // Get one SubCategoryOption
     * const subCategoryOption = await prisma.subCategoryOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubCategoryOptionFindFirstArgs>(args?: SelectSubset<T, SubCategoryOptionFindFirstArgs<ExtArgs>>): Prisma__SubCategoryOptionClient<$Result.GetResult<Prisma.$SubCategoryOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubCategoryOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoryOptionFindFirstOrThrowArgs} args - Arguments to find a SubCategoryOption
     * @example
     * // Get one SubCategoryOption
     * const subCategoryOption = await prisma.subCategoryOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubCategoryOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubCategoryOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubCategoryOptionClient<$Result.GetResult<Prisma.$SubCategoryOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SubCategoryOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoryOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubCategoryOptions
     * const subCategoryOptions = await prisma.subCategoryOption.findMany()
     * 
     * // Get first 10 SubCategoryOptions
     * const subCategoryOptions = await prisma.subCategoryOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subCategoryOptionWithIdOnly = await prisma.subCategoryOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubCategoryOptionFindManyArgs>(args?: SelectSubset<T, SubCategoryOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubCategoryOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SubCategoryOption.
     * @param {SubCategoryOptionCreateArgs} args - Arguments to create a SubCategoryOption.
     * @example
     * // Create one SubCategoryOption
     * const SubCategoryOption = await prisma.subCategoryOption.create({
     *   data: {
     *     // ... data to create a SubCategoryOption
     *   }
     * })
     * 
     */
    create<T extends SubCategoryOptionCreateArgs>(args: SelectSubset<T, SubCategoryOptionCreateArgs<ExtArgs>>): Prisma__SubCategoryOptionClient<$Result.GetResult<Prisma.$SubCategoryOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SubCategoryOptions.
     * @param {SubCategoryOptionCreateManyArgs} args - Arguments to create many SubCategoryOptions.
     * @example
     * // Create many SubCategoryOptions
     * const subCategoryOption = await prisma.subCategoryOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubCategoryOptionCreateManyArgs>(args?: SelectSubset<T, SubCategoryOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SubCategoryOptions and returns the data saved in the database.
     * @param {SubCategoryOptionCreateManyAndReturnArgs} args - Arguments to create many SubCategoryOptions.
     * @example
     * // Create many SubCategoryOptions
     * const subCategoryOption = await prisma.subCategoryOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SubCategoryOptions and only return the `id`
     * const subCategoryOptionWithIdOnly = await prisma.subCategoryOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubCategoryOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubCategoryOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubCategoryOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SubCategoryOption.
     * @param {SubCategoryOptionDeleteArgs} args - Arguments to delete one SubCategoryOption.
     * @example
     * // Delete one SubCategoryOption
     * const SubCategoryOption = await prisma.subCategoryOption.delete({
     *   where: {
     *     // ... filter to delete one SubCategoryOption
     *   }
     * })
     * 
     */
    delete<T extends SubCategoryOptionDeleteArgs>(args: SelectSubset<T, SubCategoryOptionDeleteArgs<ExtArgs>>): Prisma__SubCategoryOptionClient<$Result.GetResult<Prisma.$SubCategoryOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SubCategoryOption.
     * @param {SubCategoryOptionUpdateArgs} args - Arguments to update one SubCategoryOption.
     * @example
     * // Update one SubCategoryOption
     * const subCategoryOption = await prisma.subCategoryOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubCategoryOptionUpdateArgs>(args: SelectSubset<T, SubCategoryOptionUpdateArgs<ExtArgs>>): Prisma__SubCategoryOptionClient<$Result.GetResult<Prisma.$SubCategoryOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SubCategoryOptions.
     * @param {SubCategoryOptionDeleteManyArgs} args - Arguments to filter SubCategoryOptions to delete.
     * @example
     * // Delete a few SubCategoryOptions
     * const { count } = await prisma.subCategoryOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubCategoryOptionDeleteManyArgs>(args?: SelectSubset<T, SubCategoryOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubCategoryOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoryOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubCategoryOptions
     * const subCategoryOption = await prisma.subCategoryOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubCategoryOptionUpdateManyArgs>(args: SelectSubset<T, SubCategoryOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubCategoryOptions and returns the data updated in the database.
     * @param {SubCategoryOptionUpdateManyAndReturnArgs} args - Arguments to update many SubCategoryOptions.
     * @example
     * // Update many SubCategoryOptions
     * const subCategoryOption = await prisma.subCategoryOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SubCategoryOptions and only return the `id`
     * const subCategoryOptionWithIdOnly = await prisma.subCategoryOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubCategoryOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubCategoryOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubCategoryOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SubCategoryOption.
     * @param {SubCategoryOptionUpsertArgs} args - Arguments to update or create a SubCategoryOption.
     * @example
     * // Update or create a SubCategoryOption
     * const subCategoryOption = await prisma.subCategoryOption.upsert({
     *   create: {
     *     // ... data to create a SubCategoryOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubCategoryOption we want to update
     *   }
     * })
     */
    upsert<T extends SubCategoryOptionUpsertArgs>(args: SelectSubset<T, SubCategoryOptionUpsertArgs<ExtArgs>>): Prisma__SubCategoryOptionClient<$Result.GetResult<Prisma.$SubCategoryOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SubCategoryOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoryOptionCountArgs} args - Arguments to filter SubCategoryOptions to count.
     * @example
     * // Count the number of SubCategoryOptions
     * const count = await prisma.subCategoryOption.count({
     *   where: {
     *     // ... the filter for the SubCategoryOptions we want to count
     *   }
     * })
    **/
    count<T extends SubCategoryOptionCountArgs>(
      args?: Subset<T, SubCategoryOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubCategoryOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubCategoryOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoryOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubCategoryOptionAggregateArgs>(args: Subset<T, SubCategoryOptionAggregateArgs>): Prisma.PrismaPromise<GetSubCategoryOptionAggregateType<T>>

    /**
     * Group by SubCategoryOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoryOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubCategoryOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubCategoryOptionGroupByArgs['orderBy'] }
        : { orderBy?: SubCategoryOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubCategoryOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubCategoryOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubCategoryOption model
   */
  readonly fields: SubCategoryOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubCategoryOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubCategoryOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    listings<T extends SubCategoryOption$listingsArgs<ExtArgs> = {}>(args?: Subset<T, SubCategoryOption$listingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mainCategory<T extends SubCategoryOption$mainCategoryArgs<ExtArgs> = {}>(args?: Subset<T, SubCategoryOption$mainCategoryArgs<ExtArgs>>): Prisma__MainCategoryOptionClient<$Result.GetResult<Prisma.$MainCategoryOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    specificItems<T extends SubCategoryOption$specificItemsArgs<ExtArgs> = {}>(args?: Subset<T, SubCategoryOption$specificItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecificItemOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubCategoryOption model
   */
  interface SubCategoryOptionFieldRefs {
    readonly id: FieldRef<"SubCategoryOption", 'Int'>
    readonly name: FieldRef<"SubCategoryOption", 'String'>
    readonly createdAt: FieldRef<"SubCategoryOption", 'DateTime'>
    readonly updatedAt: FieldRef<"SubCategoryOption", 'DateTime'>
    readonly mainCategoryId: FieldRef<"SubCategoryOption", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SubCategoryOption findUnique
   */
  export type SubCategoryOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionInclude<ExtArgs> | null
    /**
     * Filter, which SubCategoryOption to fetch.
     */
    where: SubCategoryOptionWhereUniqueInput
  }

  /**
   * SubCategoryOption findUniqueOrThrow
   */
  export type SubCategoryOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionInclude<ExtArgs> | null
    /**
     * Filter, which SubCategoryOption to fetch.
     */
    where: SubCategoryOptionWhereUniqueInput
  }

  /**
   * SubCategoryOption findFirst
   */
  export type SubCategoryOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionInclude<ExtArgs> | null
    /**
     * Filter, which SubCategoryOption to fetch.
     */
    where?: SubCategoryOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategoryOptions to fetch.
     */
    orderBy?: SubCategoryOptionOrderByWithRelationInput | SubCategoryOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubCategoryOptions.
     */
    cursor?: SubCategoryOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategoryOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategoryOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubCategoryOptions.
     */
    distinct?: SubCategoryOptionScalarFieldEnum | SubCategoryOptionScalarFieldEnum[]
  }

  /**
   * SubCategoryOption findFirstOrThrow
   */
  export type SubCategoryOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionInclude<ExtArgs> | null
    /**
     * Filter, which SubCategoryOption to fetch.
     */
    where?: SubCategoryOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategoryOptions to fetch.
     */
    orderBy?: SubCategoryOptionOrderByWithRelationInput | SubCategoryOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubCategoryOptions.
     */
    cursor?: SubCategoryOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategoryOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategoryOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubCategoryOptions.
     */
    distinct?: SubCategoryOptionScalarFieldEnum | SubCategoryOptionScalarFieldEnum[]
  }

  /**
   * SubCategoryOption findMany
   */
  export type SubCategoryOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionInclude<ExtArgs> | null
    /**
     * Filter, which SubCategoryOptions to fetch.
     */
    where?: SubCategoryOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategoryOptions to fetch.
     */
    orderBy?: SubCategoryOptionOrderByWithRelationInput | SubCategoryOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubCategoryOptions.
     */
    cursor?: SubCategoryOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategoryOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategoryOptions.
     */
    skip?: number
    distinct?: SubCategoryOptionScalarFieldEnum | SubCategoryOptionScalarFieldEnum[]
  }

  /**
   * SubCategoryOption create
   */
  export type SubCategoryOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a SubCategoryOption.
     */
    data: XOR<SubCategoryOptionCreateInput, SubCategoryOptionUncheckedCreateInput>
  }

  /**
   * SubCategoryOption createMany
   */
  export type SubCategoryOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubCategoryOptions.
     */
    data: SubCategoryOptionCreateManyInput | SubCategoryOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubCategoryOption createManyAndReturn
   */
  export type SubCategoryOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * The data used to create many SubCategoryOptions.
     */
    data: SubCategoryOptionCreateManyInput | SubCategoryOptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubCategoryOption update
   */
  export type SubCategoryOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a SubCategoryOption.
     */
    data: XOR<SubCategoryOptionUpdateInput, SubCategoryOptionUncheckedUpdateInput>
    /**
     * Choose, which SubCategoryOption to update.
     */
    where: SubCategoryOptionWhereUniqueInput
  }

  /**
   * SubCategoryOption updateMany
   */
  export type SubCategoryOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubCategoryOptions.
     */
    data: XOR<SubCategoryOptionUpdateManyMutationInput, SubCategoryOptionUncheckedUpdateManyInput>
    /**
     * Filter which SubCategoryOptions to update
     */
    where?: SubCategoryOptionWhereInput
    /**
     * Limit how many SubCategoryOptions to update.
     */
    limit?: number
  }

  /**
   * SubCategoryOption updateManyAndReturn
   */
  export type SubCategoryOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * The data used to update SubCategoryOptions.
     */
    data: XOR<SubCategoryOptionUpdateManyMutationInput, SubCategoryOptionUncheckedUpdateManyInput>
    /**
     * Filter which SubCategoryOptions to update
     */
    where?: SubCategoryOptionWhereInput
    /**
     * Limit how many SubCategoryOptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubCategoryOption upsert
   */
  export type SubCategoryOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the SubCategoryOption to update in case it exists.
     */
    where: SubCategoryOptionWhereUniqueInput
    /**
     * In case the SubCategoryOption found by the `where` argument doesn't exist, create a new SubCategoryOption with this data.
     */
    create: XOR<SubCategoryOptionCreateInput, SubCategoryOptionUncheckedCreateInput>
    /**
     * In case the SubCategoryOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubCategoryOptionUpdateInput, SubCategoryOptionUncheckedUpdateInput>
  }

  /**
   * SubCategoryOption delete
   */
  export type SubCategoryOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionInclude<ExtArgs> | null
    /**
     * Filter which SubCategoryOption to delete.
     */
    where: SubCategoryOptionWhereUniqueInput
  }

  /**
   * SubCategoryOption deleteMany
   */
  export type SubCategoryOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubCategoryOptions to delete
     */
    where?: SubCategoryOptionWhereInput
    /**
     * Limit how many SubCategoryOptions to delete.
     */
    limit?: number
  }

  /**
   * SubCategoryOption.listings
   */
  export type SubCategoryOption$listingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
    where?: ListingWhereInput
    orderBy?: ListingOrderByWithRelationInput | ListingOrderByWithRelationInput[]
    cursor?: ListingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListingScalarFieldEnum | ListingScalarFieldEnum[]
  }

  /**
   * SubCategoryOption.mainCategory
   */
  export type SubCategoryOption$mainCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainCategoryOptionInclude<ExtArgs> | null
    where?: MainCategoryOptionWhereInput
  }

  /**
   * SubCategoryOption.specificItems
   */
  export type SubCategoryOption$specificItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionInclude<ExtArgs> | null
    where?: SpecificItemOptionWhereInput
    orderBy?: SpecificItemOptionOrderByWithRelationInput | SpecificItemOptionOrderByWithRelationInput[]
    cursor?: SpecificItemOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpecificItemOptionScalarFieldEnum | SpecificItemOptionScalarFieldEnum[]
  }

  /**
   * SubCategoryOption without action
   */
  export type SubCategoryOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionInclude<ExtArgs> | null
  }


  /**
   * Model SpecificItemOption
   */

  export type AggregateSpecificItemOption = {
    _count: SpecificItemOptionCountAggregateOutputType | null
    _avg: SpecificItemOptionAvgAggregateOutputType | null
    _sum: SpecificItemOptionSumAggregateOutputType | null
    _min: SpecificItemOptionMinAggregateOutputType | null
    _max: SpecificItemOptionMaxAggregateOutputType | null
  }

  export type SpecificItemOptionAvgAggregateOutputType = {
    id: number | null
    subCategoryId: number | null
    mainCategoryId: number | null
  }

  export type SpecificItemOptionSumAggregateOutputType = {
    id: number | null
    subCategoryId: number | null
    mainCategoryId: number | null
  }

  export type SpecificItemOptionMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    subCategoryId: number | null
    mainCategoryId: number | null
  }

  export type SpecificItemOptionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    subCategoryId: number | null
    mainCategoryId: number | null
  }

  export type SpecificItemOptionCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    subCategoryId: number
    mainCategoryId: number
    _all: number
  }


  export type SpecificItemOptionAvgAggregateInputType = {
    id?: true
    subCategoryId?: true
    mainCategoryId?: true
  }

  export type SpecificItemOptionSumAggregateInputType = {
    id?: true
    subCategoryId?: true
    mainCategoryId?: true
  }

  export type SpecificItemOptionMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    subCategoryId?: true
    mainCategoryId?: true
  }

  export type SpecificItemOptionMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    subCategoryId?: true
    mainCategoryId?: true
  }

  export type SpecificItemOptionCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    subCategoryId?: true
    mainCategoryId?: true
    _all?: true
  }

  export type SpecificItemOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpecificItemOption to aggregate.
     */
    where?: SpecificItemOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpecificItemOptions to fetch.
     */
    orderBy?: SpecificItemOptionOrderByWithRelationInput | SpecificItemOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpecificItemOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpecificItemOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpecificItemOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SpecificItemOptions
    **/
    _count?: true | SpecificItemOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpecificItemOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpecificItemOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpecificItemOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpecificItemOptionMaxAggregateInputType
  }

  export type GetSpecificItemOptionAggregateType<T extends SpecificItemOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSpecificItemOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpecificItemOption[P]>
      : GetScalarType<T[P], AggregateSpecificItemOption[P]>
  }




  export type SpecificItemOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpecificItemOptionWhereInput
    orderBy?: SpecificItemOptionOrderByWithAggregationInput | SpecificItemOptionOrderByWithAggregationInput[]
    by: SpecificItemOptionScalarFieldEnum[] | SpecificItemOptionScalarFieldEnum
    having?: SpecificItemOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpecificItemOptionCountAggregateInputType | true
    _avg?: SpecificItemOptionAvgAggregateInputType
    _sum?: SpecificItemOptionSumAggregateInputType
    _min?: SpecificItemOptionMinAggregateInputType
    _max?: SpecificItemOptionMaxAggregateInputType
  }

  export type SpecificItemOptionGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    subCategoryId: number | null
    mainCategoryId: number | null
    _count: SpecificItemOptionCountAggregateOutputType | null
    _avg: SpecificItemOptionAvgAggregateOutputType | null
    _sum: SpecificItemOptionSumAggregateOutputType | null
    _min: SpecificItemOptionMinAggregateOutputType | null
    _max: SpecificItemOptionMaxAggregateOutputType | null
  }

  type GetSpecificItemOptionGroupByPayload<T extends SpecificItemOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpecificItemOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpecificItemOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpecificItemOptionGroupByOutputType[P]>
            : GetScalarType<T[P], SpecificItemOptionGroupByOutputType[P]>
        }
      >
    >


  export type SpecificItemOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subCategoryId?: boolean
    mainCategoryId?: boolean
    listings?: boolean | SpecificItemOption$listingsArgs<ExtArgs>
    subCategory?: boolean | SpecificItemOption$subCategoryArgs<ExtArgs>
    mainCategory?: boolean | SpecificItemOption$mainCategoryArgs<ExtArgs>
    _count?: boolean | SpecificItemOptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["specificItemOption"]>

  export type SpecificItemOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subCategoryId?: boolean
    mainCategoryId?: boolean
    subCategory?: boolean | SpecificItemOption$subCategoryArgs<ExtArgs>
    mainCategory?: boolean | SpecificItemOption$mainCategoryArgs<ExtArgs>
  }, ExtArgs["result"]["specificItemOption"]>

  export type SpecificItemOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subCategoryId?: boolean
    mainCategoryId?: boolean
    subCategory?: boolean | SpecificItemOption$subCategoryArgs<ExtArgs>
    mainCategory?: boolean | SpecificItemOption$mainCategoryArgs<ExtArgs>
  }, ExtArgs["result"]["specificItemOption"]>

  export type SpecificItemOptionSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subCategoryId?: boolean
    mainCategoryId?: boolean
  }

  export type SpecificItemOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt" | "subCategoryId" | "mainCategoryId", ExtArgs["result"]["specificItemOption"]>
  export type SpecificItemOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    listings?: boolean | SpecificItemOption$listingsArgs<ExtArgs>
    subCategory?: boolean | SpecificItemOption$subCategoryArgs<ExtArgs>
    mainCategory?: boolean | SpecificItemOption$mainCategoryArgs<ExtArgs>
    _count?: boolean | SpecificItemOptionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SpecificItemOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subCategory?: boolean | SpecificItemOption$subCategoryArgs<ExtArgs>
    mainCategory?: boolean | SpecificItemOption$mainCategoryArgs<ExtArgs>
  }
  export type SpecificItemOptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subCategory?: boolean | SpecificItemOption$subCategoryArgs<ExtArgs>
    mainCategory?: boolean | SpecificItemOption$mainCategoryArgs<ExtArgs>
  }

  export type $SpecificItemOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SpecificItemOption"
    objects: {
      listings: Prisma.$ListingPayload<ExtArgs>[]
      subCategory: Prisma.$SubCategoryOptionPayload<ExtArgs> | null
      mainCategory: Prisma.$MainCategoryOptionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
      subCategoryId: number | null
      mainCategoryId: number | null
    }, ExtArgs["result"]["specificItemOption"]>
    composites: {}
  }

  type SpecificItemOptionGetPayload<S extends boolean | null | undefined | SpecificItemOptionDefaultArgs> = $Result.GetResult<Prisma.$SpecificItemOptionPayload, S>

  type SpecificItemOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SpecificItemOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SpecificItemOptionCountAggregateInputType | true
    }

  export interface SpecificItemOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SpecificItemOption'], meta: { name: 'SpecificItemOption' } }
    /**
     * Find zero or one SpecificItemOption that matches the filter.
     * @param {SpecificItemOptionFindUniqueArgs} args - Arguments to find a SpecificItemOption
     * @example
     * // Get one SpecificItemOption
     * const specificItemOption = await prisma.specificItemOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpecificItemOptionFindUniqueArgs>(args: SelectSubset<T, SpecificItemOptionFindUniqueArgs<ExtArgs>>): Prisma__SpecificItemOptionClient<$Result.GetResult<Prisma.$SpecificItemOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SpecificItemOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SpecificItemOptionFindUniqueOrThrowArgs} args - Arguments to find a SpecificItemOption
     * @example
     * // Get one SpecificItemOption
     * const specificItemOption = await prisma.specificItemOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpecificItemOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SpecificItemOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpecificItemOptionClient<$Result.GetResult<Prisma.$SpecificItemOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpecificItemOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificItemOptionFindFirstArgs} args - Arguments to find a SpecificItemOption
     * @example
     * // Get one SpecificItemOption
     * const specificItemOption = await prisma.specificItemOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpecificItemOptionFindFirstArgs>(args?: SelectSubset<T, SpecificItemOptionFindFirstArgs<ExtArgs>>): Prisma__SpecificItemOptionClient<$Result.GetResult<Prisma.$SpecificItemOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpecificItemOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificItemOptionFindFirstOrThrowArgs} args - Arguments to find a SpecificItemOption
     * @example
     * // Get one SpecificItemOption
     * const specificItemOption = await prisma.specificItemOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpecificItemOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SpecificItemOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpecificItemOptionClient<$Result.GetResult<Prisma.$SpecificItemOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SpecificItemOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificItemOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SpecificItemOptions
     * const specificItemOptions = await prisma.specificItemOption.findMany()
     * 
     * // Get first 10 SpecificItemOptions
     * const specificItemOptions = await prisma.specificItemOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const specificItemOptionWithIdOnly = await prisma.specificItemOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpecificItemOptionFindManyArgs>(args?: SelectSubset<T, SpecificItemOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecificItemOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SpecificItemOption.
     * @param {SpecificItemOptionCreateArgs} args - Arguments to create a SpecificItemOption.
     * @example
     * // Create one SpecificItemOption
     * const SpecificItemOption = await prisma.specificItemOption.create({
     *   data: {
     *     // ... data to create a SpecificItemOption
     *   }
     * })
     * 
     */
    create<T extends SpecificItemOptionCreateArgs>(args: SelectSubset<T, SpecificItemOptionCreateArgs<ExtArgs>>): Prisma__SpecificItemOptionClient<$Result.GetResult<Prisma.$SpecificItemOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SpecificItemOptions.
     * @param {SpecificItemOptionCreateManyArgs} args - Arguments to create many SpecificItemOptions.
     * @example
     * // Create many SpecificItemOptions
     * const specificItemOption = await prisma.specificItemOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpecificItemOptionCreateManyArgs>(args?: SelectSubset<T, SpecificItemOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SpecificItemOptions and returns the data saved in the database.
     * @param {SpecificItemOptionCreateManyAndReturnArgs} args - Arguments to create many SpecificItemOptions.
     * @example
     * // Create many SpecificItemOptions
     * const specificItemOption = await prisma.specificItemOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SpecificItemOptions and only return the `id`
     * const specificItemOptionWithIdOnly = await prisma.specificItemOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpecificItemOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, SpecificItemOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecificItemOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SpecificItemOption.
     * @param {SpecificItemOptionDeleteArgs} args - Arguments to delete one SpecificItemOption.
     * @example
     * // Delete one SpecificItemOption
     * const SpecificItemOption = await prisma.specificItemOption.delete({
     *   where: {
     *     // ... filter to delete one SpecificItemOption
     *   }
     * })
     * 
     */
    delete<T extends SpecificItemOptionDeleteArgs>(args: SelectSubset<T, SpecificItemOptionDeleteArgs<ExtArgs>>): Prisma__SpecificItemOptionClient<$Result.GetResult<Prisma.$SpecificItemOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SpecificItemOption.
     * @param {SpecificItemOptionUpdateArgs} args - Arguments to update one SpecificItemOption.
     * @example
     * // Update one SpecificItemOption
     * const specificItemOption = await prisma.specificItemOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpecificItemOptionUpdateArgs>(args: SelectSubset<T, SpecificItemOptionUpdateArgs<ExtArgs>>): Prisma__SpecificItemOptionClient<$Result.GetResult<Prisma.$SpecificItemOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SpecificItemOptions.
     * @param {SpecificItemOptionDeleteManyArgs} args - Arguments to filter SpecificItemOptions to delete.
     * @example
     * // Delete a few SpecificItemOptions
     * const { count } = await prisma.specificItemOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpecificItemOptionDeleteManyArgs>(args?: SelectSubset<T, SpecificItemOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpecificItemOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificItemOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SpecificItemOptions
     * const specificItemOption = await prisma.specificItemOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpecificItemOptionUpdateManyArgs>(args: SelectSubset<T, SpecificItemOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpecificItemOptions and returns the data updated in the database.
     * @param {SpecificItemOptionUpdateManyAndReturnArgs} args - Arguments to update many SpecificItemOptions.
     * @example
     * // Update many SpecificItemOptions
     * const specificItemOption = await prisma.specificItemOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SpecificItemOptions and only return the `id`
     * const specificItemOptionWithIdOnly = await prisma.specificItemOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SpecificItemOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, SpecificItemOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecificItemOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SpecificItemOption.
     * @param {SpecificItemOptionUpsertArgs} args - Arguments to update or create a SpecificItemOption.
     * @example
     * // Update or create a SpecificItemOption
     * const specificItemOption = await prisma.specificItemOption.upsert({
     *   create: {
     *     // ... data to create a SpecificItemOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SpecificItemOption we want to update
     *   }
     * })
     */
    upsert<T extends SpecificItemOptionUpsertArgs>(args: SelectSubset<T, SpecificItemOptionUpsertArgs<ExtArgs>>): Prisma__SpecificItemOptionClient<$Result.GetResult<Prisma.$SpecificItemOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SpecificItemOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificItemOptionCountArgs} args - Arguments to filter SpecificItemOptions to count.
     * @example
     * // Count the number of SpecificItemOptions
     * const count = await prisma.specificItemOption.count({
     *   where: {
     *     // ... the filter for the SpecificItemOptions we want to count
     *   }
     * })
    **/
    count<T extends SpecificItemOptionCountArgs>(
      args?: Subset<T, SpecificItemOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpecificItemOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SpecificItemOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificItemOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpecificItemOptionAggregateArgs>(args: Subset<T, SpecificItemOptionAggregateArgs>): Prisma.PrismaPromise<GetSpecificItemOptionAggregateType<T>>

    /**
     * Group by SpecificItemOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificItemOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpecificItemOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpecificItemOptionGroupByArgs['orderBy'] }
        : { orderBy?: SpecificItemOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpecificItemOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpecificItemOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SpecificItemOption model
   */
  readonly fields: SpecificItemOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SpecificItemOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpecificItemOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    listings<T extends SpecificItemOption$listingsArgs<ExtArgs> = {}>(args?: Subset<T, SpecificItemOption$listingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subCategory<T extends SpecificItemOption$subCategoryArgs<ExtArgs> = {}>(args?: Subset<T, SpecificItemOption$subCategoryArgs<ExtArgs>>): Prisma__SubCategoryOptionClient<$Result.GetResult<Prisma.$SubCategoryOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    mainCategory<T extends SpecificItemOption$mainCategoryArgs<ExtArgs> = {}>(args?: Subset<T, SpecificItemOption$mainCategoryArgs<ExtArgs>>): Prisma__MainCategoryOptionClient<$Result.GetResult<Prisma.$MainCategoryOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SpecificItemOption model
   */
  interface SpecificItemOptionFieldRefs {
    readonly id: FieldRef<"SpecificItemOption", 'Int'>
    readonly name: FieldRef<"SpecificItemOption", 'String'>
    readonly createdAt: FieldRef<"SpecificItemOption", 'DateTime'>
    readonly updatedAt: FieldRef<"SpecificItemOption", 'DateTime'>
    readonly subCategoryId: FieldRef<"SpecificItemOption", 'Int'>
    readonly mainCategoryId: FieldRef<"SpecificItemOption", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SpecificItemOption findUnique
   */
  export type SpecificItemOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionInclude<ExtArgs> | null
    /**
     * Filter, which SpecificItemOption to fetch.
     */
    where: SpecificItemOptionWhereUniqueInput
  }

  /**
   * SpecificItemOption findUniqueOrThrow
   */
  export type SpecificItemOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionInclude<ExtArgs> | null
    /**
     * Filter, which SpecificItemOption to fetch.
     */
    where: SpecificItemOptionWhereUniqueInput
  }

  /**
   * SpecificItemOption findFirst
   */
  export type SpecificItemOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionInclude<ExtArgs> | null
    /**
     * Filter, which SpecificItemOption to fetch.
     */
    where?: SpecificItemOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpecificItemOptions to fetch.
     */
    orderBy?: SpecificItemOptionOrderByWithRelationInput | SpecificItemOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpecificItemOptions.
     */
    cursor?: SpecificItemOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpecificItemOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpecificItemOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpecificItemOptions.
     */
    distinct?: SpecificItemOptionScalarFieldEnum | SpecificItemOptionScalarFieldEnum[]
  }

  /**
   * SpecificItemOption findFirstOrThrow
   */
  export type SpecificItemOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionInclude<ExtArgs> | null
    /**
     * Filter, which SpecificItemOption to fetch.
     */
    where?: SpecificItemOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpecificItemOptions to fetch.
     */
    orderBy?: SpecificItemOptionOrderByWithRelationInput | SpecificItemOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpecificItemOptions.
     */
    cursor?: SpecificItemOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpecificItemOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpecificItemOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpecificItemOptions.
     */
    distinct?: SpecificItemOptionScalarFieldEnum | SpecificItemOptionScalarFieldEnum[]
  }

  /**
   * SpecificItemOption findMany
   */
  export type SpecificItemOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionInclude<ExtArgs> | null
    /**
     * Filter, which SpecificItemOptions to fetch.
     */
    where?: SpecificItemOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpecificItemOptions to fetch.
     */
    orderBy?: SpecificItemOptionOrderByWithRelationInput | SpecificItemOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SpecificItemOptions.
     */
    cursor?: SpecificItemOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpecificItemOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpecificItemOptions.
     */
    skip?: number
    distinct?: SpecificItemOptionScalarFieldEnum | SpecificItemOptionScalarFieldEnum[]
  }

  /**
   * SpecificItemOption create
   */
  export type SpecificItemOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a SpecificItemOption.
     */
    data: XOR<SpecificItemOptionCreateInput, SpecificItemOptionUncheckedCreateInput>
  }

  /**
   * SpecificItemOption createMany
   */
  export type SpecificItemOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SpecificItemOptions.
     */
    data: SpecificItemOptionCreateManyInput | SpecificItemOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SpecificItemOption createManyAndReturn
   */
  export type SpecificItemOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * The data used to create many SpecificItemOptions.
     */
    data: SpecificItemOptionCreateManyInput | SpecificItemOptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SpecificItemOption update
   */
  export type SpecificItemOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a SpecificItemOption.
     */
    data: XOR<SpecificItemOptionUpdateInput, SpecificItemOptionUncheckedUpdateInput>
    /**
     * Choose, which SpecificItemOption to update.
     */
    where: SpecificItemOptionWhereUniqueInput
  }

  /**
   * SpecificItemOption updateMany
   */
  export type SpecificItemOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SpecificItemOptions.
     */
    data: XOR<SpecificItemOptionUpdateManyMutationInput, SpecificItemOptionUncheckedUpdateManyInput>
    /**
     * Filter which SpecificItemOptions to update
     */
    where?: SpecificItemOptionWhereInput
    /**
     * Limit how many SpecificItemOptions to update.
     */
    limit?: number
  }

  /**
   * SpecificItemOption updateManyAndReturn
   */
  export type SpecificItemOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * The data used to update SpecificItemOptions.
     */
    data: XOR<SpecificItemOptionUpdateManyMutationInput, SpecificItemOptionUncheckedUpdateManyInput>
    /**
     * Filter which SpecificItemOptions to update
     */
    where?: SpecificItemOptionWhereInput
    /**
     * Limit how many SpecificItemOptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SpecificItemOption upsert
   */
  export type SpecificItemOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the SpecificItemOption to update in case it exists.
     */
    where: SpecificItemOptionWhereUniqueInput
    /**
     * In case the SpecificItemOption found by the `where` argument doesn't exist, create a new SpecificItemOption with this data.
     */
    create: XOR<SpecificItemOptionCreateInput, SpecificItemOptionUncheckedCreateInput>
    /**
     * In case the SpecificItemOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpecificItemOptionUpdateInput, SpecificItemOptionUncheckedUpdateInput>
  }

  /**
   * SpecificItemOption delete
   */
  export type SpecificItemOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionInclude<ExtArgs> | null
    /**
     * Filter which SpecificItemOption to delete.
     */
    where: SpecificItemOptionWhereUniqueInput
  }

  /**
   * SpecificItemOption deleteMany
   */
  export type SpecificItemOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpecificItemOptions to delete
     */
    where?: SpecificItemOptionWhereInput
    /**
     * Limit how many SpecificItemOptions to delete.
     */
    limit?: number
  }

  /**
   * SpecificItemOption.listings
   */
  export type SpecificItemOption$listingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
    where?: ListingWhereInput
    orderBy?: ListingOrderByWithRelationInput | ListingOrderByWithRelationInput[]
    cursor?: ListingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListingScalarFieldEnum | ListingScalarFieldEnum[]
  }

  /**
   * SpecificItemOption.subCategory
   */
  export type SpecificItemOption$subCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionInclude<ExtArgs> | null
    where?: SubCategoryOptionWhereInput
  }

  /**
   * SpecificItemOption.mainCategory
   */
  export type SpecificItemOption$mainCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainCategoryOptionInclude<ExtArgs> | null
    where?: MainCategoryOptionWhereInput
  }

  /**
   * SpecificItemOption without action
   */
  export type SpecificItemOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionInclude<ExtArgs> | null
  }


  /**
   * Model Listing
   */

  export type AggregateListing = {
    _count: ListingCountAggregateOutputType | null
    _avg: ListingAvgAggregateOutputType | null
    _sum: ListingSumAggregateOutputType | null
    _min: ListingMinAggregateOutputType | null
    _max: ListingMaxAggregateOutputType | null
  }

  export type ListingAvgAggregateOutputType = {
    id: number | null
    price: Decimal | null
  }

  export type ListingSumAggregateOutputType = {
    id: number | null
    price: Decimal | null
  }

  export type ListingMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: Decimal | null
    main_image: string | null
    isActive: boolean | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ListingMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: Decimal | null
    main_image: string | null
    isActive: boolean | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ListingCountAggregateOutputType = {
    id: number
    name: number
    price: number
    main_image: number
    sub_images: number
    agegroup: number
    location: number
    facilities: number
    operatingHours: number
    isActive: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ListingAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type ListingSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type ListingMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    main_image?: true
    isActive?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ListingMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    main_image?: true
    isActive?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ListingCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    main_image?: true
    sub_images?: true
    agegroup?: true
    location?: true
    facilities?: true
    operatingHours?: true
    isActive?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ListingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Listing to aggregate.
     */
    where?: ListingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Listings to fetch.
     */
    orderBy?: ListingOrderByWithRelationInput | ListingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ListingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Listings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Listings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Listings
    **/
    _count?: true | ListingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ListingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ListingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ListingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ListingMaxAggregateInputType
  }

  export type GetListingAggregateType<T extends ListingAggregateArgs> = {
        [P in keyof T & keyof AggregateListing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateListing[P]>
      : GetScalarType<T[P], AggregateListing[P]>
  }




  export type ListingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListingWhereInput
    orderBy?: ListingOrderByWithAggregationInput | ListingOrderByWithAggregationInput[]
    by: ListingScalarFieldEnum[] | ListingScalarFieldEnum
    having?: ListingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ListingCountAggregateInputType | true
    _avg?: ListingAvgAggregateInputType
    _sum?: ListingSumAggregateInputType
    _min?: ListingMinAggregateInputType
    _max?: ListingMaxAggregateInputType
  }

  export type ListingGroupByOutputType = {
    id: number
    name: string | null
    price: Decimal | null
    main_image: string | null
    sub_images: string[]
    agegroup: string[]
    location: string[]
    facilities: string[]
    operatingHours: string[]
    isActive: boolean
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: ListingCountAggregateOutputType | null
    _avg: ListingAvgAggregateOutputType | null
    _sum: ListingSumAggregateOutputType | null
    _min: ListingMinAggregateOutputType | null
    _max: ListingMaxAggregateOutputType | null
  }

  type GetListingGroupByPayload<T extends ListingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ListingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ListingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ListingGroupByOutputType[P]>
            : GetScalarType<T[P], ListingGroupByOutputType[P]>
        }
      >
    >


  export type ListingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    main_image?: boolean
    sub_images?: boolean
    agegroup?: boolean
    location?: boolean
    facilities?: boolean
    operatingHours?: boolean
    isActive?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookings?: boolean | Listing$bookingsArgs<ExtArgs>
    reviews?: boolean | Listing$reviewsArgs<ExtArgs>
    selectedMainCategories?: boolean | Listing$selectedMainCategoriesArgs<ExtArgs>
    selectedSubCategories?: boolean | Listing$selectedSubCategoriesArgs<ExtArgs>
    selectedSpecificItems?: boolean | Listing$selectedSpecificItemsArgs<ExtArgs>
    _count?: boolean | ListingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["listing"]>

  export type ListingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    main_image?: boolean
    sub_images?: boolean
    agegroup?: boolean
    location?: boolean
    facilities?: boolean
    operatingHours?: boolean
    isActive?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["listing"]>

  export type ListingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    main_image?: boolean
    sub_images?: boolean
    agegroup?: boolean
    location?: boolean
    facilities?: boolean
    operatingHours?: boolean
    isActive?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["listing"]>

  export type ListingSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
    main_image?: boolean
    sub_images?: boolean
    agegroup?: boolean
    location?: boolean
    facilities?: boolean
    operatingHours?: boolean
    isActive?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ListingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "price" | "main_image" | "sub_images" | "agegroup" | "location" | "facilities" | "operatingHours" | "isActive" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["listing"]>
  export type ListingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookings?: boolean | Listing$bookingsArgs<ExtArgs>
    reviews?: boolean | Listing$reviewsArgs<ExtArgs>
    selectedMainCategories?: boolean | Listing$selectedMainCategoriesArgs<ExtArgs>
    selectedSubCategories?: boolean | Listing$selectedSubCategoriesArgs<ExtArgs>
    selectedSpecificItems?: boolean | Listing$selectedSpecificItemsArgs<ExtArgs>
    _count?: boolean | ListingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ListingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ListingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ListingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Listing"
    objects: {
      bookings: Prisma.$BookingPayload<ExtArgs>[]
      reviews: Prisma.$reviewPayload<ExtArgs>[]
      selectedMainCategories: Prisma.$MainCategoryOptionPayload<ExtArgs>[]
      selectedSubCategories: Prisma.$SubCategoryOptionPayload<ExtArgs>[]
      selectedSpecificItems: Prisma.$SpecificItemOptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      price: Prisma.Decimal | null
      main_image: string | null
      sub_images: string[]
      agegroup: string[]
      location: string[]
      facilities: string[]
      operatingHours: string[]
      isActive: boolean
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["listing"]>
    composites: {}
  }

  type ListingGetPayload<S extends boolean | null | undefined | ListingDefaultArgs> = $Result.GetResult<Prisma.$ListingPayload, S>

  type ListingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ListingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ListingCountAggregateInputType | true
    }

  export interface ListingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Listing'], meta: { name: 'Listing' } }
    /**
     * Find zero or one Listing that matches the filter.
     * @param {ListingFindUniqueArgs} args - Arguments to find a Listing
     * @example
     * // Get one Listing
     * const listing = await prisma.listing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ListingFindUniqueArgs>(args: SelectSubset<T, ListingFindUniqueArgs<ExtArgs>>): Prisma__ListingClient<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Listing that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ListingFindUniqueOrThrowArgs} args - Arguments to find a Listing
     * @example
     * // Get one Listing
     * const listing = await prisma.listing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ListingFindUniqueOrThrowArgs>(args: SelectSubset<T, ListingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ListingClient<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Listing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListingFindFirstArgs} args - Arguments to find a Listing
     * @example
     * // Get one Listing
     * const listing = await prisma.listing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ListingFindFirstArgs>(args?: SelectSubset<T, ListingFindFirstArgs<ExtArgs>>): Prisma__ListingClient<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Listing that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListingFindFirstOrThrowArgs} args - Arguments to find a Listing
     * @example
     * // Get one Listing
     * const listing = await prisma.listing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ListingFindFirstOrThrowArgs>(args?: SelectSubset<T, ListingFindFirstOrThrowArgs<ExtArgs>>): Prisma__ListingClient<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Listings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Listings
     * const listings = await prisma.listing.findMany()
     * 
     * // Get first 10 Listings
     * const listings = await prisma.listing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const listingWithIdOnly = await prisma.listing.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ListingFindManyArgs>(args?: SelectSubset<T, ListingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Listing.
     * @param {ListingCreateArgs} args - Arguments to create a Listing.
     * @example
     * // Create one Listing
     * const Listing = await prisma.listing.create({
     *   data: {
     *     // ... data to create a Listing
     *   }
     * })
     * 
     */
    create<T extends ListingCreateArgs>(args: SelectSubset<T, ListingCreateArgs<ExtArgs>>): Prisma__ListingClient<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Listings.
     * @param {ListingCreateManyArgs} args - Arguments to create many Listings.
     * @example
     * // Create many Listings
     * const listing = await prisma.listing.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ListingCreateManyArgs>(args?: SelectSubset<T, ListingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Listings and returns the data saved in the database.
     * @param {ListingCreateManyAndReturnArgs} args - Arguments to create many Listings.
     * @example
     * // Create many Listings
     * const listing = await prisma.listing.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Listings and only return the `id`
     * const listingWithIdOnly = await prisma.listing.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ListingCreateManyAndReturnArgs>(args?: SelectSubset<T, ListingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Listing.
     * @param {ListingDeleteArgs} args - Arguments to delete one Listing.
     * @example
     * // Delete one Listing
     * const Listing = await prisma.listing.delete({
     *   where: {
     *     // ... filter to delete one Listing
     *   }
     * })
     * 
     */
    delete<T extends ListingDeleteArgs>(args: SelectSubset<T, ListingDeleteArgs<ExtArgs>>): Prisma__ListingClient<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Listing.
     * @param {ListingUpdateArgs} args - Arguments to update one Listing.
     * @example
     * // Update one Listing
     * const listing = await prisma.listing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ListingUpdateArgs>(args: SelectSubset<T, ListingUpdateArgs<ExtArgs>>): Prisma__ListingClient<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Listings.
     * @param {ListingDeleteManyArgs} args - Arguments to filter Listings to delete.
     * @example
     * // Delete a few Listings
     * const { count } = await prisma.listing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ListingDeleteManyArgs>(args?: SelectSubset<T, ListingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Listings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Listings
     * const listing = await prisma.listing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ListingUpdateManyArgs>(args: SelectSubset<T, ListingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Listings and returns the data updated in the database.
     * @param {ListingUpdateManyAndReturnArgs} args - Arguments to update many Listings.
     * @example
     * // Update many Listings
     * const listing = await prisma.listing.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Listings and only return the `id`
     * const listingWithIdOnly = await prisma.listing.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ListingUpdateManyAndReturnArgs>(args: SelectSubset<T, ListingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Listing.
     * @param {ListingUpsertArgs} args - Arguments to update or create a Listing.
     * @example
     * // Update or create a Listing
     * const listing = await prisma.listing.upsert({
     *   create: {
     *     // ... data to create a Listing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Listing we want to update
     *   }
     * })
     */
    upsert<T extends ListingUpsertArgs>(args: SelectSubset<T, ListingUpsertArgs<ExtArgs>>): Prisma__ListingClient<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Listings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListingCountArgs} args - Arguments to filter Listings to count.
     * @example
     * // Count the number of Listings
     * const count = await prisma.listing.count({
     *   where: {
     *     // ... the filter for the Listings we want to count
     *   }
     * })
    **/
    count<T extends ListingCountArgs>(
      args?: Subset<T, ListingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Listing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListingAggregateArgs>(args: Subset<T, ListingAggregateArgs>): Prisma.PrismaPromise<GetListingAggregateType<T>>

    /**
     * Group by Listing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ListingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ListingGroupByArgs['orderBy'] }
        : { orderBy?: ListingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ListingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Listing model
   */
  readonly fields: ListingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Listing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ListingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bookings<T extends Listing$bookingsArgs<ExtArgs> = {}>(args?: Subset<T, Listing$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends Listing$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Listing$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    selectedMainCategories<T extends Listing$selectedMainCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Listing$selectedMainCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MainCategoryOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    selectedSubCategories<T extends Listing$selectedSubCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Listing$selectedSubCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubCategoryOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    selectedSpecificItems<T extends Listing$selectedSpecificItemsArgs<ExtArgs> = {}>(args?: Subset<T, Listing$selectedSpecificItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecificItemOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Listing model
   */
  interface ListingFieldRefs {
    readonly id: FieldRef<"Listing", 'Int'>
    readonly name: FieldRef<"Listing", 'String'>
    readonly price: FieldRef<"Listing", 'Decimal'>
    readonly main_image: FieldRef<"Listing", 'String'>
    readonly sub_images: FieldRef<"Listing", 'String[]'>
    readonly agegroup: FieldRef<"Listing", 'String[]'>
    readonly location: FieldRef<"Listing", 'String[]'>
    readonly facilities: FieldRef<"Listing", 'String[]'>
    readonly operatingHours: FieldRef<"Listing", 'String[]'>
    readonly isActive: FieldRef<"Listing", 'Boolean'>
    readonly description: FieldRef<"Listing", 'String'>
    readonly createdAt: FieldRef<"Listing", 'DateTime'>
    readonly updatedAt: FieldRef<"Listing", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Listing findUnique
   */
  export type ListingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
    /**
     * Filter, which Listing to fetch.
     */
    where: ListingWhereUniqueInput
  }

  /**
   * Listing findUniqueOrThrow
   */
  export type ListingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
    /**
     * Filter, which Listing to fetch.
     */
    where: ListingWhereUniqueInput
  }

  /**
   * Listing findFirst
   */
  export type ListingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
    /**
     * Filter, which Listing to fetch.
     */
    where?: ListingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Listings to fetch.
     */
    orderBy?: ListingOrderByWithRelationInput | ListingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Listings.
     */
    cursor?: ListingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Listings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Listings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Listings.
     */
    distinct?: ListingScalarFieldEnum | ListingScalarFieldEnum[]
  }

  /**
   * Listing findFirstOrThrow
   */
  export type ListingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
    /**
     * Filter, which Listing to fetch.
     */
    where?: ListingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Listings to fetch.
     */
    orderBy?: ListingOrderByWithRelationInput | ListingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Listings.
     */
    cursor?: ListingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Listings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Listings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Listings.
     */
    distinct?: ListingScalarFieldEnum | ListingScalarFieldEnum[]
  }

  /**
   * Listing findMany
   */
  export type ListingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
    /**
     * Filter, which Listings to fetch.
     */
    where?: ListingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Listings to fetch.
     */
    orderBy?: ListingOrderByWithRelationInput | ListingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Listings.
     */
    cursor?: ListingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Listings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Listings.
     */
    skip?: number
    distinct?: ListingScalarFieldEnum | ListingScalarFieldEnum[]
  }

  /**
   * Listing create
   */
  export type ListingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
    /**
     * The data needed to create a Listing.
     */
    data: XOR<ListingCreateInput, ListingUncheckedCreateInput>
  }

  /**
   * Listing createMany
   */
  export type ListingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Listings.
     */
    data: ListingCreateManyInput | ListingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Listing createManyAndReturn
   */
  export type ListingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * The data used to create many Listings.
     */
    data: ListingCreateManyInput | ListingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Listing update
   */
  export type ListingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
    /**
     * The data needed to update a Listing.
     */
    data: XOR<ListingUpdateInput, ListingUncheckedUpdateInput>
    /**
     * Choose, which Listing to update.
     */
    where: ListingWhereUniqueInput
  }

  /**
   * Listing updateMany
   */
  export type ListingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Listings.
     */
    data: XOR<ListingUpdateManyMutationInput, ListingUncheckedUpdateManyInput>
    /**
     * Filter which Listings to update
     */
    where?: ListingWhereInput
    /**
     * Limit how many Listings to update.
     */
    limit?: number
  }

  /**
   * Listing updateManyAndReturn
   */
  export type ListingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * The data used to update Listings.
     */
    data: XOR<ListingUpdateManyMutationInput, ListingUncheckedUpdateManyInput>
    /**
     * Filter which Listings to update
     */
    where?: ListingWhereInput
    /**
     * Limit how many Listings to update.
     */
    limit?: number
  }

  /**
   * Listing upsert
   */
  export type ListingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
    /**
     * The filter to search for the Listing to update in case it exists.
     */
    where: ListingWhereUniqueInput
    /**
     * In case the Listing found by the `where` argument doesn't exist, create a new Listing with this data.
     */
    create: XOR<ListingCreateInput, ListingUncheckedCreateInput>
    /**
     * In case the Listing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ListingUpdateInput, ListingUncheckedUpdateInput>
  }

  /**
   * Listing delete
   */
  export type ListingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
    /**
     * Filter which Listing to delete.
     */
    where: ListingWhereUniqueInput
  }

  /**
   * Listing deleteMany
   */
  export type ListingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Listings to delete
     */
    where?: ListingWhereInput
    /**
     * Limit how many Listings to delete.
     */
    limit?: number
  }

  /**
   * Listing.bookings
   */
  export type Listing$bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Listing.reviews
   */
  export type Listing$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    where?: reviewWhereInput
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    cursor?: reviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Listing.selectedMainCategories
   */
  export type Listing$selectedMainCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainCategoryOption
     */
    select?: MainCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainCategoryOption
     */
    omit?: MainCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainCategoryOptionInclude<ExtArgs> | null
    where?: MainCategoryOptionWhereInput
    orderBy?: MainCategoryOptionOrderByWithRelationInput | MainCategoryOptionOrderByWithRelationInput[]
    cursor?: MainCategoryOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MainCategoryOptionScalarFieldEnum | MainCategoryOptionScalarFieldEnum[]
  }

  /**
   * Listing.selectedSubCategories
   */
  export type Listing$selectedSubCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryOption
     */
    select?: SubCategoryOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubCategoryOption
     */
    omit?: SubCategoryOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubCategoryOptionInclude<ExtArgs> | null
    where?: SubCategoryOptionWhereInput
    orderBy?: SubCategoryOptionOrderByWithRelationInput | SubCategoryOptionOrderByWithRelationInput[]
    cursor?: SubCategoryOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubCategoryOptionScalarFieldEnum | SubCategoryOptionScalarFieldEnum[]
  }

  /**
   * Listing.selectedSpecificItems
   */
  export type Listing$selectedSpecificItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificItemOption
     */
    select?: SpecificItemOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecificItemOption
     */
    omit?: SpecificItemOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecificItemOptionInclude<ExtArgs> | null
    where?: SpecificItemOptionWhereInput
    orderBy?: SpecificItemOptionOrderByWithRelationInput | SpecificItemOptionOrderByWithRelationInput[]
    cursor?: SpecificItemOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpecificItemOptionScalarFieldEnum | SpecificItemOptionScalarFieldEnum[]
  }

  /**
   * Listing without action
   */
  export type ListingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
  }


  /**
   * Model review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    listingId: number | null
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    userId: number | null
    listingId: number | null
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    userId: number | null
    listingId: number | null
    rating: number | null
    status: $Enums.reviewStatus | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    listingId: number | null
    rating: number | null
    status: $Enums.reviewStatus | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    userId: number
    listingId: number
    rating: number
    status: number
    comment: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    userId?: true
    listingId?: true
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    userId?: true
    listingId?: true
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    userId?: true
    listingId?: true
    rating?: true
    status?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    userId?: true
    listingId?: true
    rating?: true
    status?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    userId?: true
    listingId?: true
    rating?: true
    status?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which review to aggregate.
     */
    where?: reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type reviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewWhereInput
    orderBy?: reviewOrderByWithAggregationInput | reviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: reviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: number
    userId: number
    listingId: number | null
    rating: number
    status: $Enums.reviewStatus | null
    comment: string | null
    createdAt: Date
    updatedAt: Date
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends reviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type reviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    listingId?: boolean
    rating?: boolean
    status?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    listing?: boolean | review$listingArgs<ExtArgs>
    booking?: boolean | review$bookingArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type reviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    listingId?: boolean
    rating?: boolean
    status?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    listing?: boolean | review$listingArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type reviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    listingId?: boolean
    rating?: boolean
    status?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    listing?: boolean | review$listingArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type reviewSelectScalar = {
    id?: boolean
    userId?: boolean
    listingId?: boolean
    rating?: boolean
    status?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type reviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "listingId" | "rating" | "status" | "comment" | "createdAt" | "updatedAt", ExtArgs["result"]["review"]>
  export type reviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    listing?: boolean | review$listingArgs<ExtArgs>
    booking?: boolean | review$bookingArgs<ExtArgs>
  }
  export type reviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    listing?: boolean | review$listingArgs<ExtArgs>
  }
  export type reviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    listing?: boolean | review$listingArgs<ExtArgs>
  }

  export type $reviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "review"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      listing: Prisma.$ListingPayload<ExtArgs> | null
      booking: Prisma.$BookingPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      listingId: number | null
      rating: number
      status: $Enums.reviewStatus | null
      comment: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type reviewGetPayload<S extends boolean | null | undefined | reviewDefaultArgs> = $Result.GetResult<Prisma.$reviewPayload, S>

  type reviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<reviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface reviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['review'], meta: { name: 'review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {reviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends reviewFindUniqueArgs>(args: SelectSubset<T, reviewFindUniqueArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {reviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends reviewFindUniqueOrThrowArgs>(args: SelectSubset<T, reviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends reviewFindFirstArgs>(args?: SelectSubset<T, reviewFindFirstArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends reviewFindFirstOrThrowArgs>(args?: SelectSubset<T, reviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends reviewFindManyArgs>(args?: SelectSubset<T, reviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Review.
     * @param {reviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends reviewCreateArgs>(args: SelectSubset<T, reviewCreateArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reviews.
     * @param {reviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends reviewCreateManyArgs>(args?: SelectSubset<T, reviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {reviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends reviewCreateManyAndReturnArgs>(args?: SelectSubset<T, reviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Review.
     * @param {reviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends reviewDeleteArgs>(args: SelectSubset<T, reviewDeleteArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Review.
     * @param {reviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends reviewUpdateArgs>(args: SelectSubset<T, reviewUpdateArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reviews.
     * @param {reviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends reviewDeleteManyArgs>(args?: SelectSubset<T, reviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends reviewUpdateManyArgs>(args: SelectSubset<T, reviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews and returns the data updated in the database.
     * @param {reviewUpdateManyAndReturnArgs} args - Arguments to update many Reviews.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends reviewUpdateManyAndReturnArgs>(args: SelectSubset<T, reviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Review.
     * @param {reviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends reviewUpsertArgs>(args: SelectSubset<T, reviewUpsertArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends reviewCountArgs>(
      args?: Subset<T, reviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reviewGroupByArgs['orderBy'] }
        : { orderBy?: reviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the review model
   */
  readonly fields: reviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    listing<T extends review$listingArgs<ExtArgs> = {}>(args?: Subset<T, review$listingArgs<ExtArgs>>): Prisma__ListingClient<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    booking<T extends review$bookingArgs<ExtArgs> = {}>(args?: Subset<T, review$bookingArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the review model
   */
  interface reviewFieldRefs {
    readonly id: FieldRef<"review", 'Int'>
    readonly userId: FieldRef<"review", 'Int'>
    readonly listingId: FieldRef<"review", 'Int'>
    readonly rating: FieldRef<"review", 'Int'>
    readonly status: FieldRef<"review", 'reviewStatus'>
    readonly comment: FieldRef<"review", 'String'>
    readonly createdAt: FieldRef<"review", 'DateTime'>
    readonly updatedAt: FieldRef<"review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * review findUnique
   */
  export type reviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which review to fetch.
     */
    where: reviewWhereUniqueInput
  }

  /**
   * review findUniqueOrThrow
   */
  export type reviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which review to fetch.
     */
    where: reviewWhereUniqueInput
  }

  /**
   * review findFirst
   */
  export type reviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which review to fetch.
     */
    where?: reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * review findFirstOrThrow
   */
  export type reviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which review to fetch.
     */
    where?: reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * review findMany
   */
  export type reviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reviews.
     */
    cursor?: reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * review create
   */
  export type reviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * The data needed to create a review.
     */
    data: XOR<reviewCreateInput, reviewUncheckedCreateInput>
  }

  /**
   * review createMany
   */
  export type reviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reviews.
     */
    data: reviewCreateManyInput | reviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * review createManyAndReturn
   */
  export type reviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * The data used to create many reviews.
     */
    data: reviewCreateManyInput | reviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * review update
   */
  export type reviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * The data needed to update a review.
     */
    data: XOR<reviewUpdateInput, reviewUncheckedUpdateInput>
    /**
     * Choose, which review to update.
     */
    where: reviewWhereUniqueInput
  }

  /**
   * review updateMany
   */
  export type reviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reviews.
     */
    data: XOR<reviewUpdateManyMutationInput, reviewUncheckedUpdateManyInput>
    /**
     * Filter which reviews to update
     */
    where?: reviewWhereInput
    /**
     * Limit how many reviews to update.
     */
    limit?: number
  }

  /**
   * review updateManyAndReturn
   */
  export type reviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * The data used to update reviews.
     */
    data: XOR<reviewUpdateManyMutationInput, reviewUncheckedUpdateManyInput>
    /**
     * Filter which reviews to update
     */
    where?: reviewWhereInput
    /**
     * Limit how many reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * review upsert
   */
  export type reviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * The filter to search for the review to update in case it exists.
     */
    where: reviewWhereUniqueInput
    /**
     * In case the review found by the `where` argument doesn't exist, create a new review with this data.
     */
    create: XOR<reviewCreateInput, reviewUncheckedCreateInput>
    /**
     * In case the review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reviewUpdateInput, reviewUncheckedUpdateInput>
  }

  /**
   * review delete
   */
  export type reviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter which review to delete.
     */
    where: reviewWhereUniqueInput
  }

  /**
   * review deleteMany
   */
  export type reviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reviews to delete
     */
    where?: reviewWhereInput
    /**
     * Limit how many reviews to delete.
     */
    limit?: number
  }

  /**
   * review.listing
   */
  export type review$listingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
    where?: ListingWhereInput
  }

  /**
   * review.booking
   */
  export type review$bookingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
  }

  /**
   * review without action
   */
  export type reviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
  }


  /**
   * Model Booking
   */

  export type AggregateBooking = {
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  export type BookingAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    listingId: number | null
    numberOfPersons: number | null
    review_id: number | null
  }

  export type BookingSumAggregateOutputType = {
    id: number | null
    userId: number | null
    listingId: number | null
    numberOfPersons: number | null
    review_id: number | null
  }

  export type BookingMinAggregateOutputType = {
    id: number | null
    userId: number | null
    listingId: number | null
    bookingDate: Date | null
    booking_hours: string | null
    additionalNote: string | null
    ageGroup: string | null
    numberOfPersons: number | null
    paymentMethod: $Enums.BookingPaymentMethod | null
    status: $Enums.BookingStatus | null
    review_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookingMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    listingId: number | null
    bookingDate: Date | null
    booking_hours: string | null
    additionalNote: string | null
    ageGroup: string | null
    numberOfPersons: number | null
    paymentMethod: $Enums.BookingPaymentMethod | null
    status: $Enums.BookingStatus | null
    review_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookingCountAggregateOutputType = {
    id: number
    userId: number
    listingId: number
    bookingDate: number
    booking_hours: number
    additionalNote: number
    ageGroup: number
    numberOfPersons: number
    paymentMethod: number
    status: number
    review_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookingAvgAggregateInputType = {
    id?: true
    userId?: true
    listingId?: true
    numberOfPersons?: true
    review_id?: true
  }

  export type BookingSumAggregateInputType = {
    id?: true
    userId?: true
    listingId?: true
    numberOfPersons?: true
    review_id?: true
  }

  export type BookingMinAggregateInputType = {
    id?: true
    userId?: true
    listingId?: true
    bookingDate?: true
    booking_hours?: true
    additionalNote?: true
    ageGroup?: true
    numberOfPersons?: true
    paymentMethod?: true
    status?: true
    review_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookingMaxAggregateInputType = {
    id?: true
    userId?: true
    listingId?: true
    bookingDate?: true
    booking_hours?: true
    additionalNote?: true
    ageGroup?: true
    numberOfPersons?: true
    paymentMethod?: true
    status?: true
    review_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookingCountAggregateInputType = {
    id?: true
    userId?: true
    listingId?: true
    bookingDate?: true
    booking_hours?: true
    additionalNote?: true
    ageGroup?: true
    numberOfPersons?: true
    paymentMethod?: true
    status?: true
    review_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Booking to aggregate.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookings
    **/
    _count?: true | BookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingMaxAggregateInputType
  }

  export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking[P]>
      : GetScalarType<T[P], AggregateBooking[P]>
  }




  export type BookingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithAggregationInput | BookingOrderByWithAggregationInput[]
    by: BookingScalarFieldEnum[] | BookingScalarFieldEnum
    having?: BookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCountAggregateInputType | true
    _avg?: BookingAvgAggregateInputType
    _sum?: BookingSumAggregateInputType
    _min?: BookingMinAggregateInputType
    _max?: BookingMaxAggregateInputType
  }

  export type BookingGroupByOutputType = {
    id: number
    userId: number
    listingId: number | null
    bookingDate: Date | null
    booking_hours: string | null
    additionalNote: string | null
    ageGroup: string | null
    numberOfPersons: number | null
    paymentMethod: $Enums.BookingPaymentMethod | null
    status: $Enums.BookingStatus | null
    review_id: number | null
    createdAt: Date
    updatedAt: Date
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  type GetBookingGroupByPayload<T extends BookingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingGroupByOutputType[P]>
            : GetScalarType<T[P], BookingGroupByOutputType[P]>
        }
      >
    >


  export type BookingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    listingId?: boolean
    bookingDate?: boolean
    booking_hours?: boolean
    additionalNote?: boolean
    ageGroup?: boolean
    numberOfPersons?: boolean
    paymentMethod?: boolean
    status?: boolean
    review_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    listing?: boolean | Booking$listingArgs<ExtArgs>
    review?: boolean | Booking$reviewArgs<ExtArgs>
    reward?: boolean | Booking$rewardArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>

  export type BookingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    listingId?: boolean
    bookingDate?: boolean
    booking_hours?: boolean
    additionalNote?: boolean
    ageGroup?: boolean
    numberOfPersons?: boolean
    paymentMethod?: boolean
    status?: boolean
    review_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    listing?: boolean | Booking$listingArgs<ExtArgs>
    review?: boolean | Booking$reviewArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>

  export type BookingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    listingId?: boolean
    bookingDate?: boolean
    booking_hours?: boolean
    additionalNote?: boolean
    ageGroup?: boolean
    numberOfPersons?: boolean
    paymentMethod?: boolean
    status?: boolean
    review_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    listing?: boolean | Booking$listingArgs<ExtArgs>
    review?: boolean | Booking$reviewArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>

  export type BookingSelectScalar = {
    id?: boolean
    userId?: boolean
    listingId?: boolean
    bookingDate?: boolean
    booking_hours?: boolean
    additionalNote?: boolean
    ageGroup?: boolean
    numberOfPersons?: boolean
    paymentMethod?: boolean
    status?: boolean
    review_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "listingId" | "bookingDate" | "booking_hours" | "additionalNote" | "ageGroup" | "numberOfPersons" | "paymentMethod" | "status" | "review_id" | "createdAt" | "updatedAt", ExtArgs["result"]["booking"]>
  export type BookingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    listing?: boolean | Booking$listingArgs<ExtArgs>
    review?: boolean | Booking$reviewArgs<ExtArgs>
    reward?: boolean | Booking$rewardArgs<ExtArgs>
  }
  export type BookingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    listing?: boolean | Booking$listingArgs<ExtArgs>
    review?: boolean | Booking$reviewArgs<ExtArgs>
  }
  export type BookingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    listing?: boolean | Booking$listingArgs<ExtArgs>
    review?: boolean | Booking$reviewArgs<ExtArgs>
  }

  export type $BookingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Booking"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      listing: Prisma.$ListingPayload<ExtArgs> | null
      review: Prisma.$reviewPayload<ExtArgs> | null
      reward: Prisma.$RewardPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      listingId: number | null
      bookingDate: Date | null
      booking_hours: string | null
      additionalNote: string | null
      ageGroup: string | null
      numberOfPersons: number | null
      paymentMethod: $Enums.BookingPaymentMethod | null
      status: $Enums.BookingStatus | null
      review_id: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["booking"]>
    composites: {}
  }

  type BookingGetPayload<S extends boolean | null | undefined | BookingDefaultArgs> = $Result.GetResult<Prisma.$BookingPayload, S>

  type BookingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookingCountAggregateInputType | true
    }

  export interface BookingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Booking'], meta: { name: 'Booking' } }
    /**
     * Find zero or one Booking that matches the filter.
     * @param {BookingFindUniqueArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookingFindUniqueArgs>(args: SelectSubset<T, BookingFindUniqueArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Booking that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookingFindUniqueOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookingFindUniqueOrThrowArgs>(args: SelectSubset<T, BookingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Booking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookingFindFirstArgs>(args?: SelectSubset<T, BookingFindFirstArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Booking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookingFindFirstOrThrowArgs>(args?: SelectSubset<T, BookingFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.booking.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.booking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingWithIdOnly = await prisma.booking.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookingFindManyArgs>(args?: SelectSubset<T, BookingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Booking.
     * @param {BookingCreateArgs} args - Arguments to create a Booking.
     * @example
     * // Create one Booking
     * const Booking = await prisma.booking.create({
     *   data: {
     *     // ... data to create a Booking
     *   }
     * })
     * 
     */
    create<T extends BookingCreateArgs>(args: SelectSubset<T, BookingCreateArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bookings.
     * @param {BookingCreateManyArgs} args - Arguments to create many Bookings.
     * @example
     * // Create many Bookings
     * const booking = await prisma.booking.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookingCreateManyArgs>(args?: SelectSubset<T, BookingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bookings and returns the data saved in the database.
     * @param {BookingCreateManyAndReturnArgs} args - Arguments to create many Bookings.
     * @example
     * // Create many Bookings
     * const booking = await prisma.booking.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bookings and only return the `id`
     * const bookingWithIdOnly = await prisma.booking.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookingCreateManyAndReturnArgs>(args?: SelectSubset<T, BookingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Booking.
     * @param {BookingDeleteArgs} args - Arguments to delete one Booking.
     * @example
     * // Delete one Booking
     * const Booking = await prisma.booking.delete({
     *   where: {
     *     // ... filter to delete one Booking
     *   }
     * })
     * 
     */
    delete<T extends BookingDeleteArgs>(args: SelectSubset<T, BookingDeleteArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Booking.
     * @param {BookingUpdateArgs} args - Arguments to update one Booking.
     * @example
     * // Update one Booking
     * const booking = await prisma.booking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookingUpdateArgs>(args: SelectSubset<T, BookingUpdateArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bookings.
     * @param {BookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.booking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookingDeleteManyArgs>(args?: SelectSubset<T, BookingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookingUpdateManyArgs>(args: SelectSubset<T, BookingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings and returns the data updated in the database.
     * @param {BookingUpdateManyAndReturnArgs} args - Arguments to update many Bookings.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bookings and only return the `id`
     * const bookingWithIdOnly = await prisma.booking.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookingUpdateManyAndReturnArgs>(args: SelectSubset<T, BookingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Booking.
     * @param {BookingUpsertArgs} args - Arguments to update or create a Booking.
     * @example
     * // Update or create a Booking
     * const booking = await prisma.booking.upsert({
     *   create: {
     *     // ... data to create a Booking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking we want to update
     *   }
     * })
     */
    upsert<T extends BookingUpsertArgs>(args: SelectSubset<T, BookingUpsertArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.booking.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends BookingCountArgs>(
      args?: Subset<T, BookingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAggregateArgs>(args: Subset<T, BookingAggregateArgs>): Prisma.PrismaPromise<GetBookingAggregateType<T>>

    /**
     * Group by Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingGroupByArgs['orderBy'] }
        : { orderBy?: BookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Booking model
   */
  readonly fields: BookingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Booking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    listing<T extends Booking$listingArgs<ExtArgs> = {}>(args?: Subset<T, Booking$listingArgs<ExtArgs>>): Prisma__ListingClient<$Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    review<T extends Booking$reviewArgs<ExtArgs> = {}>(args?: Subset<T, Booking$reviewArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    reward<T extends Booking$rewardArgs<ExtArgs> = {}>(args?: Subset<T, Booking$rewardArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Booking model
   */
  interface BookingFieldRefs {
    readonly id: FieldRef<"Booking", 'Int'>
    readonly userId: FieldRef<"Booking", 'Int'>
    readonly listingId: FieldRef<"Booking", 'Int'>
    readonly bookingDate: FieldRef<"Booking", 'DateTime'>
    readonly booking_hours: FieldRef<"Booking", 'String'>
    readonly additionalNote: FieldRef<"Booking", 'String'>
    readonly ageGroup: FieldRef<"Booking", 'String'>
    readonly numberOfPersons: FieldRef<"Booking", 'Int'>
    readonly paymentMethod: FieldRef<"Booking", 'BookingPaymentMethod'>
    readonly status: FieldRef<"Booking", 'BookingStatus'>
    readonly review_id: FieldRef<"Booking", 'Int'>
    readonly createdAt: FieldRef<"Booking", 'DateTime'>
    readonly updatedAt: FieldRef<"Booking", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Booking findUnique
   */
  export type BookingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking findUniqueOrThrow
   */
  export type BookingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking findFirst
   */
  export type BookingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking findFirstOrThrow
   */
  export type BookingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking findMany
   */
  export type BookingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Bookings to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking create
   */
  export type BookingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The data needed to create a Booking.
     */
    data: XOR<BookingCreateInput, BookingUncheckedCreateInput>
  }

  /**
   * Booking createMany
   */
  export type BookingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bookings.
     */
    data: BookingCreateManyInput | BookingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Booking createManyAndReturn
   */
  export type BookingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * The data used to create many Bookings.
     */
    data: BookingCreateManyInput | BookingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Booking update
   */
  export type BookingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The data needed to update a Booking.
     */
    data: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
    /**
     * Choose, which Booking to update.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking updateMany
   */
  export type BookingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bookings.
     */
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     */
    where?: BookingWhereInput
    /**
     * Limit how many Bookings to update.
     */
    limit?: number
  }

  /**
   * Booking updateManyAndReturn
   */
  export type BookingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * The data used to update Bookings.
     */
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     */
    where?: BookingWhereInput
    /**
     * Limit how many Bookings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Booking upsert
   */
  export type BookingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The filter to search for the Booking to update in case it exists.
     */
    where: BookingWhereUniqueInput
    /**
     * In case the Booking found by the `where` argument doesn't exist, create a new Booking with this data.
     */
    create: XOR<BookingCreateInput, BookingUncheckedCreateInput>
    /**
     * In case the Booking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
  }

  /**
   * Booking delete
   */
  export type BookingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter which Booking to delete.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking deleteMany
   */
  export type BookingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookings to delete
     */
    where?: BookingWhereInput
    /**
     * Limit how many Bookings to delete.
     */
    limit?: number
  }

  /**
   * Booking.listing
   */
  export type Booking$listingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Listing
     */
    select?: ListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Listing
     */
    omit?: ListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListingInclude<ExtArgs> | null
    where?: ListingWhereInput
  }

  /**
   * Booking.review
   */
  export type Booking$reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    where?: reviewWhereInput
  }

  /**
   * Booking.reward
   */
  export type Booking$rewardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reward
     */
    omit?: RewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    where?: RewardWhereInput
  }

  /**
   * Booking without action
   */
  export type BookingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
  }


  /**
   * Model Reward
   */

  export type AggregateReward = {
    _count: RewardCountAggregateOutputType | null
    _avg: RewardAvgAggregateOutputType | null
    _sum: RewardSumAggregateOutputType | null
    _min: RewardMinAggregateOutputType | null
    _max: RewardMaxAggregateOutputType | null
  }

  export type RewardAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    points: number | null
    bookingId: number | null
  }

  export type RewardSumAggregateOutputType = {
    id: number | null
    userId: number | null
    points: number | null
    bookingId: number | null
  }

  export type RewardMinAggregateOutputType = {
    id: number | null
    userId: number | null
    points: number | null
    description: string | null
    category: $Enums.reward_category | null
    bookingId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RewardMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    points: number | null
    description: string | null
    category: $Enums.reward_category | null
    bookingId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RewardCountAggregateOutputType = {
    id: number
    userId: number
    points: number
    description: number
    category: number
    bookingId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RewardAvgAggregateInputType = {
    id?: true
    userId?: true
    points?: true
    bookingId?: true
  }

  export type RewardSumAggregateInputType = {
    id?: true
    userId?: true
    points?: true
    bookingId?: true
  }

  export type RewardMinAggregateInputType = {
    id?: true
    userId?: true
    points?: true
    description?: true
    category?: true
    bookingId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RewardMaxAggregateInputType = {
    id?: true
    userId?: true
    points?: true
    description?: true
    category?: true
    bookingId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RewardCountAggregateInputType = {
    id?: true
    userId?: true
    points?: true
    description?: true
    category?: true
    bookingId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RewardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reward to aggregate.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rewards
    **/
    _count?: true | RewardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RewardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RewardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RewardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RewardMaxAggregateInputType
  }

  export type GetRewardAggregateType<T extends RewardAggregateArgs> = {
        [P in keyof T & keyof AggregateReward]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReward[P]>
      : GetScalarType<T[P], AggregateReward[P]>
  }




  export type RewardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RewardWhereInput
    orderBy?: RewardOrderByWithAggregationInput | RewardOrderByWithAggregationInput[]
    by: RewardScalarFieldEnum[] | RewardScalarFieldEnum
    having?: RewardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RewardCountAggregateInputType | true
    _avg?: RewardAvgAggregateInputType
    _sum?: RewardSumAggregateInputType
    _min?: RewardMinAggregateInputType
    _max?: RewardMaxAggregateInputType
  }

  export type RewardGroupByOutputType = {
    id: number
    userId: number
    points: number | null
    description: string | null
    category: $Enums.reward_category | null
    bookingId: number | null
    createdAt: Date
    updatedAt: Date
    _count: RewardCountAggregateOutputType | null
    _avg: RewardAvgAggregateOutputType | null
    _sum: RewardSumAggregateOutputType | null
    _min: RewardMinAggregateOutputType | null
    _max: RewardMaxAggregateOutputType | null
  }

  type GetRewardGroupByPayload<T extends RewardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RewardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RewardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RewardGroupByOutputType[P]>
            : GetScalarType<T[P], RewardGroupByOutputType[P]>
        }
      >
    >


  export type RewardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    points?: boolean
    description?: boolean
    category?: boolean
    bookingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | Reward$bookingArgs<ExtArgs>
  }, ExtArgs["result"]["reward"]>

  export type RewardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    points?: boolean
    description?: boolean
    category?: boolean
    bookingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | Reward$bookingArgs<ExtArgs>
  }, ExtArgs["result"]["reward"]>

  export type RewardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    points?: boolean
    description?: boolean
    category?: boolean
    bookingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | Reward$bookingArgs<ExtArgs>
  }, ExtArgs["result"]["reward"]>

  export type RewardSelectScalar = {
    id?: boolean
    userId?: boolean
    points?: boolean
    description?: boolean
    category?: boolean
    bookingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RewardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "points" | "description" | "category" | "bookingId" | "createdAt" | "updatedAt", ExtArgs["result"]["reward"]>
  export type RewardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | Reward$bookingArgs<ExtArgs>
  }
  export type RewardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | Reward$bookingArgs<ExtArgs>
  }
  export type RewardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | Reward$bookingArgs<ExtArgs>
  }

  export type $RewardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reward"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      booking: Prisma.$BookingPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      points: number | null
      description: string | null
      category: $Enums.reward_category | null
      bookingId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["reward"]>
    composites: {}
  }

  type RewardGetPayload<S extends boolean | null | undefined | RewardDefaultArgs> = $Result.GetResult<Prisma.$RewardPayload, S>

  type RewardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RewardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RewardCountAggregateInputType | true
    }

  export interface RewardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reward'], meta: { name: 'Reward' } }
    /**
     * Find zero or one Reward that matches the filter.
     * @param {RewardFindUniqueArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RewardFindUniqueArgs>(args: SelectSubset<T, RewardFindUniqueArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Reward that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RewardFindUniqueOrThrowArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RewardFindUniqueOrThrowArgs>(args: SelectSubset<T, RewardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reward that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardFindFirstArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RewardFindFirstArgs>(args?: SelectSubset<T, RewardFindFirstArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reward that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardFindFirstOrThrowArgs} args - Arguments to find a Reward
     * @example
     * // Get one Reward
     * const reward = await prisma.reward.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RewardFindFirstOrThrowArgs>(args?: SelectSubset<T, RewardFindFirstOrThrowArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rewards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rewards
     * const rewards = await prisma.reward.findMany()
     * 
     * // Get first 10 Rewards
     * const rewards = await prisma.reward.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rewardWithIdOnly = await prisma.reward.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RewardFindManyArgs>(args?: SelectSubset<T, RewardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Reward.
     * @param {RewardCreateArgs} args - Arguments to create a Reward.
     * @example
     * // Create one Reward
     * const Reward = await prisma.reward.create({
     *   data: {
     *     // ... data to create a Reward
     *   }
     * })
     * 
     */
    create<T extends RewardCreateArgs>(args: SelectSubset<T, RewardCreateArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rewards.
     * @param {RewardCreateManyArgs} args - Arguments to create many Rewards.
     * @example
     * // Create many Rewards
     * const reward = await prisma.reward.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RewardCreateManyArgs>(args?: SelectSubset<T, RewardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rewards and returns the data saved in the database.
     * @param {RewardCreateManyAndReturnArgs} args - Arguments to create many Rewards.
     * @example
     * // Create many Rewards
     * const reward = await prisma.reward.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rewards and only return the `id`
     * const rewardWithIdOnly = await prisma.reward.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RewardCreateManyAndReturnArgs>(args?: SelectSubset<T, RewardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Reward.
     * @param {RewardDeleteArgs} args - Arguments to delete one Reward.
     * @example
     * // Delete one Reward
     * const Reward = await prisma.reward.delete({
     *   where: {
     *     // ... filter to delete one Reward
     *   }
     * })
     * 
     */
    delete<T extends RewardDeleteArgs>(args: SelectSubset<T, RewardDeleteArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Reward.
     * @param {RewardUpdateArgs} args - Arguments to update one Reward.
     * @example
     * // Update one Reward
     * const reward = await prisma.reward.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RewardUpdateArgs>(args: SelectSubset<T, RewardUpdateArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rewards.
     * @param {RewardDeleteManyArgs} args - Arguments to filter Rewards to delete.
     * @example
     * // Delete a few Rewards
     * const { count } = await prisma.reward.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RewardDeleteManyArgs>(args?: SelectSubset<T, RewardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rewards
     * const reward = await prisma.reward.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RewardUpdateManyArgs>(args: SelectSubset<T, RewardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rewards and returns the data updated in the database.
     * @param {RewardUpdateManyAndReturnArgs} args - Arguments to update many Rewards.
     * @example
     * // Update many Rewards
     * const reward = await prisma.reward.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Rewards and only return the `id`
     * const rewardWithIdOnly = await prisma.reward.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RewardUpdateManyAndReturnArgs>(args: SelectSubset<T, RewardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Reward.
     * @param {RewardUpsertArgs} args - Arguments to update or create a Reward.
     * @example
     * // Update or create a Reward
     * const reward = await prisma.reward.upsert({
     *   create: {
     *     // ... data to create a Reward
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reward we want to update
     *   }
     * })
     */
    upsert<T extends RewardUpsertArgs>(args: SelectSubset<T, RewardUpsertArgs<ExtArgs>>): Prisma__RewardClient<$Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardCountArgs} args - Arguments to filter Rewards to count.
     * @example
     * // Count the number of Rewards
     * const count = await prisma.reward.count({
     *   where: {
     *     // ... the filter for the Rewards we want to count
     *   }
     * })
    **/
    count<T extends RewardCountArgs>(
      args?: Subset<T, RewardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RewardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RewardAggregateArgs>(args: Subset<T, RewardAggregateArgs>): Prisma.PrismaPromise<GetRewardAggregateType<T>>

    /**
     * Group by Reward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RewardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RewardGroupByArgs['orderBy'] }
        : { orderBy?: RewardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RewardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRewardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reward model
   */
  readonly fields: RewardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reward.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RewardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    booking<T extends Reward$bookingArgs<ExtArgs> = {}>(args?: Subset<T, Reward$bookingArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reward model
   */
  interface RewardFieldRefs {
    readonly id: FieldRef<"Reward", 'Int'>
    readonly userId: FieldRef<"Reward", 'Int'>
    readonly points: FieldRef<"Reward", 'Int'>
    readonly description: FieldRef<"Reward", 'String'>
    readonly category: FieldRef<"Reward", 'reward_category'>
    readonly bookingId: FieldRef<"Reward", 'Int'>
    readonly createdAt: FieldRef<"Reward", 'DateTime'>
    readonly updatedAt: FieldRef<"Reward", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Reward findUnique
   */
  export type RewardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reward
     */
    omit?: RewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward findUniqueOrThrow
   */
  export type RewardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reward
     */
    omit?: RewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward findFirst
   */
  export type RewardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reward
     */
    omit?: RewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rewards.
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rewards.
     */
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * Reward findFirstOrThrow
   */
  export type RewardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reward
     */
    omit?: RewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Reward to fetch.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rewards.
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rewards.
     */
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * Reward findMany
   */
  export type RewardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reward
     */
    omit?: RewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter, which Rewards to fetch.
     */
    where?: RewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rewards to fetch.
     */
    orderBy?: RewardOrderByWithRelationInput | RewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rewards.
     */
    cursor?: RewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rewards.
     */
    skip?: number
    distinct?: RewardScalarFieldEnum | RewardScalarFieldEnum[]
  }

  /**
   * Reward create
   */
  export type RewardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reward
     */
    omit?: RewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * The data needed to create a Reward.
     */
    data: XOR<RewardCreateInput, RewardUncheckedCreateInput>
  }

  /**
   * Reward createMany
   */
  export type RewardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rewards.
     */
    data: RewardCreateManyInput | RewardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reward createManyAndReturn
   */
  export type RewardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Reward
     */
    omit?: RewardOmit<ExtArgs> | null
    /**
     * The data used to create many Rewards.
     */
    data: RewardCreateManyInput | RewardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reward update
   */
  export type RewardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reward
     */
    omit?: RewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * The data needed to update a Reward.
     */
    data: XOR<RewardUpdateInput, RewardUncheckedUpdateInput>
    /**
     * Choose, which Reward to update.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward updateMany
   */
  export type RewardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rewards.
     */
    data: XOR<RewardUpdateManyMutationInput, RewardUncheckedUpdateManyInput>
    /**
     * Filter which Rewards to update
     */
    where?: RewardWhereInput
    /**
     * Limit how many Rewards to update.
     */
    limit?: number
  }

  /**
   * Reward updateManyAndReturn
   */
  export type RewardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Reward
     */
    omit?: RewardOmit<ExtArgs> | null
    /**
     * The data used to update Rewards.
     */
    data: XOR<RewardUpdateManyMutationInput, RewardUncheckedUpdateManyInput>
    /**
     * Filter which Rewards to update
     */
    where?: RewardWhereInput
    /**
     * Limit how many Rewards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reward upsert
   */
  export type RewardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reward
     */
    omit?: RewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * The filter to search for the Reward to update in case it exists.
     */
    where: RewardWhereUniqueInput
    /**
     * In case the Reward found by the `where` argument doesn't exist, create a new Reward with this data.
     */
    create: XOR<RewardCreateInput, RewardUncheckedCreateInput>
    /**
     * In case the Reward was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RewardUpdateInput, RewardUncheckedUpdateInput>
  }

  /**
   * Reward delete
   */
  export type RewardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reward
     */
    omit?: RewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
    /**
     * Filter which Reward to delete.
     */
    where: RewardWhereUniqueInput
  }

  /**
   * Reward deleteMany
   */
  export type RewardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rewards to delete
     */
    where?: RewardWhereInput
    /**
     * Limit how many Rewards to delete.
     */
    limit?: number
  }

  /**
   * Reward.booking
   */
  export type Reward$bookingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
  }

  /**
   * Reward without action
   */
  export type RewardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reward
     */
    select?: RewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reward
     */
    omit?: RewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    isRead: boolean | null
    link: string | null
    entityId: string | null
    entityType: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    isRead: boolean | null
    link: string | null
    entityId: string | null
    entityType: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    message: number
    type: number
    isRead: number
    link: number
    entityId: number
    entityType: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    link?: true
    entityId?: true
    entityType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    link?: true
    entityId?: true
    entityType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    link?: true
    entityId?: true
    entityType?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    userId: number
    title: string
    message: string
    type: $Enums.NotificationType
    isRead: boolean
    link: string | null
    entityId: string | null
    entityType: string | null
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    link?: boolean
    entityId?: boolean
    entityType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    link?: boolean
    entityId?: boolean
    entityType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    link?: boolean
    entityId?: boolean
    entityType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    link?: boolean
    entityId?: boolean
    entityType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "message" | "type" | "isRead" | "link" | "entityId" | "entityType" | "createdAt" | "updatedAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      title: string
      message: string
      type: $Enums.NotificationType
      isRead: boolean
      link: string | null
      entityId: string | null
      entityType: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly link: FieldRef<"Notification", 'String'>
    readonly entityId: FieldRef<"Notification", 'String'>
    readonly entityType: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AuditLogSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: number | null
    timestamp: Date | null
    userId: number | null
    action: $Enums.AuditLogAction | null
    entityName: string | null
    entityId: string | null
    description: string | null
    ipAddress: string | null
    userAgent: string | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: number | null
    timestamp: Date | null
    userId: number | null
    action: $Enums.AuditLogAction | null
    entityName: string | null
    entityId: string | null
    description: string | null
    ipAddress: string | null
    userAgent: string | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    timestamp: number
    userId: number
    action: number
    entityName: number
    entityId: number
    oldValues: number
    newValues: number
    description: number
    ipAddress: number
    userAgent: number
    _all: number
  }


  export type AuditLogAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AuditLogSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AuditLogMinAggregateInputType = {
    id?: true
    timestamp?: true
    userId?: true
    action?: true
    entityName?: true
    entityId?: true
    description?: true
    ipAddress?: true
    userAgent?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    timestamp?: true
    userId?: true
    action?: true
    entityName?: true
    entityId?: true
    description?: true
    ipAddress?: true
    userAgent?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    timestamp?: true
    userId?: true
    action?: true
    entityName?: true
    entityId?: true
    oldValues?: true
    newValues?: true
    description?: true
    ipAddress?: true
    userAgent?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _avg?: AuditLogAvgAggregateInputType
    _sum?: AuditLogSumAggregateInputType
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: number
    timestamp: Date
    userId: number | null
    action: $Enums.AuditLogAction
    entityName: string | null
    entityId: string | null
    oldValues: JsonValue | null
    newValues: JsonValue | null
    description: string | null
    ipAddress: string | null
    userAgent: string | null
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    userId?: boolean
    action?: boolean
    entityName?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    userId?: boolean
    action?: boolean
    entityName?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    userId?: boolean
    action?: boolean
    entityName?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    timestamp?: boolean
    userId?: boolean
    action?: boolean
    entityName?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "timestamp" | "userId" | "action" | "entityName" | "entityId" | "oldValues" | "newValues" | "description" | "ipAddress" | "userAgent", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      timestamp: Date
      userId: number | null
      action: $Enums.AuditLogAction
      entityName: string | null
      entityId: string | null
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      description: string | null
      ipAddress: string | null
      userAgent: string | null
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'Int'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
    readonly userId: FieldRef<"AuditLog", 'Int'>
    readonly action: FieldRef<"AuditLog", 'AuditLogAction'>
    readonly entityName: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly oldValues: FieldRef<"AuditLog", 'Json'>
    readonly newValues: FieldRef<"AuditLog", 'Json'>
    readonly description: FieldRef<"AuditLog", 'String'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.user
   */
  export type AuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    fname: 'fname',
    lname: 'lname',
    email: 'email',
    uid: 'uid',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MainCategoryOptionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MainCategoryOptionScalarFieldEnum = (typeof MainCategoryOptionScalarFieldEnum)[keyof typeof MainCategoryOptionScalarFieldEnum]


  export const SubCategoryOptionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    mainCategoryId: 'mainCategoryId'
  };

  export type SubCategoryOptionScalarFieldEnum = (typeof SubCategoryOptionScalarFieldEnum)[keyof typeof SubCategoryOptionScalarFieldEnum]


  export const SpecificItemOptionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    subCategoryId: 'subCategoryId',
    mainCategoryId: 'mainCategoryId'
  };

  export type SpecificItemOptionScalarFieldEnum = (typeof SpecificItemOptionScalarFieldEnum)[keyof typeof SpecificItemOptionScalarFieldEnum]


  export const ListingScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    main_image: 'main_image',
    sub_images: 'sub_images',
    agegroup: 'agegroup',
    location: 'location',
    facilities: 'facilities',
    operatingHours: 'operatingHours',
    isActive: 'isActive',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ListingScalarFieldEnum = (typeof ListingScalarFieldEnum)[keyof typeof ListingScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    listingId: 'listingId',
    rating: 'rating',
    status: 'status',
    comment: 'comment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const BookingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    listingId: 'listingId',
    bookingDate: 'bookingDate',
    booking_hours: 'booking_hours',
    additionalNote: 'additionalNote',
    ageGroup: 'ageGroup',
    numberOfPersons: 'numberOfPersons',
    paymentMethod: 'paymentMethod',
    status: 'status',
    review_id: 'review_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


  export const RewardScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    points: 'points',
    description: 'description',
    category: 'category',
    bookingId: 'bookingId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RewardScalarFieldEnum = (typeof RewardScalarFieldEnum)[keyof typeof RewardScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    message: 'message',
    type: 'type',
    isRead: 'isRead',
    link: 'link',
    entityId: 'entityId',
    entityType: 'entityType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    timestamp: 'timestamp',
    userId: 'userId',
    action: 'action',
    entityName: 'entityName',
    entityId: 'entityId',
    oldValues: 'oldValues',
    newValues: 'newValues',
    description: 'description',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'reviewStatus'
   */
  export type EnumreviewStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'reviewStatus'>
    


  /**
   * Reference to a field of type 'reviewStatus[]'
   */
  export type ListEnumreviewStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'reviewStatus[]'>
    


  /**
   * Reference to a field of type 'BookingPaymentMethod'
   */
  export type EnumBookingPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BookingPaymentMethod'>
    


  /**
   * Reference to a field of type 'BookingPaymentMethod[]'
   */
  export type ListEnumBookingPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BookingPaymentMethod[]'>
    


  /**
   * Reference to a field of type 'BookingStatus'
   */
  export type EnumBookingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BookingStatus'>
    


  /**
   * Reference to a field of type 'BookingStatus[]'
   */
  export type ListEnumBookingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BookingStatus[]'>
    


  /**
   * Reference to a field of type 'reward_category'
   */
  export type Enumreward_categoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'reward_category'>
    


  /**
   * Reference to a field of type 'reward_category[]'
   */
  export type ListEnumreward_categoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'reward_category[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'AuditLogAction'
   */
  export type EnumAuditLogActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuditLogAction'>
    


  /**
   * Reference to a field of type 'AuditLogAction[]'
   */
  export type ListEnumAuditLogActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuditLogAction[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    fname?: StringNullableFilter<"User"> | string | null
    lname?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    uid?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    bookings?: BookingListRelationFilter
    rewards?: RewardListRelationFilter
    notifications?: NotificationListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    fname?: SortOrderInput | SortOrder
    lname?: SortOrderInput | SortOrder
    email?: SortOrder
    uid?: SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bookings?: BookingOrderByRelationAggregateInput
    rewards?: RewardOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    reviews?: reviewOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    uid?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fname?: StringNullableFilter<"User"> | string | null
    lname?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    bookings?: BookingListRelationFilter
    rewards?: RewardListRelationFilter
    notifications?: NotificationListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    reviews?: ReviewListRelationFilter
  }, "id" | "email" | "uid">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    fname?: SortOrderInput | SortOrder
    lname?: SortOrderInput | SortOrder
    email?: SortOrder
    uid?: SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    fname?: StringNullableWithAggregatesFilter<"User"> | string | null
    lname?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    uid?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type MainCategoryOptionWhereInput = {
    AND?: MainCategoryOptionWhereInput | MainCategoryOptionWhereInput[]
    OR?: MainCategoryOptionWhereInput[]
    NOT?: MainCategoryOptionWhereInput | MainCategoryOptionWhereInput[]
    id?: IntFilter<"MainCategoryOption"> | number
    name?: StringFilter<"MainCategoryOption"> | string
    createdAt?: DateTimeFilter<"MainCategoryOption"> | Date | string
    updatedAt?: DateTimeFilter<"MainCategoryOption"> | Date | string
    subCategories?: SubCategoryOptionListRelationFilter
    specificItems?: SpecificItemOptionListRelationFilter
    listings?: ListingListRelationFilter
  }

  export type MainCategoryOptionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subCategories?: SubCategoryOptionOrderByRelationAggregateInput
    specificItems?: SpecificItemOptionOrderByRelationAggregateInput
    listings?: ListingOrderByRelationAggregateInput
  }

  export type MainCategoryOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: MainCategoryOptionWhereInput | MainCategoryOptionWhereInput[]
    OR?: MainCategoryOptionWhereInput[]
    NOT?: MainCategoryOptionWhereInput | MainCategoryOptionWhereInput[]
    createdAt?: DateTimeFilter<"MainCategoryOption"> | Date | string
    updatedAt?: DateTimeFilter<"MainCategoryOption"> | Date | string
    subCategories?: SubCategoryOptionListRelationFilter
    specificItems?: SpecificItemOptionListRelationFilter
    listings?: ListingListRelationFilter
  }, "id" | "name">

  export type MainCategoryOptionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MainCategoryOptionCountOrderByAggregateInput
    _avg?: MainCategoryOptionAvgOrderByAggregateInput
    _max?: MainCategoryOptionMaxOrderByAggregateInput
    _min?: MainCategoryOptionMinOrderByAggregateInput
    _sum?: MainCategoryOptionSumOrderByAggregateInput
  }

  export type MainCategoryOptionScalarWhereWithAggregatesInput = {
    AND?: MainCategoryOptionScalarWhereWithAggregatesInput | MainCategoryOptionScalarWhereWithAggregatesInput[]
    OR?: MainCategoryOptionScalarWhereWithAggregatesInput[]
    NOT?: MainCategoryOptionScalarWhereWithAggregatesInput | MainCategoryOptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MainCategoryOption"> | number
    name?: StringWithAggregatesFilter<"MainCategoryOption"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MainCategoryOption"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MainCategoryOption"> | Date | string
  }

  export type SubCategoryOptionWhereInput = {
    AND?: SubCategoryOptionWhereInput | SubCategoryOptionWhereInput[]
    OR?: SubCategoryOptionWhereInput[]
    NOT?: SubCategoryOptionWhereInput | SubCategoryOptionWhereInput[]
    id?: IntFilter<"SubCategoryOption"> | number
    name?: StringFilter<"SubCategoryOption"> | string
    createdAt?: DateTimeFilter<"SubCategoryOption"> | Date | string
    updatedAt?: DateTimeFilter<"SubCategoryOption"> | Date | string
    mainCategoryId?: IntNullableFilter<"SubCategoryOption"> | number | null
    listings?: ListingListRelationFilter
    mainCategory?: XOR<MainCategoryOptionNullableScalarRelationFilter, MainCategoryOptionWhereInput> | null
    specificItems?: SpecificItemOptionListRelationFilter
  }

  export type SubCategoryOptionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mainCategoryId?: SortOrderInput | SortOrder
    listings?: ListingOrderByRelationAggregateInput
    mainCategory?: MainCategoryOptionOrderByWithRelationInput
    specificItems?: SpecificItemOptionOrderByRelationAggregateInput
  }

  export type SubCategoryOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    mainCategoryId_name?: SubCategoryOptionMainCategoryIdNameCompoundUniqueInput
    AND?: SubCategoryOptionWhereInput | SubCategoryOptionWhereInput[]
    OR?: SubCategoryOptionWhereInput[]
    NOT?: SubCategoryOptionWhereInput | SubCategoryOptionWhereInput[]
    name?: StringFilter<"SubCategoryOption"> | string
    createdAt?: DateTimeFilter<"SubCategoryOption"> | Date | string
    updatedAt?: DateTimeFilter<"SubCategoryOption"> | Date | string
    mainCategoryId?: IntNullableFilter<"SubCategoryOption"> | number | null
    listings?: ListingListRelationFilter
    mainCategory?: XOR<MainCategoryOptionNullableScalarRelationFilter, MainCategoryOptionWhereInput> | null
    specificItems?: SpecificItemOptionListRelationFilter
  }, "id" | "mainCategoryId_name">

  export type SubCategoryOptionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mainCategoryId?: SortOrderInput | SortOrder
    _count?: SubCategoryOptionCountOrderByAggregateInput
    _avg?: SubCategoryOptionAvgOrderByAggregateInput
    _max?: SubCategoryOptionMaxOrderByAggregateInput
    _min?: SubCategoryOptionMinOrderByAggregateInput
    _sum?: SubCategoryOptionSumOrderByAggregateInput
  }

  export type SubCategoryOptionScalarWhereWithAggregatesInput = {
    AND?: SubCategoryOptionScalarWhereWithAggregatesInput | SubCategoryOptionScalarWhereWithAggregatesInput[]
    OR?: SubCategoryOptionScalarWhereWithAggregatesInput[]
    NOT?: SubCategoryOptionScalarWhereWithAggregatesInput | SubCategoryOptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SubCategoryOption"> | number
    name?: StringWithAggregatesFilter<"SubCategoryOption"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SubCategoryOption"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SubCategoryOption"> | Date | string
    mainCategoryId?: IntNullableWithAggregatesFilter<"SubCategoryOption"> | number | null
  }

  export type SpecificItemOptionWhereInput = {
    AND?: SpecificItemOptionWhereInput | SpecificItemOptionWhereInput[]
    OR?: SpecificItemOptionWhereInput[]
    NOT?: SpecificItemOptionWhereInput | SpecificItemOptionWhereInput[]
    id?: IntFilter<"SpecificItemOption"> | number
    name?: StringFilter<"SpecificItemOption"> | string
    createdAt?: DateTimeFilter<"SpecificItemOption"> | Date | string
    updatedAt?: DateTimeFilter<"SpecificItemOption"> | Date | string
    subCategoryId?: IntNullableFilter<"SpecificItemOption"> | number | null
    mainCategoryId?: IntNullableFilter<"SpecificItemOption"> | number | null
    listings?: ListingListRelationFilter
    subCategory?: XOR<SubCategoryOptionNullableScalarRelationFilter, SubCategoryOptionWhereInput> | null
    mainCategory?: XOR<MainCategoryOptionNullableScalarRelationFilter, MainCategoryOptionWhereInput> | null
  }

  export type SpecificItemOptionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subCategoryId?: SortOrderInput | SortOrder
    mainCategoryId?: SortOrderInput | SortOrder
    listings?: ListingOrderByRelationAggregateInput
    subCategory?: SubCategoryOptionOrderByWithRelationInput
    mainCategory?: MainCategoryOptionOrderByWithRelationInput
  }

  export type SpecificItemOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    subCategoryId_name?: SpecificItemOptionSubCategoryIdNameCompoundUniqueInput
    AND?: SpecificItemOptionWhereInput | SpecificItemOptionWhereInput[]
    OR?: SpecificItemOptionWhereInput[]
    NOT?: SpecificItemOptionWhereInput | SpecificItemOptionWhereInput[]
    name?: StringFilter<"SpecificItemOption"> | string
    createdAt?: DateTimeFilter<"SpecificItemOption"> | Date | string
    updatedAt?: DateTimeFilter<"SpecificItemOption"> | Date | string
    subCategoryId?: IntNullableFilter<"SpecificItemOption"> | number | null
    mainCategoryId?: IntNullableFilter<"SpecificItemOption"> | number | null
    listings?: ListingListRelationFilter
    subCategory?: XOR<SubCategoryOptionNullableScalarRelationFilter, SubCategoryOptionWhereInput> | null
    mainCategory?: XOR<MainCategoryOptionNullableScalarRelationFilter, MainCategoryOptionWhereInput> | null
  }, "id" | "subCategoryId_name">

  export type SpecificItemOptionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subCategoryId?: SortOrderInput | SortOrder
    mainCategoryId?: SortOrderInput | SortOrder
    _count?: SpecificItemOptionCountOrderByAggregateInput
    _avg?: SpecificItemOptionAvgOrderByAggregateInput
    _max?: SpecificItemOptionMaxOrderByAggregateInput
    _min?: SpecificItemOptionMinOrderByAggregateInput
    _sum?: SpecificItemOptionSumOrderByAggregateInput
  }

  export type SpecificItemOptionScalarWhereWithAggregatesInput = {
    AND?: SpecificItemOptionScalarWhereWithAggregatesInput | SpecificItemOptionScalarWhereWithAggregatesInput[]
    OR?: SpecificItemOptionScalarWhereWithAggregatesInput[]
    NOT?: SpecificItemOptionScalarWhereWithAggregatesInput | SpecificItemOptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SpecificItemOption"> | number
    name?: StringWithAggregatesFilter<"SpecificItemOption"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SpecificItemOption"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SpecificItemOption"> | Date | string
    subCategoryId?: IntNullableWithAggregatesFilter<"SpecificItemOption"> | number | null
    mainCategoryId?: IntNullableWithAggregatesFilter<"SpecificItemOption"> | number | null
  }

  export type ListingWhereInput = {
    AND?: ListingWhereInput | ListingWhereInput[]
    OR?: ListingWhereInput[]
    NOT?: ListingWhereInput | ListingWhereInput[]
    id?: IntFilter<"Listing"> | number
    name?: StringNullableFilter<"Listing"> | string | null
    price?: DecimalNullableFilter<"Listing"> | Decimal | DecimalJsLike | number | string | null
    main_image?: StringNullableFilter<"Listing"> | string | null
    sub_images?: StringNullableListFilter<"Listing">
    agegroup?: StringNullableListFilter<"Listing">
    location?: StringNullableListFilter<"Listing">
    facilities?: StringNullableListFilter<"Listing">
    operatingHours?: StringNullableListFilter<"Listing">
    isActive?: BoolFilter<"Listing"> | boolean
    description?: StringNullableFilter<"Listing"> | string | null
    createdAt?: DateTimeFilter<"Listing"> | Date | string
    updatedAt?: DateTimeFilter<"Listing"> | Date | string
    bookings?: BookingListRelationFilter
    reviews?: ReviewListRelationFilter
    selectedMainCategories?: MainCategoryOptionListRelationFilter
    selectedSubCategories?: SubCategoryOptionListRelationFilter
    selectedSpecificItems?: SpecificItemOptionListRelationFilter
  }

  export type ListingOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    main_image?: SortOrderInput | SortOrder
    sub_images?: SortOrder
    agegroup?: SortOrder
    location?: SortOrder
    facilities?: SortOrder
    operatingHours?: SortOrder
    isActive?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bookings?: BookingOrderByRelationAggregateInput
    reviews?: reviewOrderByRelationAggregateInput
    selectedMainCategories?: MainCategoryOptionOrderByRelationAggregateInput
    selectedSubCategories?: SubCategoryOptionOrderByRelationAggregateInput
    selectedSpecificItems?: SpecificItemOptionOrderByRelationAggregateInput
  }

  export type ListingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ListingWhereInput | ListingWhereInput[]
    OR?: ListingWhereInput[]
    NOT?: ListingWhereInput | ListingWhereInput[]
    name?: StringNullableFilter<"Listing"> | string | null
    price?: DecimalNullableFilter<"Listing"> | Decimal | DecimalJsLike | number | string | null
    main_image?: StringNullableFilter<"Listing"> | string | null
    sub_images?: StringNullableListFilter<"Listing">
    agegroup?: StringNullableListFilter<"Listing">
    location?: StringNullableListFilter<"Listing">
    facilities?: StringNullableListFilter<"Listing">
    operatingHours?: StringNullableListFilter<"Listing">
    isActive?: BoolFilter<"Listing"> | boolean
    description?: StringNullableFilter<"Listing"> | string | null
    createdAt?: DateTimeFilter<"Listing"> | Date | string
    updatedAt?: DateTimeFilter<"Listing"> | Date | string
    bookings?: BookingListRelationFilter
    reviews?: ReviewListRelationFilter
    selectedMainCategories?: MainCategoryOptionListRelationFilter
    selectedSubCategories?: SubCategoryOptionListRelationFilter
    selectedSpecificItems?: SpecificItemOptionListRelationFilter
  }, "id">

  export type ListingOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    main_image?: SortOrderInput | SortOrder
    sub_images?: SortOrder
    agegroup?: SortOrder
    location?: SortOrder
    facilities?: SortOrder
    operatingHours?: SortOrder
    isActive?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ListingCountOrderByAggregateInput
    _avg?: ListingAvgOrderByAggregateInput
    _max?: ListingMaxOrderByAggregateInput
    _min?: ListingMinOrderByAggregateInput
    _sum?: ListingSumOrderByAggregateInput
  }

  export type ListingScalarWhereWithAggregatesInput = {
    AND?: ListingScalarWhereWithAggregatesInput | ListingScalarWhereWithAggregatesInput[]
    OR?: ListingScalarWhereWithAggregatesInput[]
    NOT?: ListingScalarWhereWithAggregatesInput | ListingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Listing"> | number
    name?: StringNullableWithAggregatesFilter<"Listing"> | string | null
    price?: DecimalNullableWithAggregatesFilter<"Listing"> | Decimal | DecimalJsLike | number | string | null
    main_image?: StringNullableWithAggregatesFilter<"Listing"> | string | null
    sub_images?: StringNullableListFilter<"Listing">
    agegroup?: StringNullableListFilter<"Listing">
    location?: StringNullableListFilter<"Listing">
    facilities?: StringNullableListFilter<"Listing">
    operatingHours?: StringNullableListFilter<"Listing">
    isActive?: BoolWithAggregatesFilter<"Listing"> | boolean
    description?: StringNullableWithAggregatesFilter<"Listing"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Listing"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Listing"> | Date | string
  }

  export type reviewWhereInput = {
    AND?: reviewWhereInput | reviewWhereInput[]
    OR?: reviewWhereInput[]
    NOT?: reviewWhereInput | reviewWhereInput[]
    id?: IntFilter<"review"> | number
    userId?: IntFilter<"review"> | number
    listingId?: IntNullableFilter<"review"> | number | null
    rating?: IntFilter<"review"> | number
    status?: EnumreviewStatusNullableFilter<"review"> | $Enums.reviewStatus | null
    comment?: StringNullableFilter<"review"> | string | null
    createdAt?: DateTimeFilter<"review"> | Date | string
    updatedAt?: DateTimeFilter<"review"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    listing?: XOR<ListingNullableScalarRelationFilter, ListingWhereInput> | null
    booking?: XOR<BookingNullableScalarRelationFilter, BookingWhereInput> | null
  }

  export type reviewOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    listingId?: SortOrderInput | SortOrder
    rating?: SortOrder
    status?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    listing?: ListingOrderByWithRelationInput
    booking?: BookingOrderByWithRelationInput
  }

  export type reviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: reviewWhereInput | reviewWhereInput[]
    OR?: reviewWhereInput[]
    NOT?: reviewWhereInput | reviewWhereInput[]
    userId?: IntFilter<"review"> | number
    listingId?: IntNullableFilter<"review"> | number | null
    rating?: IntFilter<"review"> | number
    status?: EnumreviewStatusNullableFilter<"review"> | $Enums.reviewStatus | null
    comment?: StringNullableFilter<"review"> | string | null
    createdAt?: DateTimeFilter<"review"> | Date | string
    updatedAt?: DateTimeFilter<"review"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    listing?: XOR<ListingNullableScalarRelationFilter, ListingWhereInput> | null
    booking?: XOR<BookingNullableScalarRelationFilter, BookingWhereInput> | null
  }, "id">

  export type reviewOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    listingId?: SortOrderInput | SortOrder
    rating?: SortOrder
    status?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: reviewCountOrderByAggregateInput
    _avg?: reviewAvgOrderByAggregateInput
    _max?: reviewMaxOrderByAggregateInput
    _min?: reviewMinOrderByAggregateInput
    _sum?: reviewSumOrderByAggregateInput
  }

  export type reviewScalarWhereWithAggregatesInput = {
    AND?: reviewScalarWhereWithAggregatesInput | reviewScalarWhereWithAggregatesInput[]
    OR?: reviewScalarWhereWithAggregatesInput[]
    NOT?: reviewScalarWhereWithAggregatesInput | reviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"review"> | number
    userId?: IntWithAggregatesFilter<"review"> | number
    listingId?: IntNullableWithAggregatesFilter<"review"> | number | null
    rating?: IntWithAggregatesFilter<"review"> | number
    status?: EnumreviewStatusNullableWithAggregatesFilter<"review"> | $Enums.reviewStatus | null
    comment?: StringNullableWithAggregatesFilter<"review"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"review"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"review"> | Date | string
  }

  export type BookingWhereInput = {
    AND?: BookingWhereInput | BookingWhereInput[]
    OR?: BookingWhereInput[]
    NOT?: BookingWhereInput | BookingWhereInput[]
    id?: IntFilter<"Booking"> | number
    userId?: IntFilter<"Booking"> | number
    listingId?: IntNullableFilter<"Booking"> | number | null
    bookingDate?: DateTimeNullableFilter<"Booking"> | Date | string | null
    booking_hours?: StringNullableFilter<"Booking"> | string | null
    additionalNote?: StringNullableFilter<"Booking"> | string | null
    ageGroup?: StringNullableFilter<"Booking"> | string | null
    numberOfPersons?: IntNullableFilter<"Booking"> | number | null
    paymentMethod?: EnumBookingPaymentMethodNullableFilter<"Booking"> | $Enums.BookingPaymentMethod | null
    status?: EnumBookingStatusNullableFilter<"Booking"> | $Enums.BookingStatus | null
    review_id?: IntNullableFilter<"Booking"> | number | null
    createdAt?: DateTimeFilter<"Booking"> | Date | string
    updatedAt?: DateTimeFilter<"Booking"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    listing?: XOR<ListingNullableScalarRelationFilter, ListingWhereInput> | null
    review?: XOR<ReviewNullableScalarRelationFilter, reviewWhereInput> | null
    reward?: XOR<RewardNullableScalarRelationFilter, RewardWhereInput> | null
  }

  export type BookingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    listingId?: SortOrderInput | SortOrder
    bookingDate?: SortOrderInput | SortOrder
    booking_hours?: SortOrderInput | SortOrder
    additionalNote?: SortOrderInput | SortOrder
    ageGroup?: SortOrderInput | SortOrder
    numberOfPersons?: SortOrderInput | SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    review_id?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    listing?: ListingOrderByWithRelationInput
    review?: reviewOrderByWithRelationInput
    reward?: RewardOrderByWithRelationInput
  }

  export type BookingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    review_id?: number
    AND?: BookingWhereInput | BookingWhereInput[]
    OR?: BookingWhereInput[]
    NOT?: BookingWhereInput | BookingWhereInput[]
    userId?: IntFilter<"Booking"> | number
    listingId?: IntNullableFilter<"Booking"> | number | null
    bookingDate?: DateTimeNullableFilter<"Booking"> | Date | string | null
    booking_hours?: StringNullableFilter<"Booking"> | string | null
    additionalNote?: StringNullableFilter<"Booking"> | string | null
    ageGroup?: StringNullableFilter<"Booking"> | string | null
    numberOfPersons?: IntNullableFilter<"Booking"> | number | null
    paymentMethod?: EnumBookingPaymentMethodNullableFilter<"Booking"> | $Enums.BookingPaymentMethod | null
    status?: EnumBookingStatusNullableFilter<"Booking"> | $Enums.BookingStatus | null
    createdAt?: DateTimeFilter<"Booking"> | Date | string
    updatedAt?: DateTimeFilter<"Booking"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    listing?: XOR<ListingNullableScalarRelationFilter, ListingWhereInput> | null
    review?: XOR<ReviewNullableScalarRelationFilter, reviewWhereInput> | null
    reward?: XOR<RewardNullableScalarRelationFilter, RewardWhereInput> | null
  }, "id" | "review_id">

  export type BookingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    listingId?: SortOrderInput | SortOrder
    bookingDate?: SortOrderInput | SortOrder
    booking_hours?: SortOrderInput | SortOrder
    additionalNote?: SortOrderInput | SortOrder
    ageGroup?: SortOrderInput | SortOrder
    numberOfPersons?: SortOrderInput | SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    review_id?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookingCountOrderByAggregateInput
    _avg?: BookingAvgOrderByAggregateInput
    _max?: BookingMaxOrderByAggregateInput
    _min?: BookingMinOrderByAggregateInput
    _sum?: BookingSumOrderByAggregateInput
  }

  export type BookingScalarWhereWithAggregatesInput = {
    AND?: BookingScalarWhereWithAggregatesInput | BookingScalarWhereWithAggregatesInput[]
    OR?: BookingScalarWhereWithAggregatesInput[]
    NOT?: BookingScalarWhereWithAggregatesInput | BookingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Booking"> | number
    userId?: IntWithAggregatesFilter<"Booking"> | number
    listingId?: IntNullableWithAggregatesFilter<"Booking"> | number | null
    bookingDate?: DateTimeNullableWithAggregatesFilter<"Booking"> | Date | string | null
    booking_hours?: StringNullableWithAggregatesFilter<"Booking"> | string | null
    additionalNote?: StringNullableWithAggregatesFilter<"Booking"> | string | null
    ageGroup?: StringNullableWithAggregatesFilter<"Booking"> | string | null
    numberOfPersons?: IntNullableWithAggregatesFilter<"Booking"> | number | null
    paymentMethod?: EnumBookingPaymentMethodNullableWithAggregatesFilter<"Booking"> | $Enums.BookingPaymentMethod | null
    status?: EnumBookingStatusNullableWithAggregatesFilter<"Booking"> | $Enums.BookingStatus | null
    review_id?: IntNullableWithAggregatesFilter<"Booking"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
  }

  export type RewardWhereInput = {
    AND?: RewardWhereInput | RewardWhereInput[]
    OR?: RewardWhereInput[]
    NOT?: RewardWhereInput | RewardWhereInput[]
    id?: IntFilter<"Reward"> | number
    userId?: IntFilter<"Reward"> | number
    points?: IntNullableFilter<"Reward"> | number | null
    description?: StringNullableFilter<"Reward"> | string | null
    category?: Enumreward_categoryNullableFilter<"Reward"> | $Enums.reward_category | null
    bookingId?: IntNullableFilter<"Reward"> | number | null
    createdAt?: DateTimeFilter<"Reward"> | Date | string
    updatedAt?: DateTimeFilter<"Reward"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    booking?: XOR<BookingNullableScalarRelationFilter, BookingWhereInput> | null
  }

  export type RewardOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    points?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    bookingId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    booking?: BookingOrderByWithRelationInput
  }

  export type RewardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    bookingId?: number
    AND?: RewardWhereInput | RewardWhereInput[]
    OR?: RewardWhereInput[]
    NOT?: RewardWhereInput | RewardWhereInput[]
    userId?: IntFilter<"Reward"> | number
    points?: IntNullableFilter<"Reward"> | number | null
    description?: StringNullableFilter<"Reward"> | string | null
    category?: Enumreward_categoryNullableFilter<"Reward"> | $Enums.reward_category | null
    createdAt?: DateTimeFilter<"Reward"> | Date | string
    updatedAt?: DateTimeFilter<"Reward"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    booking?: XOR<BookingNullableScalarRelationFilter, BookingWhereInput> | null
  }, "id" | "bookingId">

  export type RewardOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    points?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    bookingId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RewardCountOrderByAggregateInput
    _avg?: RewardAvgOrderByAggregateInput
    _max?: RewardMaxOrderByAggregateInput
    _min?: RewardMinOrderByAggregateInput
    _sum?: RewardSumOrderByAggregateInput
  }

  export type RewardScalarWhereWithAggregatesInput = {
    AND?: RewardScalarWhereWithAggregatesInput | RewardScalarWhereWithAggregatesInput[]
    OR?: RewardScalarWhereWithAggregatesInput[]
    NOT?: RewardScalarWhereWithAggregatesInput | RewardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Reward"> | number
    userId?: IntWithAggregatesFilter<"Reward"> | number
    points?: IntNullableWithAggregatesFilter<"Reward"> | number | null
    description?: StringNullableWithAggregatesFilter<"Reward"> | string | null
    category?: Enumreward_categoryNullableWithAggregatesFilter<"Reward"> | $Enums.reward_category | null
    bookingId?: IntNullableWithAggregatesFilter<"Reward"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Reward"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Reward"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    link?: StringNullableFilter<"Notification"> | string | null
    entityId?: StringNullableFilter<"Notification"> | string | null
    entityType?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    link?: SortOrderInput | SortOrder
    entityId?: SortOrderInput | SortOrder
    entityType?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    link?: StringNullableFilter<"Notification"> | string | null
    entityId?: StringNullableFilter<"Notification"> | string | null
    entityType?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    link?: SortOrderInput | SortOrder
    entityId?: SortOrderInput | SortOrder
    entityType?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    userId?: IntWithAggregatesFilter<"Notification"> | number
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    link?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    entityId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    entityType?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: EnumAuditLogActionFilter<"AuditLog"> | $Enums.AuditLogAction
    entityName?: StringNullableFilter<"AuditLog"> | string | null
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    description?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entityName?: SortOrderInput | SortOrder
    entityId?: SortOrderInput | SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: EnumAuditLogActionFilter<"AuditLog"> | $Enums.AuditLogAction
    entityName?: StringNullableFilter<"AuditLog"> | string | null
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    description?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entityName?: SortOrderInput | SortOrder
    entityId?: SortOrderInput | SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _avg?: AuditLogAvgOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
    _sum?: AuditLogSumOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AuditLog"> | number
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
    userId?: IntNullableWithAggregatesFilter<"AuditLog"> | number | null
    action?: EnumAuditLogActionWithAggregatesFilter<"AuditLog"> | $Enums.AuditLogAction
    entityName?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    entityId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    newValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    description?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
  }

  export type UserCreateInput = {
    fname?: string | null
    lname?: string | null
    email: string
    uid: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingCreateNestedManyWithoutUserInput
    rewards?: RewardCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    reviews?: reviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    email: string
    uid: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    rewards?: RewardUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUpdateManyWithoutUserNestedInput
    rewards?: RewardUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    reviews?: reviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    rewards?: RewardUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    email: string
    uid: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MainCategoryOptionCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subCategories?: SubCategoryOptionCreateNestedManyWithoutMainCategoryInput
    specificItems?: SpecificItemOptionCreateNestedManyWithoutMainCategoryInput
    listings?: ListingCreateNestedManyWithoutSelectedMainCategoriesInput
  }

  export type MainCategoryOptionUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subCategories?: SubCategoryOptionUncheckedCreateNestedManyWithoutMainCategoryInput
    specificItems?: SpecificItemOptionUncheckedCreateNestedManyWithoutMainCategoryInput
    listings?: ListingUncheckedCreateNestedManyWithoutSelectedMainCategoriesInput
  }

  export type MainCategoryOptionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategories?: SubCategoryOptionUpdateManyWithoutMainCategoryNestedInput
    specificItems?: SpecificItemOptionUpdateManyWithoutMainCategoryNestedInput
    listings?: ListingUpdateManyWithoutSelectedMainCategoriesNestedInput
  }

  export type MainCategoryOptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategories?: SubCategoryOptionUncheckedUpdateManyWithoutMainCategoryNestedInput
    specificItems?: SpecificItemOptionUncheckedUpdateManyWithoutMainCategoryNestedInput
    listings?: ListingUncheckedUpdateManyWithoutSelectedMainCategoriesNestedInput
  }

  export type MainCategoryOptionCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MainCategoryOptionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MainCategoryOptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubCategoryOptionCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    listings?: ListingCreateNestedManyWithoutSelectedSubCategoriesInput
    mainCategory?: MainCategoryOptionCreateNestedOneWithoutSubCategoriesInput
    specificItems?: SpecificItemOptionCreateNestedManyWithoutSubCategoryInput
  }

  export type SubCategoryOptionUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mainCategoryId?: number | null
    listings?: ListingUncheckedCreateNestedManyWithoutSelectedSubCategoriesInput
    specificItems?: SpecificItemOptionUncheckedCreateNestedManyWithoutSubCategoryInput
  }

  export type SubCategoryOptionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    listings?: ListingUpdateManyWithoutSelectedSubCategoriesNestedInput
    mainCategory?: MainCategoryOptionUpdateOneWithoutSubCategoriesNestedInput
    specificItems?: SpecificItemOptionUpdateManyWithoutSubCategoryNestedInput
  }

  export type SubCategoryOptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mainCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    listings?: ListingUncheckedUpdateManyWithoutSelectedSubCategoriesNestedInput
    specificItems?: SpecificItemOptionUncheckedUpdateManyWithoutSubCategoryNestedInput
  }

  export type SubCategoryOptionCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mainCategoryId?: number | null
  }

  export type SubCategoryOptionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubCategoryOptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mainCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpecificItemOptionCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    listings?: ListingCreateNestedManyWithoutSelectedSpecificItemsInput
    subCategory?: SubCategoryOptionCreateNestedOneWithoutSpecificItemsInput
    mainCategory?: MainCategoryOptionCreateNestedOneWithoutSpecificItemsInput
  }

  export type SpecificItemOptionUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subCategoryId?: number | null
    mainCategoryId?: number | null
    listings?: ListingUncheckedCreateNestedManyWithoutSelectedSpecificItemsInput
  }

  export type SpecificItemOptionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    listings?: ListingUpdateManyWithoutSelectedSpecificItemsNestedInput
    subCategory?: SubCategoryOptionUpdateOneWithoutSpecificItemsNestedInput
    mainCategory?: MainCategoryOptionUpdateOneWithoutSpecificItemsNestedInput
  }

  export type SpecificItemOptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    mainCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    listings?: ListingUncheckedUpdateManyWithoutSelectedSpecificItemsNestedInput
  }

  export type SpecificItemOptionCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subCategoryId?: number | null
    mainCategoryId?: number | null
  }

  export type SpecificItemOptionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpecificItemOptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    mainCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ListingCreateInput = {
    name?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    main_image?: string | null
    sub_images?: ListingCreatesub_imagesInput | string[]
    agegroup?: ListingCreateagegroupInput | string[]
    location?: ListingCreatelocationInput | string[]
    facilities?: ListingCreatefacilitiesInput | string[]
    operatingHours?: ListingCreateoperatingHoursInput | string[]
    isActive?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingCreateNestedManyWithoutListingInput
    reviews?: reviewCreateNestedManyWithoutListingInput
    selectedMainCategories?: MainCategoryOptionCreateNestedManyWithoutListingsInput
    selectedSubCategories?: SubCategoryOptionCreateNestedManyWithoutListingsInput
    selectedSpecificItems?: SpecificItemOptionCreateNestedManyWithoutListingsInput
  }

  export type ListingUncheckedCreateInput = {
    id?: number
    name?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    main_image?: string | null
    sub_images?: ListingCreatesub_imagesInput | string[]
    agegroup?: ListingCreateagegroupInput | string[]
    location?: ListingCreatelocationInput | string[]
    facilities?: ListingCreatefacilitiesInput | string[]
    operatingHours?: ListingCreateoperatingHoursInput | string[]
    isActive?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutListingInput
    reviews?: reviewUncheckedCreateNestedManyWithoutListingInput
    selectedMainCategories?: MainCategoryOptionUncheckedCreateNestedManyWithoutListingsInput
    selectedSubCategories?: SubCategoryOptionUncheckedCreateNestedManyWithoutListingsInput
    selectedSpecificItems?: SpecificItemOptionUncheckedCreateNestedManyWithoutListingsInput
  }

  export type ListingUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUpdateManyWithoutListingNestedInput
    reviews?: reviewUpdateManyWithoutListingNestedInput
    selectedMainCategories?: MainCategoryOptionUpdateManyWithoutListingsNestedInput
    selectedSubCategories?: SubCategoryOptionUpdateManyWithoutListingsNestedInput
    selectedSpecificItems?: SpecificItemOptionUpdateManyWithoutListingsNestedInput
  }

  export type ListingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutListingNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutListingNestedInput
    selectedMainCategories?: MainCategoryOptionUncheckedUpdateManyWithoutListingsNestedInput
    selectedSubCategories?: SubCategoryOptionUncheckedUpdateManyWithoutListingsNestedInput
    selectedSpecificItems?: SpecificItemOptionUncheckedUpdateManyWithoutListingsNestedInput
  }

  export type ListingCreateManyInput = {
    id?: number
    name?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    main_image?: string | null
    sub_images?: ListingCreatesub_imagesInput | string[]
    agegroup?: ListingCreateagegroupInput | string[]
    location?: ListingCreatelocationInput | string[]
    facilities?: ListingCreatefacilitiesInput | string[]
    operatingHours?: ListingCreateoperatingHoursInput | string[]
    isActive?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ListingUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reviewCreateInput = {
    rating: number
    status?: $Enums.reviewStatus | null
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
    listing?: ListingCreateNestedOneWithoutReviewsInput
    booking?: BookingCreateNestedOneWithoutReviewInput
  }

  export type reviewUncheckedCreateInput = {
    id?: number
    userId: number
    listingId?: number | null
    rating: number
    status?: $Enums.reviewStatus | null
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    booking?: BookingUncheckedCreateNestedOneWithoutReviewInput
  }

  export type reviewUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    status?: NullableEnumreviewStatusFieldUpdateOperationsInput | $Enums.reviewStatus | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    listing?: ListingUpdateOneWithoutReviewsNestedInput
    booking?: BookingUpdateOneWithoutReviewNestedInput
  }

  export type reviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    listingId?: NullableIntFieldUpdateOperationsInput | number | null
    rating?: IntFieldUpdateOperationsInput | number
    status?: NullableEnumreviewStatusFieldUpdateOperationsInput | $Enums.reviewStatus | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    booking?: BookingUncheckedUpdateOneWithoutReviewNestedInput
  }

  export type reviewCreateManyInput = {
    id?: number
    userId: number
    listingId?: number | null
    rating: number
    status?: $Enums.reviewStatus | null
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type reviewUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    status?: NullableEnumreviewStatusFieldUpdateOperationsInput | $Enums.reviewStatus | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    listingId?: NullableIntFieldUpdateOperationsInput | number | null
    rating?: IntFieldUpdateOperationsInput | number
    status?: NullableEnumreviewStatusFieldUpdateOperationsInput | $Enums.reviewStatus | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCreateInput = {
    bookingDate?: Date | string | null
    booking_hours?: string | null
    additionalNote?: string | null
    ageGroup?: string | null
    numberOfPersons?: number | null
    paymentMethod?: $Enums.BookingPaymentMethod | null
    status?: $Enums.BookingStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBookingsInput
    listing?: ListingCreateNestedOneWithoutBookingsInput
    review?: reviewCreateNestedOneWithoutBookingInput
    reward?: RewardCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateInput = {
    id?: number
    userId: number
    listingId?: number | null
    bookingDate?: Date | string | null
    booking_hours?: string | null
    additionalNote?: string | null
    ageGroup?: string | null
    numberOfPersons?: number | null
    paymentMethod?: $Enums.BookingPaymentMethod | null
    status?: $Enums.BookingStatus | null
    review_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reward?: RewardUncheckedCreateNestedOneWithoutBookingInput
  }

  export type BookingUpdateInput = {
    bookingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking_hours?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfPersons?: NullableIntFieldUpdateOperationsInput | number | null
    paymentMethod?: NullableEnumBookingPaymentMethodFieldUpdateOperationsInput | $Enums.BookingPaymentMethod | null
    status?: NullableEnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBookingsNestedInput
    listing?: ListingUpdateOneWithoutBookingsNestedInput
    review?: reviewUpdateOneWithoutBookingNestedInput
    reward?: RewardUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    listingId?: NullableIntFieldUpdateOperationsInput | number | null
    bookingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking_hours?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfPersons?: NullableIntFieldUpdateOperationsInput | number | null
    paymentMethod?: NullableEnumBookingPaymentMethodFieldUpdateOperationsInput | $Enums.BookingPaymentMethod | null
    status?: NullableEnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus | null
    review_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reward?: RewardUncheckedUpdateOneWithoutBookingNestedInput
  }

  export type BookingCreateManyInput = {
    id?: number
    userId: number
    listingId?: number | null
    bookingDate?: Date | string | null
    booking_hours?: string | null
    additionalNote?: string | null
    ageGroup?: string | null
    numberOfPersons?: number | null
    paymentMethod?: $Enums.BookingPaymentMethod | null
    status?: $Enums.BookingStatus | null
    review_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingUpdateManyMutationInput = {
    bookingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking_hours?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfPersons?: NullableIntFieldUpdateOperationsInput | number | null
    paymentMethod?: NullableEnumBookingPaymentMethodFieldUpdateOperationsInput | $Enums.BookingPaymentMethod | null
    status?: NullableEnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    listingId?: NullableIntFieldUpdateOperationsInput | number | null
    bookingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking_hours?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfPersons?: NullableIntFieldUpdateOperationsInput | number | null
    paymentMethod?: NullableEnumBookingPaymentMethodFieldUpdateOperationsInput | $Enums.BookingPaymentMethod | null
    status?: NullableEnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus | null
    review_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardCreateInput = {
    points?: number | null
    description?: string | null
    category?: $Enums.reward_category | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRewardsInput
    booking?: BookingCreateNestedOneWithoutRewardInput
  }

  export type RewardUncheckedCreateInput = {
    id?: number
    userId: number
    points?: number | null
    description?: string | null
    category?: $Enums.reward_category | null
    bookingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RewardUpdateInput = {
    points?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumreward_categoryFieldUpdateOperationsInput | $Enums.reward_category | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRewardsNestedInput
    booking?: BookingUpdateOneWithoutRewardNestedInput
  }

  export type RewardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    points?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumreward_categoryFieldUpdateOperationsInput | $Enums.reward_category | null
    bookingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardCreateManyInput = {
    id?: number
    userId: number
    points?: number | null
    description?: string | null
    category?: $Enums.reward_category | null
    bookingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RewardUpdateManyMutationInput = {
    points?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumreward_categoryFieldUpdateOperationsInput | $Enums.reward_category | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    points?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumreward_categoryFieldUpdateOperationsInput | $Enums.reward_category | null
    bookingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    link?: string | null
    entityId?: string | null
    entityType?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    userId: number
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    link?: string | null
    entityId?: string | null
    entityType?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    userId: number
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    link?: string | null
    entityId?: string | null
    entityType?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    timestamp?: Date | string
    action: $Enums.AuditLogAction
    entityName?: string | null
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: number
    timestamp?: Date | string
    userId?: number | null
    action: $Enums.AuditLogAction
    entityName?: string | null
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type AuditLogUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: EnumAuditLogActionFieldUpdateOperationsInput | $Enums.AuditLogAction
    entityName?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: EnumAuditLogActionFieldUpdateOperationsInput | $Enums.AuditLogAction
    entityName?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogCreateManyInput = {
    id?: number
    timestamp?: Date | string
    userId?: number | null
    action: $Enums.AuditLogAction
    entityName?: string | null
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type AuditLogUpdateManyMutationInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: EnumAuditLogActionFieldUpdateOperationsInput | $Enums.AuditLogAction
    entityName?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: EnumAuditLogActionFieldUpdateOperationsInput | $Enums.AuditLogAction
    entityName?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BookingListRelationFilter = {
    every?: BookingWhereInput
    some?: BookingWhereInput
    none?: BookingWhereInput
  }

  export type RewardListRelationFilter = {
    every?: RewardWhereInput
    some?: RewardWhereInput
    none?: RewardWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: reviewWhereInput
    some?: reviewWhereInput
    none?: reviewWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BookingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RewardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    email?: SortOrder
    uid?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    email?: SortOrder
    uid?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    email?: SortOrder
    uid?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SubCategoryOptionListRelationFilter = {
    every?: SubCategoryOptionWhereInput
    some?: SubCategoryOptionWhereInput
    none?: SubCategoryOptionWhereInput
  }

  export type SpecificItemOptionListRelationFilter = {
    every?: SpecificItemOptionWhereInput
    some?: SpecificItemOptionWhereInput
    none?: SpecificItemOptionWhereInput
  }

  export type ListingListRelationFilter = {
    every?: ListingWhereInput
    some?: ListingWhereInput
    none?: ListingWhereInput
  }

  export type SubCategoryOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpecificItemOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ListingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MainCategoryOptionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MainCategoryOptionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MainCategoryOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MainCategoryOptionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MainCategoryOptionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type MainCategoryOptionNullableScalarRelationFilter = {
    is?: MainCategoryOptionWhereInput | null
    isNot?: MainCategoryOptionWhereInput | null
  }

  export type SubCategoryOptionMainCategoryIdNameCompoundUniqueInput = {
    mainCategoryId: number
    name: string
  }

  export type SubCategoryOptionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mainCategoryId?: SortOrder
  }

  export type SubCategoryOptionAvgOrderByAggregateInput = {
    id?: SortOrder
    mainCategoryId?: SortOrder
  }

  export type SubCategoryOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mainCategoryId?: SortOrder
  }

  export type SubCategoryOptionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mainCategoryId?: SortOrder
  }

  export type SubCategoryOptionSumOrderByAggregateInput = {
    id?: SortOrder
    mainCategoryId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SubCategoryOptionNullableScalarRelationFilter = {
    is?: SubCategoryOptionWhereInput | null
    isNot?: SubCategoryOptionWhereInput | null
  }

  export type SpecificItemOptionSubCategoryIdNameCompoundUniqueInput = {
    subCategoryId: number
    name: string
  }

  export type SpecificItemOptionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subCategoryId?: SortOrder
    mainCategoryId?: SortOrder
  }

  export type SpecificItemOptionAvgOrderByAggregateInput = {
    id?: SortOrder
    subCategoryId?: SortOrder
    mainCategoryId?: SortOrder
  }

  export type SpecificItemOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subCategoryId?: SortOrder
    mainCategoryId?: SortOrder
  }

  export type SpecificItemOptionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subCategoryId?: SortOrder
    mainCategoryId?: SortOrder
  }

  export type SpecificItemOptionSumOrderByAggregateInput = {
    id?: SortOrder
    subCategoryId?: SortOrder
    mainCategoryId?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MainCategoryOptionListRelationFilter = {
    every?: MainCategoryOptionWhereInput
    some?: MainCategoryOptionWhereInput
    none?: MainCategoryOptionWhereInput
  }

  export type MainCategoryOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ListingCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    main_image?: SortOrder
    sub_images?: SortOrder
    agegroup?: SortOrder
    location?: SortOrder
    facilities?: SortOrder
    operatingHours?: SortOrder
    isActive?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ListingAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type ListingMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    main_image?: SortOrder
    isActive?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ListingMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    main_image?: SortOrder
    isActive?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ListingSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumreviewStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.reviewStatus | EnumreviewStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.reviewStatus[] | ListEnumreviewStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.reviewStatus[] | ListEnumreviewStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumreviewStatusNullableFilter<$PrismaModel> | $Enums.reviewStatus | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ListingNullableScalarRelationFilter = {
    is?: ListingWhereInput | null
    isNot?: ListingWhereInput | null
  }

  export type BookingNullableScalarRelationFilter = {
    is?: BookingWhereInput | null
    isNot?: BookingWhereInput | null
  }

  export type reviewCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    listingId?: SortOrder
    rating?: SortOrder
    status?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type reviewAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    listingId?: SortOrder
    rating?: SortOrder
  }

  export type reviewMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    listingId?: SortOrder
    rating?: SortOrder
    status?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type reviewMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    listingId?: SortOrder
    rating?: SortOrder
    status?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type reviewSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    listingId?: SortOrder
    rating?: SortOrder
  }

  export type EnumreviewStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.reviewStatus | EnumreviewStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.reviewStatus[] | ListEnumreviewStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.reviewStatus[] | ListEnumreviewStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumreviewStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.reviewStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumreviewStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumreviewStatusNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumBookingPaymentMethodNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingPaymentMethod | EnumBookingPaymentMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.BookingPaymentMethod[] | ListEnumBookingPaymentMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BookingPaymentMethod[] | ListEnumBookingPaymentMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBookingPaymentMethodNullableFilter<$PrismaModel> | $Enums.BookingPaymentMethod | null
  }

  export type EnumBookingStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBookingStatusNullableFilter<$PrismaModel> | $Enums.BookingStatus | null
  }

  export type ReviewNullableScalarRelationFilter = {
    is?: reviewWhereInput | null
    isNot?: reviewWhereInput | null
  }

  export type RewardNullableScalarRelationFilter = {
    is?: RewardWhereInput | null
    isNot?: RewardWhereInput | null
  }

  export type BookingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    listingId?: SortOrder
    bookingDate?: SortOrder
    booking_hours?: SortOrder
    additionalNote?: SortOrder
    ageGroup?: SortOrder
    numberOfPersons?: SortOrder
    paymentMethod?: SortOrder
    status?: SortOrder
    review_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    listingId?: SortOrder
    numberOfPersons?: SortOrder
    review_id?: SortOrder
  }

  export type BookingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    listingId?: SortOrder
    bookingDate?: SortOrder
    booking_hours?: SortOrder
    additionalNote?: SortOrder
    ageGroup?: SortOrder
    numberOfPersons?: SortOrder
    paymentMethod?: SortOrder
    status?: SortOrder
    review_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    listingId?: SortOrder
    bookingDate?: SortOrder
    booking_hours?: SortOrder
    additionalNote?: SortOrder
    ageGroup?: SortOrder
    numberOfPersons?: SortOrder
    paymentMethod?: SortOrder
    status?: SortOrder
    review_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    listingId?: SortOrder
    numberOfPersons?: SortOrder
    review_id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumBookingPaymentMethodNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingPaymentMethod | EnumBookingPaymentMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.BookingPaymentMethod[] | ListEnumBookingPaymentMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BookingPaymentMethod[] | ListEnumBookingPaymentMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBookingPaymentMethodNullableWithAggregatesFilter<$PrismaModel> | $Enums.BookingPaymentMethod | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBookingPaymentMethodNullableFilter<$PrismaModel>
    _max?: NestedEnumBookingPaymentMethodNullableFilter<$PrismaModel>
  }

  export type EnumBookingStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBookingStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.BookingStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBookingStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumBookingStatusNullableFilter<$PrismaModel>
  }

  export type Enumreward_categoryNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.reward_category | Enumreward_categoryFieldRefInput<$PrismaModel> | null
    in?: $Enums.reward_category[] | ListEnumreward_categoryFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.reward_category[] | ListEnumreward_categoryFieldRefInput<$PrismaModel> | null
    not?: NestedEnumreward_categoryNullableFilter<$PrismaModel> | $Enums.reward_category | null
  }

  export type RewardCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    points?: SortOrder
    description?: SortOrder
    category?: SortOrder
    bookingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RewardAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    points?: SortOrder
    bookingId?: SortOrder
  }

  export type RewardMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    points?: SortOrder
    description?: SortOrder
    category?: SortOrder
    bookingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RewardMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    points?: SortOrder
    description?: SortOrder
    category?: SortOrder
    bookingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RewardSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    points?: SortOrder
    bookingId?: SortOrder
  }

  export type Enumreward_categoryNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.reward_category | Enumreward_categoryFieldRefInput<$PrismaModel> | null
    in?: $Enums.reward_category[] | ListEnumreward_categoryFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.reward_category[] | ListEnumreward_categoryFieldRefInput<$PrismaModel> | null
    not?: NestedEnumreward_categoryNullableWithAggregatesFilter<$PrismaModel> | $Enums.reward_category | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumreward_categoryNullableFilter<$PrismaModel>
    _max?: NestedEnumreward_categoryNullableFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    link?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    link?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    link?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumAuditLogActionFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditLogAction | EnumAuditLogActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditLogAction[] | ListEnumAuditLogActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditLogAction[] | ListEnumAuditLogActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditLogActionFilter<$PrismaModel> | $Enums.AuditLogAction
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entityName?: SortOrder
    entityId?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type AuditLogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entityName?: SortOrder
    entityId?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entityName?: SortOrder
    entityId?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type AuditLogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumAuditLogActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditLogAction | EnumAuditLogActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditLogAction[] | ListEnumAuditLogActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditLogAction[] | ListEnumAuditLogActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditLogActionWithAggregatesFilter<$PrismaModel> | $Enums.AuditLogAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuditLogActionFilter<$PrismaModel>
    _max?: NestedEnumAuditLogActionFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type BookingCreateNestedManyWithoutUserInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type RewardCreateNestedManyWithoutUserInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type reviewCreateNestedManyWithoutUserInput = {
    create?: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput> | reviewCreateWithoutUserInput[] | reviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutUserInput | reviewCreateOrConnectWithoutUserInput[]
    createMany?: reviewCreateManyUserInputEnvelope
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
  }

  export type BookingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type RewardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type reviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput> | reviewCreateWithoutUserInput[] | reviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutUserInput | reviewCreateOrConnectWithoutUserInput[]
    createMany?: reviewCreateManyUserInputEnvelope
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BookingUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutUserInput | BookingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutUserInput | BookingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutUserInput | BookingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type RewardUpdateManyWithoutUserNestedInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    upsert?: RewardUpsertWithWhereUniqueWithoutUserInput | RewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    set?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    disconnect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    delete?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    update?: RewardUpdateWithWhereUniqueWithoutUserInput | RewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RewardUpdateManyWithWhereWithoutUserInput | RewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RewardScalarWhereInput | RewardScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type reviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput> | reviewCreateWithoutUserInput[] | reviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutUserInput | reviewCreateOrConnectWithoutUserInput[]
    upsert?: reviewUpsertWithWhereUniqueWithoutUserInput | reviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reviewCreateManyUserInputEnvelope
    set?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    disconnect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    delete?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    update?: reviewUpdateWithWhereUniqueWithoutUserInput | reviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reviewUpdateManyWithWhereWithoutUserInput | reviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reviewScalarWhereInput | reviewScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BookingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutUserInput | BookingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutUserInput | BookingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutUserInput | BookingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type RewardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput> | RewardCreateWithoutUserInput[] | RewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RewardCreateOrConnectWithoutUserInput | RewardCreateOrConnectWithoutUserInput[]
    upsert?: RewardUpsertWithWhereUniqueWithoutUserInput | RewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RewardCreateManyUserInputEnvelope
    set?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    disconnect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    delete?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    connect?: RewardWhereUniqueInput | RewardWhereUniqueInput[]
    update?: RewardUpdateWithWhereUniqueWithoutUserInput | RewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RewardUpdateManyWithWhereWithoutUserInput | RewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RewardScalarWhereInput | RewardScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type reviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput> | reviewCreateWithoutUserInput[] | reviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutUserInput | reviewCreateOrConnectWithoutUserInput[]
    upsert?: reviewUpsertWithWhereUniqueWithoutUserInput | reviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reviewCreateManyUserInputEnvelope
    set?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    disconnect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    delete?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    update?: reviewUpdateWithWhereUniqueWithoutUserInput | reviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reviewUpdateManyWithWhereWithoutUserInput | reviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reviewScalarWhereInput | reviewScalarWhereInput[]
  }

  export type SubCategoryOptionCreateNestedManyWithoutMainCategoryInput = {
    create?: XOR<SubCategoryOptionCreateWithoutMainCategoryInput, SubCategoryOptionUncheckedCreateWithoutMainCategoryInput> | SubCategoryOptionCreateWithoutMainCategoryInput[] | SubCategoryOptionUncheckedCreateWithoutMainCategoryInput[]
    connectOrCreate?: SubCategoryOptionCreateOrConnectWithoutMainCategoryInput | SubCategoryOptionCreateOrConnectWithoutMainCategoryInput[]
    createMany?: SubCategoryOptionCreateManyMainCategoryInputEnvelope
    connect?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
  }

  export type SpecificItemOptionCreateNestedManyWithoutMainCategoryInput = {
    create?: XOR<SpecificItemOptionCreateWithoutMainCategoryInput, SpecificItemOptionUncheckedCreateWithoutMainCategoryInput> | SpecificItemOptionCreateWithoutMainCategoryInput[] | SpecificItemOptionUncheckedCreateWithoutMainCategoryInput[]
    connectOrCreate?: SpecificItemOptionCreateOrConnectWithoutMainCategoryInput | SpecificItemOptionCreateOrConnectWithoutMainCategoryInput[]
    createMany?: SpecificItemOptionCreateManyMainCategoryInputEnvelope
    connect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
  }

  export type ListingCreateNestedManyWithoutSelectedMainCategoriesInput = {
    create?: XOR<ListingCreateWithoutSelectedMainCategoriesInput, ListingUncheckedCreateWithoutSelectedMainCategoriesInput> | ListingCreateWithoutSelectedMainCategoriesInput[] | ListingUncheckedCreateWithoutSelectedMainCategoriesInput[]
    connectOrCreate?: ListingCreateOrConnectWithoutSelectedMainCategoriesInput | ListingCreateOrConnectWithoutSelectedMainCategoriesInput[]
    connect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
  }

  export type SubCategoryOptionUncheckedCreateNestedManyWithoutMainCategoryInput = {
    create?: XOR<SubCategoryOptionCreateWithoutMainCategoryInput, SubCategoryOptionUncheckedCreateWithoutMainCategoryInput> | SubCategoryOptionCreateWithoutMainCategoryInput[] | SubCategoryOptionUncheckedCreateWithoutMainCategoryInput[]
    connectOrCreate?: SubCategoryOptionCreateOrConnectWithoutMainCategoryInput | SubCategoryOptionCreateOrConnectWithoutMainCategoryInput[]
    createMany?: SubCategoryOptionCreateManyMainCategoryInputEnvelope
    connect?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
  }

  export type SpecificItemOptionUncheckedCreateNestedManyWithoutMainCategoryInput = {
    create?: XOR<SpecificItemOptionCreateWithoutMainCategoryInput, SpecificItemOptionUncheckedCreateWithoutMainCategoryInput> | SpecificItemOptionCreateWithoutMainCategoryInput[] | SpecificItemOptionUncheckedCreateWithoutMainCategoryInput[]
    connectOrCreate?: SpecificItemOptionCreateOrConnectWithoutMainCategoryInput | SpecificItemOptionCreateOrConnectWithoutMainCategoryInput[]
    createMany?: SpecificItemOptionCreateManyMainCategoryInputEnvelope
    connect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
  }

  export type ListingUncheckedCreateNestedManyWithoutSelectedMainCategoriesInput = {
    create?: XOR<ListingCreateWithoutSelectedMainCategoriesInput, ListingUncheckedCreateWithoutSelectedMainCategoriesInput> | ListingCreateWithoutSelectedMainCategoriesInput[] | ListingUncheckedCreateWithoutSelectedMainCategoriesInput[]
    connectOrCreate?: ListingCreateOrConnectWithoutSelectedMainCategoriesInput | ListingCreateOrConnectWithoutSelectedMainCategoriesInput[]
    connect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
  }

  export type SubCategoryOptionUpdateManyWithoutMainCategoryNestedInput = {
    create?: XOR<SubCategoryOptionCreateWithoutMainCategoryInput, SubCategoryOptionUncheckedCreateWithoutMainCategoryInput> | SubCategoryOptionCreateWithoutMainCategoryInput[] | SubCategoryOptionUncheckedCreateWithoutMainCategoryInput[]
    connectOrCreate?: SubCategoryOptionCreateOrConnectWithoutMainCategoryInput | SubCategoryOptionCreateOrConnectWithoutMainCategoryInput[]
    upsert?: SubCategoryOptionUpsertWithWhereUniqueWithoutMainCategoryInput | SubCategoryOptionUpsertWithWhereUniqueWithoutMainCategoryInput[]
    createMany?: SubCategoryOptionCreateManyMainCategoryInputEnvelope
    set?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    disconnect?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    delete?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    connect?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    update?: SubCategoryOptionUpdateWithWhereUniqueWithoutMainCategoryInput | SubCategoryOptionUpdateWithWhereUniqueWithoutMainCategoryInput[]
    updateMany?: SubCategoryOptionUpdateManyWithWhereWithoutMainCategoryInput | SubCategoryOptionUpdateManyWithWhereWithoutMainCategoryInput[]
    deleteMany?: SubCategoryOptionScalarWhereInput | SubCategoryOptionScalarWhereInput[]
  }

  export type SpecificItemOptionUpdateManyWithoutMainCategoryNestedInput = {
    create?: XOR<SpecificItemOptionCreateWithoutMainCategoryInput, SpecificItemOptionUncheckedCreateWithoutMainCategoryInput> | SpecificItemOptionCreateWithoutMainCategoryInput[] | SpecificItemOptionUncheckedCreateWithoutMainCategoryInput[]
    connectOrCreate?: SpecificItemOptionCreateOrConnectWithoutMainCategoryInput | SpecificItemOptionCreateOrConnectWithoutMainCategoryInput[]
    upsert?: SpecificItemOptionUpsertWithWhereUniqueWithoutMainCategoryInput | SpecificItemOptionUpsertWithWhereUniqueWithoutMainCategoryInput[]
    createMany?: SpecificItemOptionCreateManyMainCategoryInputEnvelope
    set?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    disconnect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    delete?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    connect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    update?: SpecificItemOptionUpdateWithWhereUniqueWithoutMainCategoryInput | SpecificItemOptionUpdateWithWhereUniqueWithoutMainCategoryInput[]
    updateMany?: SpecificItemOptionUpdateManyWithWhereWithoutMainCategoryInput | SpecificItemOptionUpdateManyWithWhereWithoutMainCategoryInput[]
    deleteMany?: SpecificItemOptionScalarWhereInput | SpecificItemOptionScalarWhereInput[]
  }

  export type ListingUpdateManyWithoutSelectedMainCategoriesNestedInput = {
    create?: XOR<ListingCreateWithoutSelectedMainCategoriesInput, ListingUncheckedCreateWithoutSelectedMainCategoriesInput> | ListingCreateWithoutSelectedMainCategoriesInput[] | ListingUncheckedCreateWithoutSelectedMainCategoriesInput[]
    connectOrCreate?: ListingCreateOrConnectWithoutSelectedMainCategoriesInput | ListingCreateOrConnectWithoutSelectedMainCategoriesInput[]
    upsert?: ListingUpsertWithWhereUniqueWithoutSelectedMainCategoriesInput | ListingUpsertWithWhereUniqueWithoutSelectedMainCategoriesInput[]
    set?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    disconnect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    delete?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    connect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    update?: ListingUpdateWithWhereUniqueWithoutSelectedMainCategoriesInput | ListingUpdateWithWhereUniqueWithoutSelectedMainCategoriesInput[]
    updateMany?: ListingUpdateManyWithWhereWithoutSelectedMainCategoriesInput | ListingUpdateManyWithWhereWithoutSelectedMainCategoriesInput[]
    deleteMany?: ListingScalarWhereInput | ListingScalarWhereInput[]
  }

  export type SubCategoryOptionUncheckedUpdateManyWithoutMainCategoryNestedInput = {
    create?: XOR<SubCategoryOptionCreateWithoutMainCategoryInput, SubCategoryOptionUncheckedCreateWithoutMainCategoryInput> | SubCategoryOptionCreateWithoutMainCategoryInput[] | SubCategoryOptionUncheckedCreateWithoutMainCategoryInput[]
    connectOrCreate?: SubCategoryOptionCreateOrConnectWithoutMainCategoryInput | SubCategoryOptionCreateOrConnectWithoutMainCategoryInput[]
    upsert?: SubCategoryOptionUpsertWithWhereUniqueWithoutMainCategoryInput | SubCategoryOptionUpsertWithWhereUniqueWithoutMainCategoryInput[]
    createMany?: SubCategoryOptionCreateManyMainCategoryInputEnvelope
    set?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    disconnect?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    delete?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    connect?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    update?: SubCategoryOptionUpdateWithWhereUniqueWithoutMainCategoryInput | SubCategoryOptionUpdateWithWhereUniqueWithoutMainCategoryInput[]
    updateMany?: SubCategoryOptionUpdateManyWithWhereWithoutMainCategoryInput | SubCategoryOptionUpdateManyWithWhereWithoutMainCategoryInput[]
    deleteMany?: SubCategoryOptionScalarWhereInput | SubCategoryOptionScalarWhereInput[]
  }

  export type SpecificItemOptionUncheckedUpdateManyWithoutMainCategoryNestedInput = {
    create?: XOR<SpecificItemOptionCreateWithoutMainCategoryInput, SpecificItemOptionUncheckedCreateWithoutMainCategoryInput> | SpecificItemOptionCreateWithoutMainCategoryInput[] | SpecificItemOptionUncheckedCreateWithoutMainCategoryInput[]
    connectOrCreate?: SpecificItemOptionCreateOrConnectWithoutMainCategoryInput | SpecificItemOptionCreateOrConnectWithoutMainCategoryInput[]
    upsert?: SpecificItemOptionUpsertWithWhereUniqueWithoutMainCategoryInput | SpecificItemOptionUpsertWithWhereUniqueWithoutMainCategoryInput[]
    createMany?: SpecificItemOptionCreateManyMainCategoryInputEnvelope
    set?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    disconnect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    delete?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    connect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    update?: SpecificItemOptionUpdateWithWhereUniqueWithoutMainCategoryInput | SpecificItemOptionUpdateWithWhereUniqueWithoutMainCategoryInput[]
    updateMany?: SpecificItemOptionUpdateManyWithWhereWithoutMainCategoryInput | SpecificItemOptionUpdateManyWithWhereWithoutMainCategoryInput[]
    deleteMany?: SpecificItemOptionScalarWhereInput | SpecificItemOptionScalarWhereInput[]
  }

  export type ListingUncheckedUpdateManyWithoutSelectedMainCategoriesNestedInput = {
    create?: XOR<ListingCreateWithoutSelectedMainCategoriesInput, ListingUncheckedCreateWithoutSelectedMainCategoriesInput> | ListingCreateWithoutSelectedMainCategoriesInput[] | ListingUncheckedCreateWithoutSelectedMainCategoriesInput[]
    connectOrCreate?: ListingCreateOrConnectWithoutSelectedMainCategoriesInput | ListingCreateOrConnectWithoutSelectedMainCategoriesInput[]
    upsert?: ListingUpsertWithWhereUniqueWithoutSelectedMainCategoriesInput | ListingUpsertWithWhereUniqueWithoutSelectedMainCategoriesInput[]
    set?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    disconnect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    delete?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    connect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    update?: ListingUpdateWithWhereUniqueWithoutSelectedMainCategoriesInput | ListingUpdateWithWhereUniqueWithoutSelectedMainCategoriesInput[]
    updateMany?: ListingUpdateManyWithWhereWithoutSelectedMainCategoriesInput | ListingUpdateManyWithWhereWithoutSelectedMainCategoriesInput[]
    deleteMany?: ListingScalarWhereInput | ListingScalarWhereInput[]
  }

  export type ListingCreateNestedManyWithoutSelectedSubCategoriesInput = {
    create?: XOR<ListingCreateWithoutSelectedSubCategoriesInput, ListingUncheckedCreateWithoutSelectedSubCategoriesInput> | ListingCreateWithoutSelectedSubCategoriesInput[] | ListingUncheckedCreateWithoutSelectedSubCategoriesInput[]
    connectOrCreate?: ListingCreateOrConnectWithoutSelectedSubCategoriesInput | ListingCreateOrConnectWithoutSelectedSubCategoriesInput[]
    connect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
  }

  export type MainCategoryOptionCreateNestedOneWithoutSubCategoriesInput = {
    create?: XOR<MainCategoryOptionCreateWithoutSubCategoriesInput, MainCategoryOptionUncheckedCreateWithoutSubCategoriesInput>
    connectOrCreate?: MainCategoryOptionCreateOrConnectWithoutSubCategoriesInput
    connect?: MainCategoryOptionWhereUniqueInput
  }

  export type SpecificItemOptionCreateNestedManyWithoutSubCategoryInput = {
    create?: XOR<SpecificItemOptionCreateWithoutSubCategoryInput, SpecificItemOptionUncheckedCreateWithoutSubCategoryInput> | SpecificItemOptionCreateWithoutSubCategoryInput[] | SpecificItemOptionUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: SpecificItemOptionCreateOrConnectWithoutSubCategoryInput | SpecificItemOptionCreateOrConnectWithoutSubCategoryInput[]
    createMany?: SpecificItemOptionCreateManySubCategoryInputEnvelope
    connect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
  }

  export type ListingUncheckedCreateNestedManyWithoutSelectedSubCategoriesInput = {
    create?: XOR<ListingCreateWithoutSelectedSubCategoriesInput, ListingUncheckedCreateWithoutSelectedSubCategoriesInput> | ListingCreateWithoutSelectedSubCategoriesInput[] | ListingUncheckedCreateWithoutSelectedSubCategoriesInput[]
    connectOrCreate?: ListingCreateOrConnectWithoutSelectedSubCategoriesInput | ListingCreateOrConnectWithoutSelectedSubCategoriesInput[]
    connect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
  }

  export type SpecificItemOptionUncheckedCreateNestedManyWithoutSubCategoryInput = {
    create?: XOR<SpecificItemOptionCreateWithoutSubCategoryInput, SpecificItemOptionUncheckedCreateWithoutSubCategoryInput> | SpecificItemOptionCreateWithoutSubCategoryInput[] | SpecificItemOptionUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: SpecificItemOptionCreateOrConnectWithoutSubCategoryInput | SpecificItemOptionCreateOrConnectWithoutSubCategoryInput[]
    createMany?: SpecificItemOptionCreateManySubCategoryInputEnvelope
    connect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
  }

  export type ListingUpdateManyWithoutSelectedSubCategoriesNestedInput = {
    create?: XOR<ListingCreateWithoutSelectedSubCategoriesInput, ListingUncheckedCreateWithoutSelectedSubCategoriesInput> | ListingCreateWithoutSelectedSubCategoriesInput[] | ListingUncheckedCreateWithoutSelectedSubCategoriesInput[]
    connectOrCreate?: ListingCreateOrConnectWithoutSelectedSubCategoriesInput | ListingCreateOrConnectWithoutSelectedSubCategoriesInput[]
    upsert?: ListingUpsertWithWhereUniqueWithoutSelectedSubCategoriesInput | ListingUpsertWithWhereUniqueWithoutSelectedSubCategoriesInput[]
    set?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    disconnect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    delete?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    connect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    update?: ListingUpdateWithWhereUniqueWithoutSelectedSubCategoriesInput | ListingUpdateWithWhereUniqueWithoutSelectedSubCategoriesInput[]
    updateMany?: ListingUpdateManyWithWhereWithoutSelectedSubCategoriesInput | ListingUpdateManyWithWhereWithoutSelectedSubCategoriesInput[]
    deleteMany?: ListingScalarWhereInput | ListingScalarWhereInput[]
  }

  export type MainCategoryOptionUpdateOneWithoutSubCategoriesNestedInput = {
    create?: XOR<MainCategoryOptionCreateWithoutSubCategoriesInput, MainCategoryOptionUncheckedCreateWithoutSubCategoriesInput>
    connectOrCreate?: MainCategoryOptionCreateOrConnectWithoutSubCategoriesInput
    upsert?: MainCategoryOptionUpsertWithoutSubCategoriesInput
    disconnect?: MainCategoryOptionWhereInput | boolean
    delete?: MainCategoryOptionWhereInput | boolean
    connect?: MainCategoryOptionWhereUniqueInput
    update?: XOR<XOR<MainCategoryOptionUpdateToOneWithWhereWithoutSubCategoriesInput, MainCategoryOptionUpdateWithoutSubCategoriesInput>, MainCategoryOptionUncheckedUpdateWithoutSubCategoriesInput>
  }

  export type SpecificItemOptionUpdateManyWithoutSubCategoryNestedInput = {
    create?: XOR<SpecificItemOptionCreateWithoutSubCategoryInput, SpecificItemOptionUncheckedCreateWithoutSubCategoryInput> | SpecificItemOptionCreateWithoutSubCategoryInput[] | SpecificItemOptionUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: SpecificItemOptionCreateOrConnectWithoutSubCategoryInput | SpecificItemOptionCreateOrConnectWithoutSubCategoryInput[]
    upsert?: SpecificItemOptionUpsertWithWhereUniqueWithoutSubCategoryInput | SpecificItemOptionUpsertWithWhereUniqueWithoutSubCategoryInput[]
    createMany?: SpecificItemOptionCreateManySubCategoryInputEnvelope
    set?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    disconnect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    delete?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    connect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    update?: SpecificItemOptionUpdateWithWhereUniqueWithoutSubCategoryInput | SpecificItemOptionUpdateWithWhereUniqueWithoutSubCategoryInput[]
    updateMany?: SpecificItemOptionUpdateManyWithWhereWithoutSubCategoryInput | SpecificItemOptionUpdateManyWithWhereWithoutSubCategoryInput[]
    deleteMany?: SpecificItemOptionScalarWhereInput | SpecificItemOptionScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ListingUncheckedUpdateManyWithoutSelectedSubCategoriesNestedInput = {
    create?: XOR<ListingCreateWithoutSelectedSubCategoriesInput, ListingUncheckedCreateWithoutSelectedSubCategoriesInput> | ListingCreateWithoutSelectedSubCategoriesInput[] | ListingUncheckedCreateWithoutSelectedSubCategoriesInput[]
    connectOrCreate?: ListingCreateOrConnectWithoutSelectedSubCategoriesInput | ListingCreateOrConnectWithoutSelectedSubCategoriesInput[]
    upsert?: ListingUpsertWithWhereUniqueWithoutSelectedSubCategoriesInput | ListingUpsertWithWhereUniqueWithoutSelectedSubCategoriesInput[]
    set?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    disconnect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    delete?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    connect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    update?: ListingUpdateWithWhereUniqueWithoutSelectedSubCategoriesInput | ListingUpdateWithWhereUniqueWithoutSelectedSubCategoriesInput[]
    updateMany?: ListingUpdateManyWithWhereWithoutSelectedSubCategoriesInput | ListingUpdateManyWithWhereWithoutSelectedSubCategoriesInput[]
    deleteMany?: ListingScalarWhereInput | ListingScalarWhereInput[]
  }

  export type SpecificItemOptionUncheckedUpdateManyWithoutSubCategoryNestedInput = {
    create?: XOR<SpecificItemOptionCreateWithoutSubCategoryInput, SpecificItemOptionUncheckedCreateWithoutSubCategoryInput> | SpecificItemOptionCreateWithoutSubCategoryInput[] | SpecificItemOptionUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: SpecificItemOptionCreateOrConnectWithoutSubCategoryInput | SpecificItemOptionCreateOrConnectWithoutSubCategoryInput[]
    upsert?: SpecificItemOptionUpsertWithWhereUniqueWithoutSubCategoryInput | SpecificItemOptionUpsertWithWhereUniqueWithoutSubCategoryInput[]
    createMany?: SpecificItemOptionCreateManySubCategoryInputEnvelope
    set?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    disconnect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    delete?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    connect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    update?: SpecificItemOptionUpdateWithWhereUniqueWithoutSubCategoryInput | SpecificItemOptionUpdateWithWhereUniqueWithoutSubCategoryInput[]
    updateMany?: SpecificItemOptionUpdateManyWithWhereWithoutSubCategoryInput | SpecificItemOptionUpdateManyWithWhereWithoutSubCategoryInput[]
    deleteMany?: SpecificItemOptionScalarWhereInput | SpecificItemOptionScalarWhereInput[]
  }

  export type ListingCreateNestedManyWithoutSelectedSpecificItemsInput = {
    create?: XOR<ListingCreateWithoutSelectedSpecificItemsInput, ListingUncheckedCreateWithoutSelectedSpecificItemsInput> | ListingCreateWithoutSelectedSpecificItemsInput[] | ListingUncheckedCreateWithoutSelectedSpecificItemsInput[]
    connectOrCreate?: ListingCreateOrConnectWithoutSelectedSpecificItemsInput | ListingCreateOrConnectWithoutSelectedSpecificItemsInput[]
    connect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
  }

  export type SubCategoryOptionCreateNestedOneWithoutSpecificItemsInput = {
    create?: XOR<SubCategoryOptionCreateWithoutSpecificItemsInput, SubCategoryOptionUncheckedCreateWithoutSpecificItemsInput>
    connectOrCreate?: SubCategoryOptionCreateOrConnectWithoutSpecificItemsInput
    connect?: SubCategoryOptionWhereUniqueInput
  }

  export type MainCategoryOptionCreateNestedOneWithoutSpecificItemsInput = {
    create?: XOR<MainCategoryOptionCreateWithoutSpecificItemsInput, MainCategoryOptionUncheckedCreateWithoutSpecificItemsInput>
    connectOrCreate?: MainCategoryOptionCreateOrConnectWithoutSpecificItemsInput
    connect?: MainCategoryOptionWhereUniqueInput
  }

  export type ListingUncheckedCreateNestedManyWithoutSelectedSpecificItemsInput = {
    create?: XOR<ListingCreateWithoutSelectedSpecificItemsInput, ListingUncheckedCreateWithoutSelectedSpecificItemsInput> | ListingCreateWithoutSelectedSpecificItemsInput[] | ListingUncheckedCreateWithoutSelectedSpecificItemsInput[]
    connectOrCreate?: ListingCreateOrConnectWithoutSelectedSpecificItemsInput | ListingCreateOrConnectWithoutSelectedSpecificItemsInput[]
    connect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
  }

  export type ListingUpdateManyWithoutSelectedSpecificItemsNestedInput = {
    create?: XOR<ListingCreateWithoutSelectedSpecificItemsInput, ListingUncheckedCreateWithoutSelectedSpecificItemsInput> | ListingCreateWithoutSelectedSpecificItemsInput[] | ListingUncheckedCreateWithoutSelectedSpecificItemsInput[]
    connectOrCreate?: ListingCreateOrConnectWithoutSelectedSpecificItemsInput | ListingCreateOrConnectWithoutSelectedSpecificItemsInput[]
    upsert?: ListingUpsertWithWhereUniqueWithoutSelectedSpecificItemsInput | ListingUpsertWithWhereUniqueWithoutSelectedSpecificItemsInput[]
    set?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    disconnect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    delete?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    connect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    update?: ListingUpdateWithWhereUniqueWithoutSelectedSpecificItemsInput | ListingUpdateWithWhereUniqueWithoutSelectedSpecificItemsInput[]
    updateMany?: ListingUpdateManyWithWhereWithoutSelectedSpecificItemsInput | ListingUpdateManyWithWhereWithoutSelectedSpecificItemsInput[]
    deleteMany?: ListingScalarWhereInput | ListingScalarWhereInput[]
  }

  export type SubCategoryOptionUpdateOneWithoutSpecificItemsNestedInput = {
    create?: XOR<SubCategoryOptionCreateWithoutSpecificItemsInput, SubCategoryOptionUncheckedCreateWithoutSpecificItemsInput>
    connectOrCreate?: SubCategoryOptionCreateOrConnectWithoutSpecificItemsInput
    upsert?: SubCategoryOptionUpsertWithoutSpecificItemsInput
    disconnect?: SubCategoryOptionWhereInput | boolean
    delete?: SubCategoryOptionWhereInput | boolean
    connect?: SubCategoryOptionWhereUniqueInput
    update?: XOR<XOR<SubCategoryOptionUpdateToOneWithWhereWithoutSpecificItemsInput, SubCategoryOptionUpdateWithoutSpecificItemsInput>, SubCategoryOptionUncheckedUpdateWithoutSpecificItemsInput>
  }

  export type MainCategoryOptionUpdateOneWithoutSpecificItemsNestedInput = {
    create?: XOR<MainCategoryOptionCreateWithoutSpecificItemsInput, MainCategoryOptionUncheckedCreateWithoutSpecificItemsInput>
    connectOrCreate?: MainCategoryOptionCreateOrConnectWithoutSpecificItemsInput
    upsert?: MainCategoryOptionUpsertWithoutSpecificItemsInput
    disconnect?: MainCategoryOptionWhereInput | boolean
    delete?: MainCategoryOptionWhereInput | boolean
    connect?: MainCategoryOptionWhereUniqueInput
    update?: XOR<XOR<MainCategoryOptionUpdateToOneWithWhereWithoutSpecificItemsInput, MainCategoryOptionUpdateWithoutSpecificItemsInput>, MainCategoryOptionUncheckedUpdateWithoutSpecificItemsInput>
  }

  export type ListingUncheckedUpdateManyWithoutSelectedSpecificItemsNestedInput = {
    create?: XOR<ListingCreateWithoutSelectedSpecificItemsInput, ListingUncheckedCreateWithoutSelectedSpecificItemsInput> | ListingCreateWithoutSelectedSpecificItemsInput[] | ListingUncheckedCreateWithoutSelectedSpecificItemsInput[]
    connectOrCreate?: ListingCreateOrConnectWithoutSelectedSpecificItemsInput | ListingCreateOrConnectWithoutSelectedSpecificItemsInput[]
    upsert?: ListingUpsertWithWhereUniqueWithoutSelectedSpecificItemsInput | ListingUpsertWithWhereUniqueWithoutSelectedSpecificItemsInput[]
    set?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    disconnect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    delete?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    connect?: ListingWhereUniqueInput | ListingWhereUniqueInput[]
    update?: ListingUpdateWithWhereUniqueWithoutSelectedSpecificItemsInput | ListingUpdateWithWhereUniqueWithoutSelectedSpecificItemsInput[]
    updateMany?: ListingUpdateManyWithWhereWithoutSelectedSpecificItemsInput | ListingUpdateManyWithWhereWithoutSelectedSpecificItemsInput[]
    deleteMany?: ListingScalarWhereInput | ListingScalarWhereInput[]
  }

  export type ListingCreatesub_imagesInput = {
    set: string[]
  }

  export type ListingCreateagegroupInput = {
    set: string[]
  }

  export type ListingCreatelocationInput = {
    set: string[]
  }

  export type ListingCreatefacilitiesInput = {
    set: string[]
  }

  export type ListingCreateoperatingHoursInput = {
    set: string[]
  }

  export type BookingCreateNestedManyWithoutListingInput = {
    create?: XOR<BookingCreateWithoutListingInput, BookingUncheckedCreateWithoutListingInput> | BookingCreateWithoutListingInput[] | BookingUncheckedCreateWithoutListingInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutListingInput | BookingCreateOrConnectWithoutListingInput[]
    createMany?: BookingCreateManyListingInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type reviewCreateNestedManyWithoutListingInput = {
    create?: XOR<reviewCreateWithoutListingInput, reviewUncheckedCreateWithoutListingInput> | reviewCreateWithoutListingInput[] | reviewUncheckedCreateWithoutListingInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutListingInput | reviewCreateOrConnectWithoutListingInput[]
    createMany?: reviewCreateManyListingInputEnvelope
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
  }

  export type MainCategoryOptionCreateNestedManyWithoutListingsInput = {
    create?: XOR<MainCategoryOptionCreateWithoutListingsInput, MainCategoryOptionUncheckedCreateWithoutListingsInput> | MainCategoryOptionCreateWithoutListingsInput[] | MainCategoryOptionUncheckedCreateWithoutListingsInput[]
    connectOrCreate?: MainCategoryOptionCreateOrConnectWithoutListingsInput | MainCategoryOptionCreateOrConnectWithoutListingsInput[]
    connect?: MainCategoryOptionWhereUniqueInput | MainCategoryOptionWhereUniqueInput[]
  }

  export type SubCategoryOptionCreateNestedManyWithoutListingsInput = {
    create?: XOR<SubCategoryOptionCreateWithoutListingsInput, SubCategoryOptionUncheckedCreateWithoutListingsInput> | SubCategoryOptionCreateWithoutListingsInput[] | SubCategoryOptionUncheckedCreateWithoutListingsInput[]
    connectOrCreate?: SubCategoryOptionCreateOrConnectWithoutListingsInput | SubCategoryOptionCreateOrConnectWithoutListingsInput[]
    connect?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
  }

  export type SpecificItemOptionCreateNestedManyWithoutListingsInput = {
    create?: XOR<SpecificItemOptionCreateWithoutListingsInput, SpecificItemOptionUncheckedCreateWithoutListingsInput> | SpecificItemOptionCreateWithoutListingsInput[] | SpecificItemOptionUncheckedCreateWithoutListingsInput[]
    connectOrCreate?: SpecificItemOptionCreateOrConnectWithoutListingsInput | SpecificItemOptionCreateOrConnectWithoutListingsInput[]
    connect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
  }

  export type BookingUncheckedCreateNestedManyWithoutListingInput = {
    create?: XOR<BookingCreateWithoutListingInput, BookingUncheckedCreateWithoutListingInput> | BookingCreateWithoutListingInput[] | BookingUncheckedCreateWithoutListingInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutListingInput | BookingCreateOrConnectWithoutListingInput[]
    createMany?: BookingCreateManyListingInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type reviewUncheckedCreateNestedManyWithoutListingInput = {
    create?: XOR<reviewCreateWithoutListingInput, reviewUncheckedCreateWithoutListingInput> | reviewCreateWithoutListingInput[] | reviewUncheckedCreateWithoutListingInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutListingInput | reviewCreateOrConnectWithoutListingInput[]
    createMany?: reviewCreateManyListingInputEnvelope
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
  }

  export type MainCategoryOptionUncheckedCreateNestedManyWithoutListingsInput = {
    create?: XOR<MainCategoryOptionCreateWithoutListingsInput, MainCategoryOptionUncheckedCreateWithoutListingsInput> | MainCategoryOptionCreateWithoutListingsInput[] | MainCategoryOptionUncheckedCreateWithoutListingsInput[]
    connectOrCreate?: MainCategoryOptionCreateOrConnectWithoutListingsInput | MainCategoryOptionCreateOrConnectWithoutListingsInput[]
    connect?: MainCategoryOptionWhereUniqueInput | MainCategoryOptionWhereUniqueInput[]
  }

  export type SubCategoryOptionUncheckedCreateNestedManyWithoutListingsInput = {
    create?: XOR<SubCategoryOptionCreateWithoutListingsInput, SubCategoryOptionUncheckedCreateWithoutListingsInput> | SubCategoryOptionCreateWithoutListingsInput[] | SubCategoryOptionUncheckedCreateWithoutListingsInput[]
    connectOrCreate?: SubCategoryOptionCreateOrConnectWithoutListingsInput | SubCategoryOptionCreateOrConnectWithoutListingsInput[]
    connect?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
  }

  export type SpecificItemOptionUncheckedCreateNestedManyWithoutListingsInput = {
    create?: XOR<SpecificItemOptionCreateWithoutListingsInput, SpecificItemOptionUncheckedCreateWithoutListingsInput> | SpecificItemOptionCreateWithoutListingsInput[] | SpecificItemOptionUncheckedCreateWithoutListingsInput[]
    connectOrCreate?: SpecificItemOptionCreateOrConnectWithoutListingsInput | SpecificItemOptionCreateOrConnectWithoutListingsInput[]
    connect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type ListingUpdatesub_imagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ListingUpdateagegroupInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ListingUpdatelocationInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ListingUpdatefacilitiesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ListingUpdateoperatingHoursInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BookingUpdateManyWithoutListingNestedInput = {
    create?: XOR<BookingCreateWithoutListingInput, BookingUncheckedCreateWithoutListingInput> | BookingCreateWithoutListingInput[] | BookingUncheckedCreateWithoutListingInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutListingInput | BookingCreateOrConnectWithoutListingInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutListingInput | BookingUpsertWithWhereUniqueWithoutListingInput[]
    createMany?: BookingCreateManyListingInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutListingInput | BookingUpdateWithWhereUniqueWithoutListingInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutListingInput | BookingUpdateManyWithWhereWithoutListingInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type reviewUpdateManyWithoutListingNestedInput = {
    create?: XOR<reviewCreateWithoutListingInput, reviewUncheckedCreateWithoutListingInput> | reviewCreateWithoutListingInput[] | reviewUncheckedCreateWithoutListingInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutListingInput | reviewCreateOrConnectWithoutListingInput[]
    upsert?: reviewUpsertWithWhereUniqueWithoutListingInput | reviewUpsertWithWhereUniqueWithoutListingInput[]
    createMany?: reviewCreateManyListingInputEnvelope
    set?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    disconnect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    delete?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    update?: reviewUpdateWithWhereUniqueWithoutListingInput | reviewUpdateWithWhereUniqueWithoutListingInput[]
    updateMany?: reviewUpdateManyWithWhereWithoutListingInput | reviewUpdateManyWithWhereWithoutListingInput[]
    deleteMany?: reviewScalarWhereInput | reviewScalarWhereInput[]
  }

  export type MainCategoryOptionUpdateManyWithoutListingsNestedInput = {
    create?: XOR<MainCategoryOptionCreateWithoutListingsInput, MainCategoryOptionUncheckedCreateWithoutListingsInput> | MainCategoryOptionCreateWithoutListingsInput[] | MainCategoryOptionUncheckedCreateWithoutListingsInput[]
    connectOrCreate?: MainCategoryOptionCreateOrConnectWithoutListingsInput | MainCategoryOptionCreateOrConnectWithoutListingsInput[]
    upsert?: MainCategoryOptionUpsertWithWhereUniqueWithoutListingsInput | MainCategoryOptionUpsertWithWhereUniqueWithoutListingsInput[]
    set?: MainCategoryOptionWhereUniqueInput | MainCategoryOptionWhereUniqueInput[]
    disconnect?: MainCategoryOptionWhereUniqueInput | MainCategoryOptionWhereUniqueInput[]
    delete?: MainCategoryOptionWhereUniqueInput | MainCategoryOptionWhereUniqueInput[]
    connect?: MainCategoryOptionWhereUniqueInput | MainCategoryOptionWhereUniqueInput[]
    update?: MainCategoryOptionUpdateWithWhereUniqueWithoutListingsInput | MainCategoryOptionUpdateWithWhereUniqueWithoutListingsInput[]
    updateMany?: MainCategoryOptionUpdateManyWithWhereWithoutListingsInput | MainCategoryOptionUpdateManyWithWhereWithoutListingsInput[]
    deleteMany?: MainCategoryOptionScalarWhereInput | MainCategoryOptionScalarWhereInput[]
  }

  export type SubCategoryOptionUpdateManyWithoutListingsNestedInput = {
    create?: XOR<SubCategoryOptionCreateWithoutListingsInput, SubCategoryOptionUncheckedCreateWithoutListingsInput> | SubCategoryOptionCreateWithoutListingsInput[] | SubCategoryOptionUncheckedCreateWithoutListingsInput[]
    connectOrCreate?: SubCategoryOptionCreateOrConnectWithoutListingsInput | SubCategoryOptionCreateOrConnectWithoutListingsInput[]
    upsert?: SubCategoryOptionUpsertWithWhereUniqueWithoutListingsInput | SubCategoryOptionUpsertWithWhereUniqueWithoutListingsInput[]
    set?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    disconnect?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    delete?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    connect?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    update?: SubCategoryOptionUpdateWithWhereUniqueWithoutListingsInput | SubCategoryOptionUpdateWithWhereUniqueWithoutListingsInput[]
    updateMany?: SubCategoryOptionUpdateManyWithWhereWithoutListingsInput | SubCategoryOptionUpdateManyWithWhereWithoutListingsInput[]
    deleteMany?: SubCategoryOptionScalarWhereInput | SubCategoryOptionScalarWhereInput[]
  }

  export type SpecificItemOptionUpdateManyWithoutListingsNestedInput = {
    create?: XOR<SpecificItemOptionCreateWithoutListingsInput, SpecificItemOptionUncheckedCreateWithoutListingsInput> | SpecificItemOptionCreateWithoutListingsInput[] | SpecificItemOptionUncheckedCreateWithoutListingsInput[]
    connectOrCreate?: SpecificItemOptionCreateOrConnectWithoutListingsInput | SpecificItemOptionCreateOrConnectWithoutListingsInput[]
    upsert?: SpecificItemOptionUpsertWithWhereUniqueWithoutListingsInput | SpecificItemOptionUpsertWithWhereUniqueWithoutListingsInput[]
    set?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    disconnect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    delete?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    connect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    update?: SpecificItemOptionUpdateWithWhereUniqueWithoutListingsInput | SpecificItemOptionUpdateWithWhereUniqueWithoutListingsInput[]
    updateMany?: SpecificItemOptionUpdateManyWithWhereWithoutListingsInput | SpecificItemOptionUpdateManyWithWhereWithoutListingsInput[]
    deleteMany?: SpecificItemOptionScalarWhereInput | SpecificItemOptionScalarWhereInput[]
  }

  export type BookingUncheckedUpdateManyWithoutListingNestedInput = {
    create?: XOR<BookingCreateWithoutListingInput, BookingUncheckedCreateWithoutListingInput> | BookingCreateWithoutListingInput[] | BookingUncheckedCreateWithoutListingInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutListingInput | BookingCreateOrConnectWithoutListingInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutListingInput | BookingUpsertWithWhereUniqueWithoutListingInput[]
    createMany?: BookingCreateManyListingInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutListingInput | BookingUpdateWithWhereUniqueWithoutListingInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutListingInput | BookingUpdateManyWithWhereWithoutListingInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type reviewUncheckedUpdateManyWithoutListingNestedInput = {
    create?: XOR<reviewCreateWithoutListingInput, reviewUncheckedCreateWithoutListingInput> | reviewCreateWithoutListingInput[] | reviewUncheckedCreateWithoutListingInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutListingInput | reviewCreateOrConnectWithoutListingInput[]
    upsert?: reviewUpsertWithWhereUniqueWithoutListingInput | reviewUpsertWithWhereUniqueWithoutListingInput[]
    createMany?: reviewCreateManyListingInputEnvelope
    set?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    disconnect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    delete?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    update?: reviewUpdateWithWhereUniqueWithoutListingInput | reviewUpdateWithWhereUniqueWithoutListingInput[]
    updateMany?: reviewUpdateManyWithWhereWithoutListingInput | reviewUpdateManyWithWhereWithoutListingInput[]
    deleteMany?: reviewScalarWhereInput | reviewScalarWhereInput[]
  }

  export type MainCategoryOptionUncheckedUpdateManyWithoutListingsNestedInput = {
    create?: XOR<MainCategoryOptionCreateWithoutListingsInput, MainCategoryOptionUncheckedCreateWithoutListingsInput> | MainCategoryOptionCreateWithoutListingsInput[] | MainCategoryOptionUncheckedCreateWithoutListingsInput[]
    connectOrCreate?: MainCategoryOptionCreateOrConnectWithoutListingsInput | MainCategoryOptionCreateOrConnectWithoutListingsInput[]
    upsert?: MainCategoryOptionUpsertWithWhereUniqueWithoutListingsInput | MainCategoryOptionUpsertWithWhereUniqueWithoutListingsInput[]
    set?: MainCategoryOptionWhereUniqueInput | MainCategoryOptionWhereUniqueInput[]
    disconnect?: MainCategoryOptionWhereUniqueInput | MainCategoryOptionWhereUniqueInput[]
    delete?: MainCategoryOptionWhereUniqueInput | MainCategoryOptionWhereUniqueInput[]
    connect?: MainCategoryOptionWhereUniqueInput | MainCategoryOptionWhereUniqueInput[]
    update?: MainCategoryOptionUpdateWithWhereUniqueWithoutListingsInput | MainCategoryOptionUpdateWithWhereUniqueWithoutListingsInput[]
    updateMany?: MainCategoryOptionUpdateManyWithWhereWithoutListingsInput | MainCategoryOptionUpdateManyWithWhereWithoutListingsInput[]
    deleteMany?: MainCategoryOptionScalarWhereInput | MainCategoryOptionScalarWhereInput[]
  }

  export type SubCategoryOptionUncheckedUpdateManyWithoutListingsNestedInput = {
    create?: XOR<SubCategoryOptionCreateWithoutListingsInput, SubCategoryOptionUncheckedCreateWithoutListingsInput> | SubCategoryOptionCreateWithoutListingsInput[] | SubCategoryOptionUncheckedCreateWithoutListingsInput[]
    connectOrCreate?: SubCategoryOptionCreateOrConnectWithoutListingsInput | SubCategoryOptionCreateOrConnectWithoutListingsInput[]
    upsert?: SubCategoryOptionUpsertWithWhereUniqueWithoutListingsInput | SubCategoryOptionUpsertWithWhereUniqueWithoutListingsInput[]
    set?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    disconnect?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    delete?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    connect?: SubCategoryOptionWhereUniqueInput | SubCategoryOptionWhereUniqueInput[]
    update?: SubCategoryOptionUpdateWithWhereUniqueWithoutListingsInput | SubCategoryOptionUpdateWithWhereUniqueWithoutListingsInput[]
    updateMany?: SubCategoryOptionUpdateManyWithWhereWithoutListingsInput | SubCategoryOptionUpdateManyWithWhereWithoutListingsInput[]
    deleteMany?: SubCategoryOptionScalarWhereInput | SubCategoryOptionScalarWhereInput[]
  }

  export type SpecificItemOptionUncheckedUpdateManyWithoutListingsNestedInput = {
    create?: XOR<SpecificItemOptionCreateWithoutListingsInput, SpecificItemOptionUncheckedCreateWithoutListingsInput> | SpecificItemOptionCreateWithoutListingsInput[] | SpecificItemOptionUncheckedCreateWithoutListingsInput[]
    connectOrCreate?: SpecificItemOptionCreateOrConnectWithoutListingsInput | SpecificItemOptionCreateOrConnectWithoutListingsInput[]
    upsert?: SpecificItemOptionUpsertWithWhereUniqueWithoutListingsInput | SpecificItemOptionUpsertWithWhereUniqueWithoutListingsInput[]
    set?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    disconnect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    delete?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    connect?: SpecificItemOptionWhereUniqueInput | SpecificItemOptionWhereUniqueInput[]
    update?: SpecificItemOptionUpdateWithWhereUniqueWithoutListingsInput | SpecificItemOptionUpdateWithWhereUniqueWithoutListingsInput[]
    updateMany?: SpecificItemOptionUpdateManyWithWhereWithoutListingsInput | SpecificItemOptionUpdateManyWithWhereWithoutListingsInput[]
    deleteMany?: SpecificItemOptionScalarWhereInput | SpecificItemOptionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type ListingCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ListingCreateWithoutReviewsInput, ListingUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ListingCreateOrConnectWithoutReviewsInput
    connect?: ListingWhereUniqueInput
  }

  export type BookingCreateNestedOneWithoutReviewInput = {
    create?: XOR<BookingCreateWithoutReviewInput, BookingUncheckedCreateWithoutReviewInput>
    connectOrCreate?: BookingCreateOrConnectWithoutReviewInput
    connect?: BookingWhereUniqueInput
  }

  export type BookingUncheckedCreateNestedOneWithoutReviewInput = {
    create?: XOR<BookingCreateWithoutReviewInput, BookingUncheckedCreateWithoutReviewInput>
    connectOrCreate?: BookingCreateOrConnectWithoutReviewInput
    connect?: BookingWhereUniqueInput
  }

  export type NullableEnumreviewStatusFieldUpdateOperationsInput = {
    set?: $Enums.reviewStatus | null
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsInput, UserUpdateWithoutReviewsInput>, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type ListingUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<ListingCreateWithoutReviewsInput, ListingUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ListingCreateOrConnectWithoutReviewsInput
    upsert?: ListingUpsertWithoutReviewsInput
    disconnect?: ListingWhereInput | boolean
    delete?: ListingWhereInput | boolean
    connect?: ListingWhereUniqueInput
    update?: XOR<XOR<ListingUpdateToOneWithWhereWithoutReviewsInput, ListingUpdateWithoutReviewsInput>, ListingUncheckedUpdateWithoutReviewsInput>
  }

  export type BookingUpdateOneWithoutReviewNestedInput = {
    create?: XOR<BookingCreateWithoutReviewInput, BookingUncheckedCreateWithoutReviewInput>
    connectOrCreate?: BookingCreateOrConnectWithoutReviewInput
    upsert?: BookingUpsertWithoutReviewInput
    disconnect?: BookingWhereInput | boolean
    delete?: BookingWhereInput | boolean
    connect?: BookingWhereUniqueInput
    update?: XOR<XOR<BookingUpdateToOneWithWhereWithoutReviewInput, BookingUpdateWithoutReviewInput>, BookingUncheckedUpdateWithoutReviewInput>
  }

  export type BookingUncheckedUpdateOneWithoutReviewNestedInput = {
    create?: XOR<BookingCreateWithoutReviewInput, BookingUncheckedCreateWithoutReviewInput>
    connectOrCreate?: BookingCreateOrConnectWithoutReviewInput
    upsert?: BookingUpsertWithoutReviewInput
    disconnect?: BookingWhereInput | boolean
    delete?: BookingWhereInput | boolean
    connect?: BookingWhereUniqueInput
    update?: XOR<XOR<BookingUpdateToOneWithWhereWithoutReviewInput, BookingUpdateWithoutReviewInput>, BookingUncheckedUpdateWithoutReviewInput>
  }

  export type UserCreateNestedOneWithoutBookingsInput = {
    create?: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingsInput
    connect?: UserWhereUniqueInput
  }

  export type ListingCreateNestedOneWithoutBookingsInput = {
    create?: XOR<ListingCreateWithoutBookingsInput, ListingUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: ListingCreateOrConnectWithoutBookingsInput
    connect?: ListingWhereUniqueInput
  }

  export type reviewCreateNestedOneWithoutBookingInput = {
    create?: XOR<reviewCreateWithoutBookingInput, reviewUncheckedCreateWithoutBookingInput>
    connectOrCreate?: reviewCreateOrConnectWithoutBookingInput
    connect?: reviewWhereUniqueInput
  }

  export type RewardCreateNestedOneWithoutBookingInput = {
    create?: XOR<RewardCreateWithoutBookingInput, RewardUncheckedCreateWithoutBookingInput>
    connectOrCreate?: RewardCreateOrConnectWithoutBookingInput
    connect?: RewardWhereUniqueInput
  }

  export type RewardUncheckedCreateNestedOneWithoutBookingInput = {
    create?: XOR<RewardCreateWithoutBookingInput, RewardUncheckedCreateWithoutBookingInput>
    connectOrCreate?: RewardCreateOrConnectWithoutBookingInput
    connect?: RewardWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumBookingPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.BookingPaymentMethod | null
  }

  export type NullableEnumBookingStatusFieldUpdateOperationsInput = {
    set?: $Enums.BookingStatus | null
  }

  export type UserUpdateOneRequiredWithoutBookingsNestedInput = {
    create?: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingsInput
    upsert?: UserUpsertWithoutBookingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBookingsInput, UserUpdateWithoutBookingsInput>, UserUncheckedUpdateWithoutBookingsInput>
  }

  export type ListingUpdateOneWithoutBookingsNestedInput = {
    create?: XOR<ListingCreateWithoutBookingsInput, ListingUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: ListingCreateOrConnectWithoutBookingsInput
    upsert?: ListingUpsertWithoutBookingsInput
    disconnect?: ListingWhereInput | boolean
    delete?: ListingWhereInput | boolean
    connect?: ListingWhereUniqueInput
    update?: XOR<XOR<ListingUpdateToOneWithWhereWithoutBookingsInput, ListingUpdateWithoutBookingsInput>, ListingUncheckedUpdateWithoutBookingsInput>
  }

  export type reviewUpdateOneWithoutBookingNestedInput = {
    create?: XOR<reviewCreateWithoutBookingInput, reviewUncheckedCreateWithoutBookingInput>
    connectOrCreate?: reviewCreateOrConnectWithoutBookingInput
    upsert?: reviewUpsertWithoutBookingInput
    disconnect?: reviewWhereInput | boolean
    delete?: reviewWhereInput | boolean
    connect?: reviewWhereUniqueInput
    update?: XOR<XOR<reviewUpdateToOneWithWhereWithoutBookingInput, reviewUpdateWithoutBookingInput>, reviewUncheckedUpdateWithoutBookingInput>
  }

  export type RewardUpdateOneWithoutBookingNestedInput = {
    create?: XOR<RewardCreateWithoutBookingInput, RewardUncheckedCreateWithoutBookingInput>
    connectOrCreate?: RewardCreateOrConnectWithoutBookingInput
    upsert?: RewardUpsertWithoutBookingInput
    disconnect?: RewardWhereInput | boolean
    delete?: RewardWhereInput | boolean
    connect?: RewardWhereUniqueInput
    update?: XOR<XOR<RewardUpdateToOneWithWhereWithoutBookingInput, RewardUpdateWithoutBookingInput>, RewardUncheckedUpdateWithoutBookingInput>
  }

  export type RewardUncheckedUpdateOneWithoutBookingNestedInput = {
    create?: XOR<RewardCreateWithoutBookingInput, RewardUncheckedCreateWithoutBookingInput>
    connectOrCreate?: RewardCreateOrConnectWithoutBookingInput
    upsert?: RewardUpsertWithoutBookingInput
    disconnect?: RewardWhereInput | boolean
    delete?: RewardWhereInput | boolean
    connect?: RewardWhereUniqueInput
    update?: XOR<XOR<RewardUpdateToOneWithWhereWithoutBookingInput, RewardUpdateWithoutBookingInput>, RewardUncheckedUpdateWithoutBookingInput>
  }

  export type UserCreateNestedOneWithoutRewardsInput = {
    create?: XOR<UserCreateWithoutRewardsInput, UserUncheckedCreateWithoutRewardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRewardsInput
    connect?: UserWhereUniqueInput
  }

  export type BookingCreateNestedOneWithoutRewardInput = {
    create?: XOR<BookingCreateWithoutRewardInput, BookingUncheckedCreateWithoutRewardInput>
    connectOrCreate?: BookingCreateOrConnectWithoutRewardInput
    connect?: BookingWhereUniqueInput
  }

  export type NullableEnumreward_categoryFieldUpdateOperationsInput = {
    set?: $Enums.reward_category | null
  }

  export type UserUpdateOneRequiredWithoutRewardsNestedInput = {
    create?: XOR<UserCreateWithoutRewardsInput, UserUncheckedCreateWithoutRewardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRewardsInput
    upsert?: UserUpsertWithoutRewardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRewardsInput, UserUpdateWithoutRewardsInput>, UserUncheckedUpdateWithoutRewardsInput>
  }

  export type BookingUpdateOneWithoutRewardNestedInput = {
    create?: XOR<BookingCreateWithoutRewardInput, BookingUncheckedCreateWithoutRewardInput>
    connectOrCreate?: BookingCreateOrConnectWithoutRewardInput
    upsert?: BookingUpsertWithoutRewardInput
    disconnect?: BookingWhereInput | boolean
    delete?: BookingWhereInput | boolean
    connect?: BookingWhereUniqueInput
    update?: XOR<XOR<BookingUpdateToOneWithWhereWithoutRewardInput, BookingUpdateWithoutRewardInput>, BookingUncheckedUpdateWithoutRewardInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAuditLogActionFieldUpdateOperationsInput = {
    set?: $Enums.AuditLogAction
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumreviewStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.reviewStatus | EnumreviewStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.reviewStatus[] | ListEnumreviewStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.reviewStatus[] | ListEnumreviewStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumreviewStatusNullableFilter<$PrismaModel> | $Enums.reviewStatus | null
  }

  export type NestedEnumreviewStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.reviewStatus | EnumreviewStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.reviewStatus[] | ListEnumreviewStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.reviewStatus[] | ListEnumreviewStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumreviewStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.reviewStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumreviewStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumreviewStatusNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumBookingPaymentMethodNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingPaymentMethod | EnumBookingPaymentMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.BookingPaymentMethod[] | ListEnumBookingPaymentMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BookingPaymentMethod[] | ListEnumBookingPaymentMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBookingPaymentMethodNullableFilter<$PrismaModel> | $Enums.BookingPaymentMethod | null
  }

  export type NestedEnumBookingStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBookingStatusNullableFilter<$PrismaModel> | $Enums.BookingStatus | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumBookingPaymentMethodNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingPaymentMethod | EnumBookingPaymentMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.BookingPaymentMethod[] | ListEnumBookingPaymentMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BookingPaymentMethod[] | ListEnumBookingPaymentMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBookingPaymentMethodNullableWithAggregatesFilter<$PrismaModel> | $Enums.BookingPaymentMethod | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBookingPaymentMethodNullableFilter<$PrismaModel>
    _max?: NestedEnumBookingPaymentMethodNullableFilter<$PrismaModel>
  }

  export type NestedEnumBookingStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBookingStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.BookingStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBookingStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumBookingStatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumreward_categoryNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.reward_category | Enumreward_categoryFieldRefInput<$PrismaModel> | null
    in?: $Enums.reward_category[] | ListEnumreward_categoryFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.reward_category[] | ListEnumreward_categoryFieldRefInput<$PrismaModel> | null
    not?: NestedEnumreward_categoryNullableFilter<$PrismaModel> | $Enums.reward_category | null
  }

  export type NestedEnumreward_categoryNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.reward_category | Enumreward_categoryFieldRefInput<$PrismaModel> | null
    in?: $Enums.reward_category[] | ListEnumreward_categoryFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.reward_category[] | ListEnumreward_categoryFieldRefInput<$PrismaModel> | null
    not?: NestedEnumreward_categoryNullableWithAggregatesFilter<$PrismaModel> | $Enums.reward_category | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumreward_categoryNullableFilter<$PrismaModel>
    _max?: NestedEnumreward_categoryNullableFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumAuditLogActionFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditLogAction | EnumAuditLogActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditLogAction[] | ListEnumAuditLogActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditLogAction[] | ListEnumAuditLogActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditLogActionFilter<$PrismaModel> | $Enums.AuditLogAction
  }

  export type NestedEnumAuditLogActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditLogAction | EnumAuditLogActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditLogAction[] | ListEnumAuditLogActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditLogAction[] | ListEnumAuditLogActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditLogActionWithAggregatesFilter<$PrismaModel> | $Enums.AuditLogAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuditLogActionFilter<$PrismaModel>
    _max?: NestedEnumAuditLogActionFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BookingCreateWithoutUserInput = {
    bookingDate?: Date | string | null
    booking_hours?: string | null
    additionalNote?: string | null
    ageGroup?: string | null
    numberOfPersons?: number | null
    paymentMethod?: $Enums.BookingPaymentMethod | null
    status?: $Enums.BookingStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    listing?: ListingCreateNestedOneWithoutBookingsInput
    review?: reviewCreateNestedOneWithoutBookingInput
    reward?: RewardCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutUserInput = {
    id?: number
    listingId?: number | null
    bookingDate?: Date | string | null
    booking_hours?: string | null
    additionalNote?: string | null
    ageGroup?: string | null
    numberOfPersons?: number | null
    paymentMethod?: $Enums.BookingPaymentMethod | null
    status?: $Enums.BookingStatus | null
    review_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reward?: RewardUncheckedCreateNestedOneWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutUserInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingCreateManyUserInputEnvelope = {
    data: BookingCreateManyUserInput | BookingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RewardCreateWithoutUserInput = {
    points?: number | null
    description?: string | null
    category?: $Enums.reward_category | null
    createdAt?: Date | string
    updatedAt?: Date | string
    booking?: BookingCreateNestedOneWithoutRewardInput
  }

  export type RewardUncheckedCreateWithoutUserInput = {
    id?: number
    points?: number | null
    description?: string | null
    category?: $Enums.reward_category | null
    bookingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RewardCreateOrConnectWithoutUserInput = {
    where: RewardWhereUniqueInput
    create: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput>
  }

  export type RewardCreateManyUserInputEnvelope = {
    data: RewardCreateManyUserInput | RewardCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    link?: string | null
    entityId?: string | null
    entityType?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    link?: string | null
    entityId?: string | null
    entityType?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    timestamp?: Date | string
    action: $Enums.AuditLogAction
    entityName?: string | null
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: number
    timestamp?: Date | string
    action: $Enums.AuditLogAction
    entityName?: string | null
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type reviewCreateWithoutUserInput = {
    rating: number
    status?: $Enums.reviewStatus | null
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    listing?: ListingCreateNestedOneWithoutReviewsInput
    booking?: BookingCreateNestedOneWithoutReviewInput
  }

  export type reviewUncheckedCreateWithoutUserInput = {
    id?: number
    listingId?: number | null
    rating: number
    status?: $Enums.reviewStatus | null
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    booking?: BookingUncheckedCreateNestedOneWithoutReviewInput
  }

  export type reviewCreateOrConnectWithoutUserInput = {
    where: reviewWhereUniqueInput
    create: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput>
  }

  export type reviewCreateManyUserInputEnvelope = {
    data: reviewCreateManyUserInput | reviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BookingUpsertWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
  }

  export type BookingUpdateManyWithWhereWithoutUserInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutUserInput>
  }

  export type BookingScalarWhereInput = {
    AND?: BookingScalarWhereInput | BookingScalarWhereInput[]
    OR?: BookingScalarWhereInput[]
    NOT?: BookingScalarWhereInput | BookingScalarWhereInput[]
    id?: IntFilter<"Booking"> | number
    userId?: IntFilter<"Booking"> | number
    listingId?: IntNullableFilter<"Booking"> | number | null
    bookingDate?: DateTimeNullableFilter<"Booking"> | Date | string | null
    booking_hours?: StringNullableFilter<"Booking"> | string | null
    additionalNote?: StringNullableFilter<"Booking"> | string | null
    ageGroup?: StringNullableFilter<"Booking"> | string | null
    numberOfPersons?: IntNullableFilter<"Booking"> | number | null
    paymentMethod?: EnumBookingPaymentMethodNullableFilter<"Booking"> | $Enums.BookingPaymentMethod | null
    status?: EnumBookingStatusNullableFilter<"Booking"> | $Enums.BookingStatus | null
    review_id?: IntNullableFilter<"Booking"> | number | null
    createdAt?: DateTimeFilter<"Booking"> | Date | string
    updatedAt?: DateTimeFilter<"Booking"> | Date | string
  }

  export type RewardUpsertWithWhereUniqueWithoutUserInput = {
    where: RewardWhereUniqueInput
    update: XOR<RewardUpdateWithoutUserInput, RewardUncheckedUpdateWithoutUserInput>
    create: XOR<RewardCreateWithoutUserInput, RewardUncheckedCreateWithoutUserInput>
  }

  export type RewardUpdateWithWhereUniqueWithoutUserInput = {
    where: RewardWhereUniqueInput
    data: XOR<RewardUpdateWithoutUserInput, RewardUncheckedUpdateWithoutUserInput>
  }

  export type RewardUpdateManyWithWhereWithoutUserInput = {
    where: RewardScalarWhereInput
    data: XOR<RewardUpdateManyMutationInput, RewardUncheckedUpdateManyWithoutUserInput>
  }

  export type RewardScalarWhereInput = {
    AND?: RewardScalarWhereInput | RewardScalarWhereInput[]
    OR?: RewardScalarWhereInput[]
    NOT?: RewardScalarWhereInput | RewardScalarWhereInput[]
    id?: IntFilter<"Reward"> | number
    userId?: IntFilter<"Reward"> | number
    points?: IntNullableFilter<"Reward"> | number | null
    description?: StringNullableFilter<"Reward"> | string | null
    category?: Enumreward_categoryNullableFilter<"Reward"> | $Enums.reward_category | null
    bookingId?: IntNullableFilter<"Reward"> | number | null
    createdAt?: DateTimeFilter<"Reward"> | Date | string
    updatedAt?: DateTimeFilter<"Reward"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    link?: StringNullableFilter<"Notification"> | string | null
    entityId?: StringNullableFilter<"Notification"> | string | null
    entityType?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: EnumAuditLogActionFilter<"AuditLog"> | $Enums.AuditLogAction
    entityName?: StringNullableFilter<"AuditLog"> | string | null
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    description?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
  }

  export type reviewUpsertWithWhereUniqueWithoutUserInput = {
    where: reviewWhereUniqueInput
    update: XOR<reviewUpdateWithoutUserInput, reviewUncheckedUpdateWithoutUserInput>
    create: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput>
  }

  export type reviewUpdateWithWhereUniqueWithoutUserInput = {
    where: reviewWhereUniqueInput
    data: XOR<reviewUpdateWithoutUserInput, reviewUncheckedUpdateWithoutUserInput>
  }

  export type reviewUpdateManyWithWhereWithoutUserInput = {
    where: reviewScalarWhereInput
    data: XOR<reviewUpdateManyMutationInput, reviewUncheckedUpdateManyWithoutUserInput>
  }

  export type reviewScalarWhereInput = {
    AND?: reviewScalarWhereInput | reviewScalarWhereInput[]
    OR?: reviewScalarWhereInput[]
    NOT?: reviewScalarWhereInput | reviewScalarWhereInput[]
    id?: IntFilter<"review"> | number
    userId?: IntFilter<"review"> | number
    listingId?: IntNullableFilter<"review"> | number | null
    rating?: IntFilter<"review"> | number
    status?: EnumreviewStatusNullableFilter<"review"> | $Enums.reviewStatus | null
    comment?: StringNullableFilter<"review"> | string | null
    createdAt?: DateTimeFilter<"review"> | Date | string
    updatedAt?: DateTimeFilter<"review"> | Date | string
  }

  export type SubCategoryOptionCreateWithoutMainCategoryInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    listings?: ListingCreateNestedManyWithoutSelectedSubCategoriesInput
    specificItems?: SpecificItemOptionCreateNestedManyWithoutSubCategoryInput
  }

  export type SubCategoryOptionUncheckedCreateWithoutMainCategoryInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    listings?: ListingUncheckedCreateNestedManyWithoutSelectedSubCategoriesInput
    specificItems?: SpecificItemOptionUncheckedCreateNestedManyWithoutSubCategoryInput
  }

  export type SubCategoryOptionCreateOrConnectWithoutMainCategoryInput = {
    where: SubCategoryOptionWhereUniqueInput
    create: XOR<SubCategoryOptionCreateWithoutMainCategoryInput, SubCategoryOptionUncheckedCreateWithoutMainCategoryInput>
  }

  export type SubCategoryOptionCreateManyMainCategoryInputEnvelope = {
    data: SubCategoryOptionCreateManyMainCategoryInput | SubCategoryOptionCreateManyMainCategoryInput[]
    skipDuplicates?: boolean
  }

  export type SpecificItemOptionCreateWithoutMainCategoryInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    listings?: ListingCreateNestedManyWithoutSelectedSpecificItemsInput
    subCategory?: SubCategoryOptionCreateNestedOneWithoutSpecificItemsInput
  }

  export type SpecificItemOptionUncheckedCreateWithoutMainCategoryInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subCategoryId?: number | null
    listings?: ListingUncheckedCreateNestedManyWithoutSelectedSpecificItemsInput
  }

  export type SpecificItemOptionCreateOrConnectWithoutMainCategoryInput = {
    where: SpecificItemOptionWhereUniqueInput
    create: XOR<SpecificItemOptionCreateWithoutMainCategoryInput, SpecificItemOptionUncheckedCreateWithoutMainCategoryInput>
  }

  export type SpecificItemOptionCreateManyMainCategoryInputEnvelope = {
    data: SpecificItemOptionCreateManyMainCategoryInput | SpecificItemOptionCreateManyMainCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ListingCreateWithoutSelectedMainCategoriesInput = {
    name?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    main_image?: string | null
    sub_images?: ListingCreatesub_imagesInput | string[]
    agegroup?: ListingCreateagegroupInput | string[]
    location?: ListingCreatelocationInput | string[]
    facilities?: ListingCreatefacilitiesInput | string[]
    operatingHours?: ListingCreateoperatingHoursInput | string[]
    isActive?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingCreateNestedManyWithoutListingInput
    reviews?: reviewCreateNestedManyWithoutListingInput
    selectedSubCategories?: SubCategoryOptionCreateNestedManyWithoutListingsInput
    selectedSpecificItems?: SpecificItemOptionCreateNestedManyWithoutListingsInput
  }

  export type ListingUncheckedCreateWithoutSelectedMainCategoriesInput = {
    id?: number
    name?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    main_image?: string | null
    sub_images?: ListingCreatesub_imagesInput | string[]
    agegroup?: ListingCreateagegroupInput | string[]
    location?: ListingCreatelocationInput | string[]
    facilities?: ListingCreatefacilitiesInput | string[]
    operatingHours?: ListingCreateoperatingHoursInput | string[]
    isActive?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutListingInput
    reviews?: reviewUncheckedCreateNestedManyWithoutListingInput
    selectedSubCategories?: SubCategoryOptionUncheckedCreateNestedManyWithoutListingsInput
    selectedSpecificItems?: SpecificItemOptionUncheckedCreateNestedManyWithoutListingsInput
  }

  export type ListingCreateOrConnectWithoutSelectedMainCategoriesInput = {
    where: ListingWhereUniqueInput
    create: XOR<ListingCreateWithoutSelectedMainCategoriesInput, ListingUncheckedCreateWithoutSelectedMainCategoriesInput>
  }

  export type SubCategoryOptionUpsertWithWhereUniqueWithoutMainCategoryInput = {
    where: SubCategoryOptionWhereUniqueInput
    update: XOR<SubCategoryOptionUpdateWithoutMainCategoryInput, SubCategoryOptionUncheckedUpdateWithoutMainCategoryInput>
    create: XOR<SubCategoryOptionCreateWithoutMainCategoryInput, SubCategoryOptionUncheckedCreateWithoutMainCategoryInput>
  }

  export type SubCategoryOptionUpdateWithWhereUniqueWithoutMainCategoryInput = {
    where: SubCategoryOptionWhereUniqueInput
    data: XOR<SubCategoryOptionUpdateWithoutMainCategoryInput, SubCategoryOptionUncheckedUpdateWithoutMainCategoryInput>
  }

  export type SubCategoryOptionUpdateManyWithWhereWithoutMainCategoryInput = {
    where: SubCategoryOptionScalarWhereInput
    data: XOR<SubCategoryOptionUpdateManyMutationInput, SubCategoryOptionUncheckedUpdateManyWithoutMainCategoryInput>
  }

  export type SubCategoryOptionScalarWhereInput = {
    AND?: SubCategoryOptionScalarWhereInput | SubCategoryOptionScalarWhereInput[]
    OR?: SubCategoryOptionScalarWhereInput[]
    NOT?: SubCategoryOptionScalarWhereInput | SubCategoryOptionScalarWhereInput[]
    id?: IntFilter<"SubCategoryOption"> | number
    name?: StringFilter<"SubCategoryOption"> | string
    createdAt?: DateTimeFilter<"SubCategoryOption"> | Date | string
    updatedAt?: DateTimeFilter<"SubCategoryOption"> | Date | string
    mainCategoryId?: IntNullableFilter<"SubCategoryOption"> | number | null
  }

  export type SpecificItemOptionUpsertWithWhereUniqueWithoutMainCategoryInput = {
    where: SpecificItemOptionWhereUniqueInput
    update: XOR<SpecificItemOptionUpdateWithoutMainCategoryInput, SpecificItemOptionUncheckedUpdateWithoutMainCategoryInput>
    create: XOR<SpecificItemOptionCreateWithoutMainCategoryInput, SpecificItemOptionUncheckedCreateWithoutMainCategoryInput>
  }

  export type SpecificItemOptionUpdateWithWhereUniqueWithoutMainCategoryInput = {
    where: SpecificItemOptionWhereUniqueInput
    data: XOR<SpecificItemOptionUpdateWithoutMainCategoryInput, SpecificItemOptionUncheckedUpdateWithoutMainCategoryInput>
  }

  export type SpecificItemOptionUpdateManyWithWhereWithoutMainCategoryInput = {
    where: SpecificItemOptionScalarWhereInput
    data: XOR<SpecificItemOptionUpdateManyMutationInput, SpecificItemOptionUncheckedUpdateManyWithoutMainCategoryInput>
  }

  export type SpecificItemOptionScalarWhereInput = {
    AND?: SpecificItemOptionScalarWhereInput | SpecificItemOptionScalarWhereInput[]
    OR?: SpecificItemOptionScalarWhereInput[]
    NOT?: SpecificItemOptionScalarWhereInput | SpecificItemOptionScalarWhereInput[]
    id?: IntFilter<"SpecificItemOption"> | number
    name?: StringFilter<"SpecificItemOption"> | string
    createdAt?: DateTimeFilter<"SpecificItemOption"> | Date | string
    updatedAt?: DateTimeFilter<"SpecificItemOption"> | Date | string
    subCategoryId?: IntNullableFilter<"SpecificItemOption"> | number | null
    mainCategoryId?: IntNullableFilter<"SpecificItemOption"> | number | null
  }

  export type ListingUpsertWithWhereUniqueWithoutSelectedMainCategoriesInput = {
    where: ListingWhereUniqueInput
    update: XOR<ListingUpdateWithoutSelectedMainCategoriesInput, ListingUncheckedUpdateWithoutSelectedMainCategoriesInput>
    create: XOR<ListingCreateWithoutSelectedMainCategoriesInput, ListingUncheckedCreateWithoutSelectedMainCategoriesInput>
  }

  export type ListingUpdateWithWhereUniqueWithoutSelectedMainCategoriesInput = {
    where: ListingWhereUniqueInput
    data: XOR<ListingUpdateWithoutSelectedMainCategoriesInput, ListingUncheckedUpdateWithoutSelectedMainCategoriesInput>
  }

  export type ListingUpdateManyWithWhereWithoutSelectedMainCategoriesInput = {
    where: ListingScalarWhereInput
    data: XOR<ListingUpdateManyMutationInput, ListingUncheckedUpdateManyWithoutSelectedMainCategoriesInput>
  }

  export type ListingScalarWhereInput = {
    AND?: ListingScalarWhereInput | ListingScalarWhereInput[]
    OR?: ListingScalarWhereInput[]
    NOT?: ListingScalarWhereInput | ListingScalarWhereInput[]
    id?: IntFilter<"Listing"> | number
    name?: StringNullableFilter<"Listing"> | string | null
    price?: DecimalNullableFilter<"Listing"> | Decimal | DecimalJsLike | number | string | null
    main_image?: StringNullableFilter<"Listing"> | string | null
    sub_images?: StringNullableListFilter<"Listing">
    agegroup?: StringNullableListFilter<"Listing">
    location?: StringNullableListFilter<"Listing">
    facilities?: StringNullableListFilter<"Listing">
    operatingHours?: StringNullableListFilter<"Listing">
    isActive?: BoolFilter<"Listing"> | boolean
    description?: StringNullableFilter<"Listing"> | string | null
    createdAt?: DateTimeFilter<"Listing"> | Date | string
    updatedAt?: DateTimeFilter<"Listing"> | Date | string
  }

  export type ListingCreateWithoutSelectedSubCategoriesInput = {
    name?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    main_image?: string | null
    sub_images?: ListingCreatesub_imagesInput | string[]
    agegroup?: ListingCreateagegroupInput | string[]
    location?: ListingCreatelocationInput | string[]
    facilities?: ListingCreatefacilitiesInput | string[]
    operatingHours?: ListingCreateoperatingHoursInput | string[]
    isActive?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingCreateNestedManyWithoutListingInput
    reviews?: reviewCreateNestedManyWithoutListingInput
    selectedMainCategories?: MainCategoryOptionCreateNestedManyWithoutListingsInput
    selectedSpecificItems?: SpecificItemOptionCreateNestedManyWithoutListingsInput
  }

  export type ListingUncheckedCreateWithoutSelectedSubCategoriesInput = {
    id?: number
    name?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    main_image?: string | null
    sub_images?: ListingCreatesub_imagesInput | string[]
    agegroup?: ListingCreateagegroupInput | string[]
    location?: ListingCreatelocationInput | string[]
    facilities?: ListingCreatefacilitiesInput | string[]
    operatingHours?: ListingCreateoperatingHoursInput | string[]
    isActive?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutListingInput
    reviews?: reviewUncheckedCreateNestedManyWithoutListingInput
    selectedMainCategories?: MainCategoryOptionUncheckedCreateNestedManyWithoutListingsInput
    selectedSpecificItems?: SpecificItemOptionUncheckedCreateNestedManyWithoutListingsInput
  }

  export type ListingCreateOrConnectWithoutSelectedSubCategoriesInput = {
    where: ListingWhereUniqueInput
    create: XOR<ListingCreateWithoutSelectedSubCategoriesInput, ListingUncheckedCreateWithoutSelectedSubCategoriesInput>
  }

  export type MainCategoryOptionCreateWithoutSubCategoriesInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    specificItems?: SpecificItemOptionCreateNestedManyWithoutMainCategoryInput
    listings?: ListingCreateNestedManyWithoutSelectedMainCategoriesInput
  }

  export type MainCategoryOptionUncheckedCreateWithoutSubCategoriesInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    specificItems?: SpecificItemOptionUncheckedCreateNestedManyWithoutMainCategoryInput
    listings?: ListingUncheckedCreateNestedManyWithoutSelectedMainCategoriesInput
  }

  export type MainCategoryOptionCreateOrConnectWithoutSubCategoriesInput = {
    where: MainCategoryOptionWhereUniqueInput
    create: XOR<MainCategoryOptionCreateWithoutSubCategoriesInput, MainCategoryOptionUncheckedCreateWithoutSubCategoriesInput>
  }

  export type SpecificItemOptionCreateWithoutSubCategoryInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    listings?: ListingCreateNestedManyWithoutSelectedSpecificItemsInput
    mainCategory?: MainCategoryOptionCreateNestedOneWithoutSpecificItemsInput
  }

  export type SpecificItemOptionUncheckedCreateWithoutSubCategoryInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mainCategoryId?: number | null
    listings?: ListingUncheckedCreateNestedManyWithoutSelectedSpecificItemsInput
  }

  export type SpecificItemOptionCreateOrConnectWithoutSubCategoryInput = {
    where: SpecificItemOptionWhereUniqueInput
    create: XOR<SpecificItemOptionCreateWithoutSubCategoryInput, SpecificItemOptionUncheckedCreateWithoutSubCategoryInput>
  }

  export type SpecificItemOptionCreateManySubCategoryInputEnvelope = {
    data: SpecificItemOptionCreateManySubCategoryInput | SpecificItemOptionCreateManySubCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ListingUpsertWithWhereUniqueWithoutSelectedSubCategoriesInput = {
    where: ListingWhereUniqueInput
    update: XOR<ListingUpdateWithoutSelectedSubCategoriesInput, ListingUncheckedUpdateWithoutSelectedSubCategoriesInput>
    create: XOR<ListingCreateWithoutSelectedSubCategoriesInput, ListingUncheckedCreateWithoutSelectedSubCategoriesInput>
  }

  export type ListingUpdateWithWhereUniqueWithoutSelectedSubCategoriesInput = {
    where: ListingWhereUniqueInput
    data: XOR<ListingUpdateWithoutSelectedSubCategoriesInput, ListingUncheckedUpdateWithoutSelectedSubCategoriesInput>
  }

  export type ListingUpdateManyWithWhereWithoutSelectedSubCategoriesInput = {
    where: ListingScalarWhereInput
    data: XOR<ListingUpdateManyMutationInput, ListingUncheckedUpdateManyWithoutSelectedSubCategoriesInput>
  }

  export type MainCategoryOptionUpsertWithoutSubCategoriesInput = {
    update: XOR<MainCategoryOptionUpdateWithoutSubCategoriesInput, MainCategoryOptionUncheckedUpdateWithoutSubCategoriesInput>
    create: XOR<MainCategoryOptionCreateWithoutSubCategoriesInput, MainCategoryOptionUncheckedCreateWithoutSubCategoriesInput>
    where?: MainCategoryOptionWhereInput
  }

  export type MainCategoryOptionUpdateToOneWithWhereWithoutSubCategoriesInput = {
    where?: MainCategoryOptionWhereInput
    data: XOR<MainCategoryOptionUpdateWithoutSubCategoriesInput, MainCategoryOptionUncheckedUpdateWithoutSubCategoriesInput>
  }

  export type MainCategoryOptionUpdateWithoutSubCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specificItems?: SpecificItemOptionUpdateManyWithoutMainCategoryNestedInput
    listings?: ListingUpdateManyWithoutSelectedMainCategoriesNestedInput
  }

  export type MainCategoryOptionUncheckedUpdateWithoutSubCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specificItems?: SpecificItemOptionUncheckedUpdateManyWithoutMainCategoryNestedInput
    listings?: ListingUncheckedUpdateManyWithoutSelectedMainCategoriesNestedInput
  }

  export type SpecificItemOptionUpsertWithWhereUniqueWithoutSubCategoryInput = {
    where: SpecificItemOptionWhereUniqueInput
    update: XOR<SpecificItemOptionUpdateWithoutSubCategoryInput, SpecificItemOptionUncheckedUpdateWithoutSubCategoryInput>
    create: XOR<SpecificItemOptionCreateWithoutSubCategoryInput, SpecificItemOptionUncheckedCreateWithoutSubCategoryInput>
  }

  export type SpecificItemOptionUpdateWithWhereUniqueWithoutSubCategoryInput = {
    where: SpecificItemOptionWhereUniqueInput
    data: XOR<SpecificItemOptionUpdateWithoutSubCategoryInput, SpecificItemOptionUncheckedUpdateWithoutSubCategoryInput>
  }

  export type SpecificItemOptionUpdateManyWithWhereWithoutSubCategoryInput = {
    where: SpecificItemOptionScalarWhereInput
    data: XOR<SpecificItemOptionUpdateManyMutationInput, SpecificItemOptionUncheckedUpdateManyWithoutSubCategoryInput>
  }

  export type ListingCreateWithoutSelectedSpecificItemsInput = {
    name?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    main_image?: string | null
    sub_images?: ListingCreatesub_imagesInput | string[]
    agegroup?: ListingCreateagegroupInput | string[]
    location?: ListingCreatelocationInput | string[]
    facilities?: ListingCreatefacilitiesInput | string[]
    operatingHours?: ListingCreateoperatingHoursInput | string[]
    isActive?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingCreateNestedManyWithoutListingInput
    reviews?: reviewCreateNestedManyWithoutListingInput
    selectedMainCategories?: MainCategoryOptionCreateNestedManyWithoutListingsInput
    selectedSubCategories?: SubCategoryOptionCreateNestedManyWithoutListingsInput
  }

  export type ListingUncheckedCreateWithoutSelectedSpecificItemsInput = {
    id?: number
    name?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    main_image?: string | null
    sub_images?: ListingCreatesub_imagesInput | string[]
    agegroup?: ListingCreateagegroupInput | string[]
    location?: ListingCreatelocationInput | string[]
    facilities?: ListingCreatefacilitiesInput | string[]
    operatingHours?: ListingCreateoperatingHoursInput | string[]
    isActive?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutListingInput
    reviews?: reviewUncheckedCreateNestedManyWithoutListingInput
    selectedMainCategories?: MainCategoryOptionUncheckedCreateNestedManyWithoutListingsInput
    selectedSubCategories?: SubCategoryOptionUncheckedCreateNestedManyWithoutListingsInput
  }

  export type ListingCreateOrConnectWithoutSelectedSpecificItemsInput = {
    where: ListingWhereUniqueInput
    create: XOR<ListingCreateWithoutSelectedSpecificItemsInput, ListingUncheckedCreateWithoutSelectedSpecificItemsInput>
  }

  export type SubCategoryOptionCreateWithoutSpecificItemsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    listings?: ListingCreateNestedManyWithoutSelectedSubCategoriesInput
    mainCategory?: MainCategoryOptionCreateNestedOneWithoutSubCategoriesInput
  }

  export type SubCategoryOptionUncheckedCreateWithoutSpecificItemsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mainCategoryId?: number | null
    listings?: ListingUncheckedCreateNestedManyWithoutSelectedSubCategoriesInput
  }

  export type SubCategoryOptionCreateOrConnectWithoutSpecificItemsInput = {
    where: SubCategoryOptionWhereUniqueInput
    create: XOR<SubCategoryOptionCreateWithoutSpecificItemsInput, SubCategoryOptionUncheckedCreateWithoutSpecificItemsInput>
  }

  export type MainCategoryOptionCreateWithoutSpecificItemsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subCategories?: SubCategoryOptionCreateNestedManyWithoutMainCategoryInput
    listings?: ListingCreateNestedManyWithoutSelectedMainCategoriesInput
  }

  export type MainCategoryOptionUncheckedCreateWithoutSpecificItemsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subCategories?: SubCategoryOptionUncheckedCreateNestedManyWithoutMainCategoryInput
    listings?: ListingUncheckedCreateNestedManyWithoutSelectedMainCategoriesInput
  }

  export type MainCategoryOptionCreateOrConnectWithoutSpecificItemsInput = {
    where: MainCategoryOptionWhereUniqueInput
    create: XOR<MainCategoryOptionCreateWithoutSpecificItemsInput, MainCategoryOptionUncheckedCreateWithoutSpecificItemsInput>
  }

  export type ListingUpsertWithWhereUniqueWithoutSelectedSpecificItemsInput = {
    where: ListingWhereUniqueInput
    update: XOR<ListingUpdateWithoutSelectedSpecificItemsInput, ListingUncheckedUpdateWithoutSelectedSpecificItemsInput>
    create: XOR<ListingCreateWithoutSelectedSpecificItemsInput, ListingUncheckedCreateWithoutSelectedSpecificItemsInput>
  }

  export type ListingUpdateWithWhereUniqueWithoutSelectedSpecificItemsInput = {
    where: ListingWhereUniqueInput
    data: XOR<ListingUpdateWithoutSelectedSpecificItemsInput, ListingUncheckedUpdateWithoutSelectedSpecificItemsInput>
  }

  export type ListingUpdateManyWithWhereWithoutSelectedSpecificItemsInput = {
    where: ListingScalarWhereInput
    data: XOR<ListingUpdateManyMutationInput, ListingUncheckedUpdateManyWithoutSelectedSpecificItemsInput>
  }

  export type SubCategoryOptionUpsertWithoutSpecificItemsInput = {
    update: XOR<SubCategoryOptionUpdateWithoutSpecificItemsInput, SubCategoryOptionUncheckedUpdateWithoutSpecificItemsInput>
    create: XOR<SubCategoryOptionCreateWithoutSpecificItemsInput, SubCategoryOptionUncheckedCreateWithoutSpecificItemsInput>
    where?: SubCategoryOptionWhereInput
  }

  export type SubCategoryOptionUpdateToOneWithWhereWithoutSpecificItemsInput = {
    where?: SubCategoryOptionWhereInput
    data: XOR<SubCategoryOptionUpdateWithoutSpecificItemsInput, SubCategoryOptionUncheckedUpdateWithoutSpecificItemsInput>
  }

  export type SubCategoryOptionUpdateWithoutSpecificItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    listings?: ListingUpdateManyWithoutSelectedSubCategoriesNestedInput
    mainCategory?: MainCategoryOptionUpdateOneWithoutSubCategoriesNestedInput
  }

  export type SubCategoryOptionUncheckedUpdateWithoutSpecificItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mainCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    listings?: ListingUncheckedUpdateManyWithoutSelectedSubCategoriesNestedInput
  }

  export type MainCategoryOptionUpsertWithoutSpecificItemsInput = {
    update: XOR<MainCategoryOptionUpdateWithoutSpecificItemsInput, MainCategoryOptionUncheckedUpdateWithoutSpecificItemsInput>
    create: XOR<MainCategoryOptionCreateWithoutSpecificItemsInput, MainCategoryOptionUncheckedCreateWithoutSpecificItemsInput>
    where?: MainCategoryOptionWhereInput
  }

  export type MainCategoryOptionUpdateToOneWithWhereWithoutSpecificItemsInput = {
    where?: MainCategoryOptionWhereInput
    data: XOR<MainCategoryOptionUpdateWithoutSpecificItemsInput, MainCategoryOptionUncheckedUpdateWithoutSpecificItemsInput>
  }

  export type MainCategoryOptionUpdateWithoutSpecificItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategories?: SubCategoryOptionUpdateManyWithoutMainCategoryNestedInput
    listings?: ListingUpdateManyWithoutSelectedMainCategoriesNestedInput
  }

  export type MainCategoryOptionUncheckedUpdateWithoutSpecificItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategories?: SubCategoryOptionUncheckedUpdateManyWithoutMainCategoryNestedInput
    listings?: ListingUncheckedUpdateManyWithoutSelectedMainCategoriesNestedInput
  }

  export type BookingCreateWithoutListingInput = {
    bookingDate?: Date | string | null
    booking_hours?: string | null
    additionalNote?: string | null
    ageGroup?: string | null
    numberOfPersons?: number | null
    paymentMethod?: $Enums.BookingPaymentMethod | null
    status?: $Enums.BookingStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBookingsInput
    review?: reviewCreateNestedOneWithoutBookingInput
    reward?: RewardCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutListingInput = {
    id?: number
    userId: number
    bookingDate?: Date | string | null
    booking_hours?: string | null
    additionalNote?: string | null
    ageGroup?: string | null
    numberOfPersons?: number | null
    paymentMethod?: $Enums.BookingPaymentMethod | null
    status?: $Enums.BookingStatus | null
    review_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reward?: RewardUncheckedCreateNestedOneWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutListingInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutListingInput, BookingUncheckedCreateWithoutListingInput>
  }

  export type BookingCreateManyListingInputEnvelope = {
    data: BookingCreateManyListingInput | BookingCreateManyListingInput[]
    skipDuplicates?: boolean
  }

  export type reviewCreateWithoutListingInput = {
    rating: number
    status?: $Enums.reviewStatus | null
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
    booking?: BookingCreateNestedOneWithoutReviewInput
  }

  export type reviewUncheckedCreateWithoutListingInput = {
    id?: number
    userId: number
    rating: number
    status?: $Enums.reviewStatus | null
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    booking?: BookingUncheckedCreateNestedOneWithoutReviewInput
  }

  export type reviewCreateOrConnectWithoutListingInput = {
    where: reviewWhereUniqueInput
    create: XOR<reviewCreateWithoutListingInput, reviewUncheckedCreateWithoutListingInput>
  }

  export type reviewCreateManyListingInputEnvelope = {
    data: reviewCreateManyListingInput | reviewCreateManyListingInput[]
    skipDuplicates?: boolean
  }

  export type MainCategoryOptionCreateWithoutListingsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subCategories?: SubCategoryOptionCreateNestedManyWithoutMainCategoryInput
    specificItems?: SpecificItemOptionCreateNestedManyWithoutMainCategoryInput
  }

  export type MainCategoryOptionUncheckedCreateWithoutListingsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subCategories?: SubCategoryOptionUncheckedCreateNestedManyWithoutMainCategoryInput
    specificItems?: SpecificItemOptionUncheckedCreateNestedManyWithoutMainCategoryInput
  }

  export type MainCategoryOptionCreateOrConnectWithoutListingsInput = {
    where: MainCategoryOptionWhereUniqueInput
    create: XOR<MainCategoryOptionCreateWithoutListingsInput, MainCategoryOptionUncheckedCreateWithoutListingsInput>
  }

  export type SubCategoryOptionCreateWithoutListingsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mainCategory?: MainCategoryOptionCreateNestedOneWithoutSubCategoriesInput
    specificItems?: SpecificItemOptionCreateNestedManyWithoutSubCategoryInput
  }

  export type SubCategoryOptionUncheckedCreateWithoutListingsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mainCategoryId?: number | null
    specificItems?: SpecificItemOptionUncheckedCreateNestedManyWithoutSubCategoryInput
  }

  export type SubCategoryOptionCreateOrConnectWithoutListingsInput = {
    where: SubCategoryOptionWhereUniqueInput
    create: XOR<SubCategoryOptionCreateWithoutListingsInput, SubCategoryOptionUncheckedCreateWithoutListingsInput>
  }

  export type SpecificItemOptionCreateWithoutListingsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subCategory?: SubCategoryOptionCreateNestedOneWithoutSpecificItemsInput
    mainCategory?: MainCategoryOptionCreateNestedOneWithoutSpecificItemsInput
  }

  export type SpecificItemOptionUncheckedCreateWithoutListingsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subCategoryId?: number | null
    mainCategoryId?: number | null
  }

  export type SpecificItemOptionCreateOrConnectWithoutListingsInput = {
    where: SpecificItemOptionWhereUniqueInput
    create: XOR<SpecificItemOptionCreateWithoutListingsInput, SpecificItemOptionUncheckedCreateWithoutListingsInput>
  }

  export type BookingUpsertWithWhereUniqueWithoutListingInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutListingInput, BookingUncheckedUpdateWithoutListingInput>
    create: XOR<BookingCreateWithoutListingInput, BookingUncheckedCreateWithoutListingInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutListingInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutListingInput, BookingUncheckedUpdateWithoutListingInput>
  }

  export type BookingUpdateManyWithWhereWithoutListingInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutListingInput>
  }

  export type reviewUpsertWithWhereUniqueWithoutListingInput = {
    where: reviewWhereUniqueInput
    update: XOR<reviewUpdateWithoutListingInput, reviewUncheckedUpdateWithoutListingInput>
    create: XOR<reviewCreateWithoutListingInput, reviewUncheckedCreateWithoutListingInput>
  }

  export type reviewUpdateWithWhereUniqueWithoutListingInput = {
    where: reviewWhereUniqueInput
    data: XOR<reviewUpdateWithoutListingInput, reviewUncheckedUpdateWithoutListingInput>
  }

  export type reviewUpdateManyWithWhereWithoutListingInput = {
    where: reviewScalarWhereInput
    data: XOR<reviewUpdateManyMutationInput, reviewUncheckedUpdateManyWithoutListingInput>
  }

  export type MainCategoryOptionUpsertWithWhereUniqueWithoutListingsInput = {
    where: MainCategoryOptionWhereUniqueInput
    update: XOR<MainCategoryOptionUpdateWithoutListingsInput, MainCategoryOptionUncheckedUpdateWithoutListingsInput>
    create: XOR<MainCategoryOptionCreateWithoutListingsInput, MainCategoryOptionUncheckedCreateWithoutListingsInput>
  }

  export type MainCategoryOptionUpdateWithWhereUniqueWithoutListingsInput = {
    where: MainCategoryOptionWhereUniqueInput
    data: XOR<MainCategoryOptionUpdateWithoutListingsInput, MainCategoryOptionUncheckedUpdateWithoutListingsInput>
  }

  export type MainCategoryOptionUpdateManyWithWhereWithoutListingsInput = {
    where: MainCategoryOptionScalarWhereInput
    data: XOR<MainCategoryOptionUpdateManyMutationInput, MainCategoryOptionUncheckedUpdateManyWithoutListingsInput>
  }

  export type MainCategoryOptionScalarWhereInput = {
    AND?: MainCategoryOptionScalarWhereInput | MainCategoryOptionScalarWhereInput[]
    OR?: MainCategoryOptionScalarWhereInput[]
    NOT?: MainCategoryOptionScalarWhereInput | MainCategoryOptionScalarWhereInput[]
    id?: IntFilter<"MainCategoryOption"> | number
    name?: StringFilter<"MainCategoryOption"> | string
    createdAt?: DateTimeFilter<"MainCategoryOption"> | Date | string
    updatedAt?: DateTimeFilter<"MainCategoryOption"> | Date | string
  }

  export type SubCategoryOptionUpsertWithWhereUniqueWithoutListingsInput = {
    where: SubCategoryOptionWhereUniqueInput
    update: XOR<SubCategoryOptionUpdateWithoutListingsInput, SubCategoryOptionUncheckedUpdateWithoutListingsInput>
    create: XOR<SubCategoryOptionCreateWithoutListingsInput, SubCategoryOptionUncheckedCreateWithoutListingsInput>
  }

  export type SubCategoryOptionUpdateWithWhereUniqueWithoutListingsInput = {
    where: SubCategoryOptionWhereUniqueInput
    data: XOR<SubCategoryOptionUpdateWithoutListingsInput, SubCategoryOptionUncheckedUpdateWithoutListingsInput>
  }

  export type SubCategoryOptionUpdateManyWithWhereWithoutListingsInput = {
    where: SubCategoryOptionScalarWhereInput
    data: XOR<SubCategoryOptionUpdateManyMutationInput, SubCategoryOptionUncheckedUpdateManyWithoutListingsInput>
  }

  export type SpecificItemOptionUpsertWithWhereUniqueWithoutListingsInput = {
    where: SpecificItemOptionWhereUniqueInput
    update: XOR<SpecificItemOptionUpdateWithoutListingsInput, SpecificItemOptionUncheckedUpdateWithoutListingsInput>
    create: XOR<SpecificItemOptionCreateWithoutListingsInput, SpecificItemOptionUncheckedCreateWithoutListingsInput>
  }

  export type SpecificItemOptionUpdateWithWhereUniqueWithoutListingsInput = {
    where: SpecificItemOptionWhereUniqueInput
    data: XOR<SpecificItemOptionUpdateWithoutListingsInput, SpecificItemOptionUncheckedUpdateWithoutListingsInput>
  }

  export type SpecificItemOptionUpdateManyWithWhereWithoutListingsInput = {
    where: SpecificItemOptionScalarWhereInput
    data: XOR<SpecificItemOptionUpdateManyMutationInput, SpecificItemOptionUncheckedUpdateManyWithoutListingsInput>
  }

  export type UserCreateWithoutReviewsInput = {
    fname?: string | null
    lname?: string | null
    email: string
    uid: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingCreateNestedManyWithoutUserInput
    rewards?: RewardCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    email: string
    uid: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    rewards?: RewardUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type ListingCreateWithoutReviewsInput = {
    name?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    main_image?: string | null
    sub_images?: ListingCreatesub_imagesInput | string[]
    agegroup?: ListingCreateagegroupInput | string[]
    location?: ListingCreatelocationInput | string[]
    facilities?: ListingCreatefacilitiesInput | string[]
    operatingHours?: ListingCreateoperatingHoursInput | string[]
    isActive?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingCreateNestedManyWithoutListingInput
    selectedMainCategories?: MainCategoryOptionCreateNestedManyWithoutListingsInput
    selectedSubCategories?: SubCategoryOptionCreateNestedManyWithoutListingsInput
    selectedSpecificItems?: SpecificItemOptionCreateNestedManyWithoutListingsInput
  }

  export type ListingUncheckedCreateWithoutReviewsInput = {
    id?: number
    name?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    main_image?: string | null
    sub_images?: ListingCreatesub_imagesInput | string[]
    agegroup?: ListingCreateagegroupInput | string[]
    location?: ListingCreatelocationInput | string[]
    facilities?: ListingCreatefacilitiesInput | string[]
    operatingHours?: ListingCreateoperatingHoursInput | string[]
    isActive?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutListingInput
    selectedMainCategories?: MainCategoryOptionUncheckedCreateNestedManyWithoutListingsInput
    selectedSubCategories?: SubCategoryOptionUncheckedCreateNestedManyWithoutListingsInput
    selectedSpecificItems?: SpecificItemOptionUncheckedCreateNestedManyWithoutListingsInput
  }

  export type ListingCreateOrConnectWithoutReviewsInput = {
    where: ListingWhereUniqueInput
    create: XOR<ListingCreateWithoutReviewsInput, ListingUncheckedCreateWithoutReviewsInput>
  }

  export type BookingCreateWithoutReviewInput = {
    bookingDate?: Date | string | null
    booking_hours?: string | null
    additionalNote?: string | null
    ageGroup?: string | null
    numberOfPersons?: number | null
    paymentMethod?: $Enums.BookingPaymentMethod | null
    status?: $Enums.BookingStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBookingsInput
    listing?: ListingCreateNestedOneWithoutBookingsInput
    reward?: RewardCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutReviewInput = {
    id?: number
    userId: number
    listingId?: number | null
    bookingDate?: Date | string | null
    booking_hours?: string | null
    additionalNote?: string | null
    ageGroup?: string | null
    numberOfPersons?: number | null
    paymentMethod?: $Enums.BookingPaymentMethod | null
    status?: $Enums.BookingStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reward?: RewardUncheckedCreateNestedOneWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutReviewInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutReviewInput, BookingUncheckedCreateWithoutReviewInput>
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUpdateManyWithoutUserNestedInput
    rewards?: RewardUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    rewards?: RewardUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ListingUpsertWithoutReviewsInput = {
    update: XOR<ListingUpdateWithoutReviewsInput, ListingUncheckedUpdateWithoutReviewsInput>
    create: XOR<ListingCreateWithoutReviewsInput, ListingUncheckedCreateWithoutReviewsInput>
    where?: ListingWhereInput
  }

  export type ListingUpdateToOneWithWhereWithoutReviewsInput = {
    where?: ListingWhereInput
    data: XOR<ListingUpdateWithoutReviewsInput, ListingUncheckedUpdateWithoutReviewsInput>
  }

  export type ListingUpdateWithoutReviewsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUpdateManyWithoutListingNestedInput
    selectedMainCategories?: MainCategoryOptionUpdateManyWithoutListingsNestedInput
    selectedSubCategories?: SubCategoryOptionUpdateManyWithoutListingsNestedInput
    selectedSpecificItems?: SpecificItemOptionUpdateManyWithoutListingsNestedInput
  }

  export type ListingUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutListingNestedInput
    selectedMainCategories?: MainCategoryOptionUncheckedUpdateManyWithoutListingsNestedInput
    selectedSubCategories?: SubCategoryOptionUncheckedUpdateManyWithoutListingsNestedInput
    selectedSpecificItems?: SpecificItemOptionUncheckedUpdateManyWithoutListingsNestedInput
  }

  export type BookingUpsertWithoutReviewInput = {
    update: XOR<BookingUpdateWithoutReviewInput, BookingUncheckedUpdateWithoutReviewInput>
    create: XOR<BookingCreateWithoutReviewInput, BookingUncheckedCreateWithoutReviewInput>
    where?: BookingWhereInput
  }

  export type BookingUpdateToOneWithWhereWithoutReviewInput = {
    where?: BookingWhereInput
    data: XOR<BookingUpdateWithoutReviewInput, BookingUncheckedUpdateWithoutReviewInput>
  }

  export type BookingUpdateWithoutReviewInput = {
    bookingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking_hours?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfPersons?: NullableIntFieldUpdateOperationsInput | number | null
    paymentMethod?: NullableEnumBookingPaymentMethodFieldUpdateOperationsInput | $Enums.BookingPaymentMethod | null
    status?: NullableEnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBookingsNestedInput
    listing?: ListingUpdateOneWithoutBookingsNestedInput
    reward?: RewardUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    listingId?: NullableIntFieldUpdateOperationsInput | number | null
    bookingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking_hours?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfPersons?: NullableIntFieldUpdateOperationsInput | number | null
    paymentMethod?: NullableEnumBookingPaymentMethodFieldUpdateOperationsInput | $Enums.BookingPaymentMethod | null
    status?: NullableEnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reward?: RewardUncheckedUpdateOneWithoutBookingNestedInput
  }

  export type UserCreateWithoutBookingsInput = {
    fname?: string | null
    lname?: string | null
    email: string
    uid: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rewards?: RewardCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    reviews?: reviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBookingsInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    email: string
    uid: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rewards?: RewardUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBookingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
  }

  export type ListingCreateWithoutBookingsInput = {
    name?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    main_image?: string | null
    sub_images?: ListingCreatesub_imagesInput | string[]
    agegroup?: ListingCreateagegroupInput | string[]
    location?: ListingCreatelocationInput | string[]
    facilities?: ListingCreatefacilitiesInput | string[]
    operatingHours?: ListingCreateoperatingHoursInput | string[]
    isActive?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviews?: reviewCreateNestedManyWithoutListingInput
    selectedMainCategories?: MainCategoryOptionCreateNestedManyWithoutListingsInput
    selectedSubCategories?: SubCategoryOptionCreateNestedManyWithoutListingsInput
    selectedSpecificItems?: SpecificItemOptionCreateNestedManyWithoutListingsInput
  }

  export type ListingUncheckedCreateWithoutBookingsInput = {
    id?: number
    name?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    main_image?: string | null
    sub_images?: ListingCreatesub_imagesInput | string[]
    agegroup?: ListingCreateagegroupInput | string[]
    location?: ListingCreatelocationInput | string[]
    facilities?: ListingCreatefacilitiesInput | string[]
    operatingHours?: ListingCreateoperatingHoursInput | string[]
    isActive?: boolean
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviews?: reviewUncheckedCreateNestedManyWithoutListingInput
    selectedMainCategories?: MainCategoryOptionUncheckedCreateNestedManyWithoutListingsInput
    selectedSubCategories?: SubCategoryOptionUncheckedCreateNestedManyWithoutListingsInput
    selectedSpecificItems?: SpecificItemOptionUncheckedCreateNestedManyWithoutListingsInput
  }

  export type ListingCreateOrConnectWithoutBookingsInput = {
    where: ListingWhereUniqueInput
    create: XOR<ListingCreateWithoutBookingsInput, ListingUncheckedCreateWithoutBookingsInput>
  }

  export type reviewCreateWithoutBookingInput = {
    rating: number
    status?: $Enums.reviewStatus | null
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
    listing?: ListingCreateNestedOneWithoutReviewsInput
  }

  export type reviewUncheckedCreateWithoutBookingInput = {
    id?: number
    userId: number
    listingId?: number | null
    rating: number
    status?: $Enums.reviewStatus | null
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type reviewCreateOrConnectWithoutBookingInput = {
    where: reviewWhereUniqueInput
    create: XOR<reviewCreateWithoutBookingInput, reviewUncheckedCreateWithoutBookingInput>
  }

  export type RewardCreateWithoutBookingInput = {
    points?: number | null
    description?: string | null
    category?: $Enums.reward_category | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRewardsInput
  }

  export type RewardUncheckedCreateWithoutBookingInput = {
    id?: number
    userId: number
    points?: number | null
    description?: string | null
    category?: $Enums.reward_category | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RewardCreateOrConnectWithoutBookingInput = {
    where: RewardWhereUniqueInput
    create: XOR<RewardCreateWithoutBookingInput, RewardUncheckedCreateWithoutBookingInput>
  }

  export type UserUpsertWithoutBookingsInput = {
    update: XOR<UserUpdateWithoutBookingsInput, UserUncheckedUpdateWithoutBookingsInput>
    create: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBookingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBookingsInput, UserUncheckedUpdateWithoutBookingsInput>
  }

  export type UserUpdateWithoutBookingsInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rewards?: RewardUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    reviews?: reviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBookingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rewards?: RewardUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ListingUpsertWithoutBookingsInput = {
    update: XOR<ListingUpdateWithoutBookingsInput, ListingUncheckedUpdateWithoutBookingsInput>
    create: XOR<ListingCreateWithoutBookingsInput, ListingUncheckedCreateWithoutBookingsInput>
    where?: ListingWhereInput
  }

  export type ListingUpdateToOneWithWhereWithoutBookingsInput = {
    where?: ListingWhereInput
    data: XOR<ListingUpdateWithoutBookingsInput, ListingUncheckedUpdateWithoutBookingsInput>
  }

  export type ListingUpdateWithoutBookingsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: reviewUpdateManyWithoutListingNestedInput
    selectedMainCategories?: MainCategoryOptionUpdateManyWithoutListingsNestedInput
    selectedSubCategories?: SubCategoryOptionUpdateManyWithoutListingsNestedInput
    selectedSpecificItems?: SpecificItemOptionUpdateManyWithoutListingsNestedInput
  }

  export type ListingUncheckedUpdateWithoutBookingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: reviewUncheckedUpdateManyWithoutListingNestedInput
    selectedMainCategories?: MainCategoryOptionUncheckedUpdateManyWithoutListingsNestedInput
    selectedSubCategories?: SubCategoryOptionUncheckedUpdateManyWithoutListingsNestedInput
    selectedSpecificItems?: SpecificItemOptionUncheckedUpdateManyWithoutListingsNestedInput
  }

  export type reviewUpsertWithoutBookingInput = {
    update: XOR<reviewUpdateWithoutBookingInput, reviewUncheckedUpdateWithoutBookingInput>
    create: XOR<reviewCreateWithoutBookingInput, reviewUncheckedCreateWithoutBookingInput>
    where?: reviewWhereInput
  }

  export type reviewUpdateToOneWithWhereWithoutBookingInput = {
    where?: reviewWhereInput
    data: XOR<reviewUpdateWithoutBookingInput, reviewUncheckedUpdateWithoutBookingInput>
  }

  export type reviewUpdateWithoutBookingInput = {
    rating?: IntFieldUpdateOperationsInput | number
    status?: NullableEnumreviewStatusFieldUpdateOperationsInput | $Enums.reviewStatus | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    listing?: ListingUpdateOneWithoutReviewsNestedInput
  }

  export type reviewUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    listingId?: NullableIntFieldUpdateOperationsInput | number | null
    rating?: IntFieldUpdateOperationsInput | number
    status?: NullableEnumreviewStatusFieldUpdateOperationsInput | $Enums.reviewStatus | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUpsertWithoutBookingInput = {
    update: XOR<RewardUpdateWithoutBookingInput, RewardUncheckedUpdateWithoutBookingInput>
    create: XOR<RewardCreateWithoutBookingInput, RewardUncheckedCreateWithoutBookingInput>
    where?: RewardWhereInput
  }

  export type RewardUpdateToOneWithWhereWithoutBookingInput = {
    where?: RewardWhereInput
    data: XOR<RewardUpdateWithoutBookingInput, RewardUncheckedUpdateWithoutBookingInput>
  }

  export type RewardUpdateWithoutBookingInput = {
    points?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumreward_categoryFieldUpdateOperationsInput | $Enums.reward_category | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRewardsNestedInput
  }

  export type RewardUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    points?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumreward_categoryFieldUpdateOperationsInput | $Enums.reward_category | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutRewardsInput = {
    fname?: string | null
    lname?: string | null
    email: string
    uid: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    reviews?: reviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRewardsInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    email: string
    uid: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRewardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRewardsInput, UserUncheckedCreateWithoutRewardsInput>
  }

  export type BookingCreateWithoutRewardInput = {
    bookingDate?: Date | string | null
    booking_hours?: string | null
    additionalNote?: string | null
    ageGroup?: string | null
    numberOfPersons?: number | null
    paymentMethod?: $Enums.BookingPaymentMethod | null
    status?: $Enums.BookingStatus | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBookingsInput
    listing?: ListingCreateNestedOneWithoutBookingsInput
    review?: reviewCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutRewardInput = {
    id?: number
    userId: number
    listingId?: number | null
    bookingDate?: Date | string | null
    booking_hours?: string | null
    additionalNote?: string | null
    ageGroup?: string | null
    numberOfPersons?: number | null
    paymentMethod?: $Enums.BookingPaymentMethod | null
    status?: $Enums.BookingStatus | null
    review_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingCreateOrConnectWithoutRewardInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutRewardInput, BookingUncheckedCreateWithoutRewardInput>
  }

  export type UserUpsertWithoutRewardsInput = {
    update: XOR<UserUpdateWithoutRewardsInput, UserUncheckedUpdateWithoutRewardsInput>
    create: XOR<UserCreateWithoutRewardsInput, UserUncheckedCreateWithoutRewardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRewardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRewardsInput, UserUncheckedUpdateWithoutRewardsInput>
  }

  export type UserUpdateWithoutRewardsInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    reviews?: reviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRewardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BookingUpsertWithoutRewardInput = {
    update: XOR<BookingUpdateWithoutRewardInput, BookingUncheckedUpdateWithoutRewardInput>
    create: XOR<BookingCreateWithoutRewardInput, BookingUncheckedCreateWithoutRewardInput>
    where?: BookingWhereInput
  }

  export type BookingUpdateToOneWithWhereWithoutRewardInput = {
    where?: BookingWhereInput
    data: XOR<BookingUpdateWithoutRewardInput, BookingUncheckedUpdateWithoutRewardInput>
  }

  export type BookingUpdateWithoutRewardInput = {
    bookingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking_hours?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfPersons?: NullableIntFieldUpdateOperationsInput | number | null
    paymentMethod?: NullableEnumBookingPaymentMethodFieldUpdateOperationsInput | $Enums.BookingPaymentMethod | null
    status?: NullableEnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBookingsNestedInput
    listing?: ListingUpdateOneWithoutBookingsNestedInput
    review?: reviewUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutRewardInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    listingId?: NullableIntFieldUpdateOperationsInput | number | null
    bookingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking_hours?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfPersons?: NullableIntFieldUpdateOperationsInput | number | null
    paymentMethod?: NullableEnumBookingPaymentMethodFieldUpdateOperationsInput | $Enums.BookingPaymentMethod | null
    status?: NullableEnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus | null
    review_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutNotificationsInput = {
    fname?: string | null
    lname?: string | null
    email: string
    uid: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingCreateNestedManyWithoutUserInput
    rewards?: RewardCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    reviews?: reviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    email: string
    uid: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    rewards?: RewardUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUpdateManyWithoutUserNestedInput
    rewards?: RewardUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    reviews?: reviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    rewards?: RewardUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    fname?: string | null
    lname?: string | null
    email: string
    uid: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingCreateNestedManyWithoutUserInput
    rewards?: RewardCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    reviews?: reviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    email: string
    uid: string
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    rewards?: RewardUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUpdateManyWithoutUserNestedInput
    rewards?: RewardUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    reviews?: reviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    rewards?: RewardUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BookingCreateManyUserInput = {
    id?: number
    listingId?: number | null
    bookingDate?: Date | string | null
    booking_hours?: string | null
    additionalNote?: string | null
    ageGroup?: string | null
    numberOfPersons?: number | null
    paymentMethod?: $Enums.BookingPaymentMethod | null
    status?: $Enums.BookingStatus | null
    review_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RewardCreateManyUserInput = {
    id?: number
    points?: number | null
    description?: string | null
    category?: $Enums.reward_category | null
    bookingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    link?: string | null
    entityId?: string | null
    entityType?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: number
    timestamp?: Date | string
    action: $Enums.AuditLogAction
    entityName?: string | null
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type reviewCreateManyUserInput = {
    id?: number
    listingId?: number | null
    rating: number
    status?: $Enums.reviewStatus | null
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingUpdateWithoutUserInput = {
    bookingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking_hours?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfPersons?: NullableIntFieldUpdateOperationsInput | number | null
    paymentMethod?: NullableEnumBookingPaymentMethodFieldUpdateOperationsInput | $Enums.BookingPaymentMethod | null
    status?: NullableEnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    listing?: ListingUpdateOneWithoutBookingsNestedInput
    review?: reviewUpdateOneWithoutBookingNestedInput
    reward?: RewardUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    listingId?: NullableIntFieldUpdateOperationsInput | number | null
    bookingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking_hours?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfPersons?: NullableIntFieldUpdateOperationsInput | number | null
    paymentMethod?: NullableEnumBookingPaymentMethodFieldUpdateOperationsInput | $Enums.BookingPaymentMethod | null
    status?: NullableEnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus | null
    review_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reward?: RewardUncheckedUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    listingId?: NullableIntFieldUpdateOperationsInput | number | null
    bookingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking_hours?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfPersons?: NullableIntFieldUpdateOperationsInput | number | null
    paymentMethod?: NullableEnumBookingPaymentMethodFieldUpdateOperationsInput | $Enums.BookingPaymentMethod | null
    status?: NullableEnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus | null
    review_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUpdateWithoutUserInput = {
    points?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumreward_categoryFieldUpdateOperationsInput | $Enums.reward_category | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    booking?: BookingUpdateOneWithoutRewardNestedInput
  }

  export type RewardUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    points?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumreward_categoryFieldUpdateOperationsInput | $Enums.reward_category | null
    bookingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    points?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumreward_categoryFieldUpdateOperationsInput | $Enums.reward_category | null
    bookingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: EnumAuditLogActionFieldUpdateOperationsInput | $Enums.AuditLogAction
    entityName?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: EnumAuditLogActionFieldUpdateOperationsInput | $Enums.AuditLogAction
    entityName?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: EnumAuditLogActionFieldUpdateOperationsInput | $Enums.AuditLogAction
    entityName?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reviewUpdateWithoutUserInput = {
    rating?: IntFieldUpdateOperationsInput | number
    status?: NullableEnumreviewStatusFieldUpdateOperationsInput | $Enums.reviewStatus | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    listing?: ListingUpdateOneWithoutReviewsNestedInput
    booking?: BookingUpdateOneWithoutReviewNestedInput
  }

  export type reviewUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    listingId?: NullableIntFieldUpdateOperationsInput | number | null
    rating?: IntFieldUpdateOperationsInput | number
    status?: NullableEnumreviewStatusFieldUpdateOperationsInput | $Enums.reviewStatus | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    booking?: BookingUncheckedUpdateOneWithoutReviewNestedInput
  }

  export type reviewUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    listingId?: NullableIntFieldUpdateOperationsInput | number | null
    rating?: IntFieldUpdateOperationsInput | number
    status?: NullableEnumreviewStatusFieldUpdateOperationsInput | $Enums.reviewStatus | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubCategoryOptionCreateManyMainCategoryInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpecificItemOptionCreateManyMainCategoryInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subCategoryId?: number | null
  }

  export type SubCategoryOptionUpdateWithoutMainCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    listings?: ListingUpdateManyWithoutSelectedSubCategoriesNestedInput
    specificItems?: SpecificItemOptionUpdateManyWithoutSubCategoryNestedInput
  }

  export type SubCategoryOptionUncheckedUpdateWithoutMainCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    listings?: ListingUncheckedUpdateManyWithoutSelectedSubCategoriesNestedInput
    specificItems?: SpecificItemOptionUncheckedUpdateManyWithoutSubCategoryNestedInput
  }

  export type SubCategoryOptionUncheckedUpdateManyWithoutMainCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpecificItemOptionUpdateWithoutMainCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    listings?: ListingUpdateManyWithoutSelectedSpecificItemsNestedInput
    subCategory?: SubCategoryOptionUpdateOneWithoutSpecificItemsNestedInput
  }

  export type SpecificItemOptionUncheckedUpdateWithoutMainCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    listings?: ListingUncheckedUpdateManyWithoutSelectedSpecificItemsNestedInput
  }

  export type SpecificItemOptionUncheckedUpdateManyWithoutMainCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ListingUpdateWithoutSelectedMainCategoriesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUpdateManyWithoutListingNestedInput
    reviews?: reviewUpdateManyWithoutListingNestedInput
    selectedSubCategories?: SubCategoryOptionUpdateManyWithoutListingsNestedInput
    selectedSpecificItems?: SpecificItemOptionUpdateManyWithoutListingsNestedInput
  }

  export type ListingUncheckedUpdateWithoutSelectedMainCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutListingNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutListingNestedInput
    selectedSubCategories?: SubCategoryOptionUncheckedUpdateManyWithoutListingsNestedInput
    selectedSpecificItems?: SpecificItemOptionUncheckedUpdateManyWithoutListingsNestedInput
  }

  export type ListingUncheckedUpdateManyWithoutSelectedMainCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpecificItemOptionCreateManySubCategoryInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mainCategoryId?: number | null
  }

  export type ListingUpdateWithoutSelectedSubCategoriesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUpdateManyWithoutListingNestedInput
    reviews?: reviewUpdateManyWithoutListingNestedInput
    selectedMainCategories?: MainCategoryOptionUpdateManyWithoutListingsNestedInput
    selectedSpecificItems?: SpecificItemOptionUpdateManyWithoutListingsNestedInput
  }

  export type ListingUncheckedUpdateWithoutSelectedSubCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutListingNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutListingNestedInput
    selectedMainCategories?: MainCategoryOptionUncheckedUpdateManyWithoutListingsNestedInput
    selectedSpecificItems?: SpecificItemOptionUncheckedUpdateManyWithoutListingsNestedInput
  }

  export type ListingUncheckedUpdateManyWithoutSelectedSubCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpecificItemOptionUpdateWithoutSubCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    listings?: ListingUpdateManyWithoutSelectedSpecificItemsNestedInput
    mainCategory?: MainCategoryOptionUpdateOneWithoutSpecificItemsNestedInput
  }

  export type SpecificItemOptionUncheckedUpdateWithoutSubCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mainCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    listings?: ListingUncheckedUpdateManyWithoutSelectedSpecificItemsNestedInput
  }

  export type SpecificItemOptionUncheckedUpdateManyWithoutSubCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mainCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ListingUpdateWithoutSelectedSpecificItemsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUpdateManyWithoutListingNestedInput
    reviews?: reviewUpdateManyWithoutListingNestedInput
    selectedMainCategories?: MainCategoryOptionUpdateManyWithoutListingsNestedInput
    selectedSubCategories?: SubCategoryOptionUpdateManyWithoutListingsNestedInput
  }

  export type ListingUncheckedUpdateWithoutSelectedSpecificItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutListingNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutListingNestedInput
    selectedMainCategories?: MainCategoryOptionUncheckedUpdateManyWithoutListingsNestedInput
    selectedSubCategories?: SubCategoryOptionUncheckedUpdateManyWithoutListingsNestedInput
  }

  export type ListingUncheckedUpdateManyWithoutSelectedSpecificItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    main_image?: NullableStringFieldUpdateOperationsInput | string | null
    sub_images?: ListingUpdatesub_imagesInput | string[]
    agegroup?: ListingUpdateagegroupInput | string[]
    location?: ListingUpdatelocationInput | string[]
    facilities?: ListingUpdatefacilitiesInput | string[]
    operatingHours?: ListingUpdateoperatingHoursInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCreateManyListingInput = {
    id?: number
    userId: number
    bookingDate?: Date | string | null
    booking_hours?: string | null
    additionalNote?: string | null
    ageGroup?: string | null
    numberOfPersons?: number | null
    paymentMethod?: $Enums.BookingPaymentMethod | null
    status?: $Enums.BookingStatus | null
    review_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type reviewCreateManyListingInput = {
    id?: number
    userId: number
    rating: number
    status?: $Enums.reviewStatus | null
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingUpdateWithoutListingInput = {
    bookingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking_hours?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfPersons?: NullableIntFieldUpdateOperationsInput | number | null
    paymentMethod?: NullableEnumBookingPaymentMethodFieldUpdateOperationsInput | $Enums.BookingPaymentMethod | null
    status?: NullableEnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBookingsNestedInput
    review?: reviewUpdateOneWithoutBookingNestedInput
    reward?: RewardUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutListingInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    bookingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking_hours?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfPersons?: NullableIntFieldUpdateOperationsInput | number | null
    paymentMethod?: NullableEnumBookingPaymentMethodFieldUpdateOperationsInput | $Enums.BookingPaymentMethod | null
    status?: NullableEnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus | null
    review_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reward?: RewardUncheckedUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateManyWithoutListingInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    bookingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    booking_hours?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfPersons?: NullableIntFieldUpdateOperationsInput | number | null
    paymentMethod?: NullableEnumBookingPaymentMethodFieldUpdateOperationsInput | $Enums.BookingPaymentMethod | null
    status?: NullableEnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus | null
    review_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reviewUpdateWithoutListingInput = {
    rating?: IntFieldUpdateOperationsInput | number
    status?: NullableEnumreviewStatusFieldUpdateOperationsInput | $Enums.reviewStatus | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    booking?: BookingUpdateOneWithoutReviewNestedInput
  }

  export type reviewUncheckedUpdateWithoutListingInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    status?: NullableEnumreviewStatusFieldUpdateOperationsInput | $Enums.reviewStatus | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    booking?: BookingUncheckedUpdateOneWithoutReviewNestedInput
  }

  export type reviewUncheckedUpdateManyWithoutListingInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    status?: NullableEnumreviewStatusFieldUpdateOperationsInput | $Enums.reviewStatus | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MainCategoryOptionUpdateWithoutListingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategories?: SubCategoryOptionUpdateManyWithoutMainCategoryNestedInput
    specificItems?: SpecificItemOptionUpdateManyWithoutMainCategoryNestedInput
  }

  export type MainCategoryOptionUncheckedUpdateWithoutListingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategories?: SubCategoryOptionUncheckedUpdateManyWithoutMainCategoryNestedInput
    specificItems?: SpecificItemOptionUncheckedUpdateManyWithoutMainCategoryNestedInput
  }

  export type MainCategoryOptionUncheckedUpdateManyWithoutListingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubCategoryOptionUpdateWithoutListingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mainCategory?: MainCategoryOptionUpdateOneWithoutSubCategoriesNestedInput
    specificItems?: SpecificItemOptionUpdateManyWithoutSubCategoryNestedInput
  }

  export type SubCategoryOptionUncheckedUpdateWithoutListingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mainCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    specificItems?: SpecificItemOptionUncheckedUpdateManyWithoutSubCategoryNestedInput
  }

  export type SubCategoryOptionUncheckedUpdateManyWithoutListingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mainCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpecificItemOptionUpdateWithoutListingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: SubCategoryOptionUpdateOneWithoutSpecificItemsNestedInput
    mainCategory?: MainCategoryOptionUpdateOneWithoutSpecificItemsNestedInput
  }

  export type SpecificItemOptionUncheckedUpdateWithoutListingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    mainCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpecificItemOptionUncheckedUpdateManyWithoutListingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
    mainCategoryId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}